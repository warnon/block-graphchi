!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
--out-implib	external/vpiotr-mongoose-cpp/Makefile	/^		-shared -Wl,--out-implib=$(PROG).lib -o _$(PROG).dll$/;"	m
ACCESS_CONTROL_LIST	external/vpiotr-mongoose-cpp/mongoose.c	/^    ENABLE_KEEP_ALIVE, ACCESS_CONTROL_LIST, MAX_REQUEST_SIZE,$/;"	e	enum:__anon4	file:
ACCESS_LOG_FILE	external/vpiotr-mongoose-cpp/mongoose.c	/^    PROTECT_URI, AUTHENTICATION_DOMAIN, SSI_EXTENSIONS, ACCESS_LOG_FILE,$/;"	e	enum:__anon4	file:
ALL_EDGES	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        ALL_EDGES = 3$/;"	e	enum:graphlab::edge_dir_type
ARRAY_SIZE	external/vpiotr-mongoose-cpp/mongoose.c	213;"	d	file:
ASSERT_EQ	api/graphlab2_1_GAS_api/assertions.hpp	153;"	d
ASSERT_FALSE	api/graphlab2_1_GAS_api/assertions.hpp	164;"	d
ASSERT_GE	api/graphlab2_1_GAS_api/assertions.hpp	157;"	d
ASSERT_GT	api/graphlab2_1_GAS_api/assertions.hpp	158;"	d
ASSERT_LE	api/graphlab2_1_GAS_api/assertions.hpp	155;"	d
ASSERT_LT	api/graphlab2_1_GAS_api/assertions.hpp	156;"	d
ASSERT_MSG	api/graphlab2_1_GAS_api/assertions.hpp	168;"	d
ASSERT_NE	api/graphlab2_1_GAS_api/assertions.hpp	154;"	d
ASSERT_STREQ	api/graphlab2_1_GAS_api/assertions.hpp	165;"	d
ASSERT_TRUE	api/graphlab2_1_GAS_api/assertions.hpp	163;"	d
ATOMIC_HPP	util/atomic.hpp	2;"	d
AUTHENTICATION_DOMAIN	external/vpiotr-mongoose-cpp/mongoose.c	/^    PROTECT_URI, AUTHENTICATION_DOMAIN, SSI_EXTENSIONS, ACCESS_LOG_FILE,$/;"	e	enum:__anon4	file:
BBUF	engine/dynamic_graphs/graphchi_dynamicgraph_engine.hpp	533;"	d
BLACK	logger/logger.hpp	293;"	d
BLINK	logger/logger.hpp	289;"	d
BLOCK_ACTION	io/stripedio.hpp	/^    enum BLOCK_ACTION { READ, WRITE };$/;"	g	namespace:graphchi
BLUE	logger/logger.hpp	297;"	d
BOOST_PREVENT_MACRO_SUBSTITUTION	api/graphlab2_1_GAS_api/random.cpp	/^            result_type max BOOST_PREVENT_MACRO_SUBSTITUTION () const { return max_value; }$/;"	f	class:graphlab::random::nondet_generator
BOOST_PREVENT_MACRO_SUBSTITUTION	api/graphlab2_1_GAS_api/random.cpp	/^            result_type min BOOST_PREVENT_MACRO_SUBSTITUTION () const { return min_value; }$/;"	f	class:graphlab::random::nondet_generator
BRIGHT	logger/logger.hpp	286;"	d
BUCKETS	util/radixSort.hpp	42;"	d
BUFSIZ	external/vpiotr-mongoose-cpp/mongoose.c	63;"	d	file:
CACHED_SESSION_ID	io/stripedio.hpp	53;"	d
CFLAGS	external/vpiotr-mongoose-cpp/Makefile	/^CFLAGS=		-W -Wall -std=c99 -pedantic -O2 $(COPT)$/;"	m
CFLAGS	external/vpiotr-mongoose-cpp/examples/Makefile	/^CFLAGS=	-W -Wall -I.. -pthread -g$/;"	m
CGI_ENVIRONMENT	external/vpiotr-mongoose-cpp/mongoose.c	/^    CGI_EXTENSIONS, CGI_ENVIRONMENT, PUT_DELETE_PASSWORDS_FILE, CGI_INTERPRETER,$/;"	e	enum:__anon4	file:
CGI_ENVIRONMENT_SIZE	external/vpiotr-mongoose-cpp/mongoose.c	211;"	d	file:
CGI_EXTENSIONS	external/vpiotr-mongoose-cpp/mongoose.c	/^    CGI_EXTENSIONS, CGI_ENVIRONMENT, PUT_DELETE_PASSWORDS_FILE, CGI_INTERPRETER,$/;"	e	enum:__anon4	file:
CGI_INTERPRETER	external/vpiotr-mongoose-cpp/mongoose.c	/^    CGI_EXTENSIONS, CGI_ENVIRONMENT, PUT_DELETE_PASSWORDS_FILE, CGI_INTERPRETER,$/;"	e	enum:__anon4	file:
CHECK	api/graphlab2_1_GAS_api/assertions.hpp	90;"	d
CHECK_EQ	api/graphlab2_1_GAS_api/assertions.hpp	139;"	d
CHECK_ERR	api/graphlab2_1_GAS_api/assertions.hpp	180;"	d
CHECK_GE	api/graphlab2_1_GAS_api/assertions.hpp	143;"	d
CHECK_GT	api/graphlab2_1_GAS_api/assertions.hpp	144;"	d
CHECK_LE	api/graphlab2_1_GAS_api/assertions.hpp	141;"	d
CHECK_LT	api/graphlab2_1_GAS_api/assertions.hpp	142;"	d
CHECK_NE	api/graphlab2_1_GAS_api/assertions.hpp	140;"	d
CHECK_OP	api/graphlab2_1_GAS_api/assertions.hpp	121;"	d
CHI_HTTPADMIN_DEF	httpadmin/chi_httpadmin.hpp	11;"	d
CL	external/vpiotr-mongoose-cpp/Makefile	/^CL=	cl \/MD \/TC \/nologo $(DBG) \/Gz \/W3 \/DNO_SSL_DL$/;"	m
CLEARMASK	api/graph_objects.hpp	386;"	d
COLOROUTPUT	logger/logger.hpp	89;"	d
COMPUTE_INTERVALS	preprocessing/sharder.hpp	/^    enum ProcPhase  { COMPUTE_INTERVALS=1, SHOVEL=2 };$/;"	e	enum:graphchi::ProcPhase
CONFIG_FILE	external/vpiotr-mongoose-cpp/main.c	64;"	d	file:
CRYPTO_LIB	external/vpiotr-mongoose-cpp/mongoose.c	182;"	d	file:
CRYPTO_LIB	external/vpiotr-mongoose-cpp/mongoose.c	188;"	d	file:
CRYPTO_LIB	external/vpiotr-mongoose-cpp/mongoose.c	94;"	d	file:
CRYPTO_LOCK	external/vpiotr-mongoose-cpp/mongoose.c	249;"	d	file:
CRYPTO_num_locks	external/vpiotr-mongoose-cpp/mongoose.c	303;"	d	file:
CRYPTO_set_id_callback	external/vpiotr-mongoose-cpp/mongoose.c	306;"	d	file:
CRYPTO_set_locking_callback	external/vpiotr-mongoose-cpp/mongoose.c	304;"	d	file:
CXXFLAGS	external/vpiotr-mongoose-cpp/Makefile	/^CXXFLAGS=      -W -Wall -std=c++98 -pedantic -O2 $(COPT)$/;"	m
CYA	external/vpiotr-mongoose-cpp/Makefile	/^CYA=	y:$/;"	m
CYAFL	external/vpiotr-mongoose-cpp/Makefile	/^CYAFL=	\/c \/I $(CYA)\\ctaocrypt\\include \/I $(CYA)\\include \/D_LIB$/;"	m
CYAN	logger/logger.hpp	299;"	d
CYASRC	external/vpiotr-mongoose-cpp/Makefile	/^CYASRC= $(CYA)\/src\/cyassl_int.c \\$/;"	m
Connection	external/vpiotr-mongoose-cpp/bindings/python/mongoose.py	/^class Connection(object):$/;"	c
ControlHandler	external/vpiotr-mongoose-cpp/main.c	/^static void WINAPI ControlHandler(DWORD code) {$/;"	f	file:
DASSERT_FALSE	api/graphlab2_1_GAS_api/assertions.hpp	191;"	d
DASSERT_FALSE	api/graphlab2_1_GAS_api/assertions.hpp	202;"	d
DASSERT_MSG	api/graphlab2_1_GAS_api/assertions.hpp	192;"	d
DASSERT_MSG	api/graphlab2_1_GAS_api/assertions.hpp	203;"	d
DASSERT_TRUE	api/graphlab2_1_GAS_api/assertions.hpp	190;"	d
DASSERT_TRUE	api/graphlab2_1_GAS_api/assertions.hpp	201;"	d
DBG	external/vpiotr-mongoose-cpp/Makefile	/^DBG=	\/DNDEBUG \/O1$/;"	m
DCHECK_EQ	api/graphlab2_1_GAS_api/assertions.hpp	184;"	d
DCHECK_EQ	api/graphlab2_1_GAS_api/assertions.hpp	195;"	d
DCHECK_GE	api/graphlab2_1_GAS_api/assertions.hpp	188;"	d
DCHECK_GE	api/graphlab2_1_GAS_api/assertions.hpp	199;"	d
DCHECK_GT	api/graphlab2_1_GAS_api/assertions.hpp	189;"	d
DCHECK_GT	api/graphlab2_1_GAS_api/assertions.hpp	200;"	d
DCHECK_LE	api/graphlab2_1_GAS_api/assertions.hpp	186;"	d
DCHECK_LE	api/graphlab2_1_GAS_api/assertions.hpp	197;"	d
DCHECK_LT	api/graphlab2_1_GAS_api/assertions.hpp	187;"	d
DCHECK_LT	api/graphlab2_1_GAS_api/assertions.hpp	198;"	d
DCHECK_NE	api/graphlab2_1_GAS_api/assertions.hpp	185;"	d
DCHECK_NE	api/graphlab2_1_GAS_api/assertions.hpp	196;"	d
DEBUG_TRACE	external/vpiotr-mongoose-cpp/mongoose.c	216;"	d	file:
DEBUG_TRACE	external/vpiotr-mongoose-cpp/mongoose.c	227;"	d	file:
DEF_GRAPH	preprocessing/util/orderbydegree.hpp	12;"	d
DEF_GRAPHCHI_BITSETSCHEDULER	engine/bitset_scheduler.hpp	30;"	d
DEF_GRAPHCHI_CHIVECTOR	api/dynamicdata/chivector.hpp	31;"	d
DEF_GRAPHCHI_CONTEXT	api/graphchi_context.hpp	33;"	d
DEF_GRAPHCHI_DEGREE_DATA	engine/auxdata/degree_data.hpp	31;"	d
DEF_GRAPHCHI_EDGEBUFFERS	engine/dynamic_graphs/edgebuffers.hpp	30;"	d
DEF_GRAPHCHI_FILE_REPORTER	metrics/reps/file_reporter.hpp	31;"	d
DEF_GRAPHCHI_GNUPLOTTER	httpadmin/plotter.hpp	32;"	d
DEF_GRAPHCHI_GRAPHCHI_ENGINE	engine/graphchi_engine.hpp	30;"	d
DEF_GRAPHCHI_IMETRICS_REPORTER	metrics/imetrics_reporter.hpp	33;"	d
DEF_GRAPHCHI_ISCHEDULER	api/ischeduler.hpp	31;"	d
DEF_GRAPHCHI_LABELANALYSIS	util/labelanalysis.hpp	49;"	d
DEF_GRAPHCHI_MEMSHARD	shards/dynamicdata/memoryshard.hpp	31;"	d
DEF_GRAPHCHI_MEMSHARD	shards/memoryshard.hpp	34;"	d
DEF_GRAPHCHI_OBJECTS	api/graph_objects.hpp	31;"	d
DEF_GRAPHCHI_SLIDINGSHARD	shards/dynamicdata/slidingshard.hpp	31;"	d
DEF_GRAPHCHI_SLIDINGSHARD	shards/slidingshard.hpp	35;"	d
DEF_GRAPHCHI_TOPLIST	util/toplist.hpp	30;"	d
DEF_GRAPHCHI_TYPES	graphchi_types.hpp	19;"	d
DEF_GRAPHCHI_VERTEXDATA	engine/auxdata/dynamicdata/vertex_data_dynamic.hpp	41;"	d
DEF_GRAPHCHI_VERTEXDATA	engine/auxdata/vertex_data.hpp	38;"	d
DEF_GRAPHCHI_VERTEX_AGGREGATOR	api/vertex_aggregator.hpp	34;"	d
DEF_GRAPHLAB_GAS_API_V2_1	api/graphlab2_1_GAS_api/graphlab.hpp	30;"	d
DEF_GRAPHLAB_WRAPPERS	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	30;"	d
DEF_IOUTIL_HPP	util/ioutil.hpp	29;"	d
DEF_KWAYMERGE_GRAPHCHI	util/kwaymerge.hpp	31;"	d
DEF_MERGE	util/merge.hpp	26;"	d
DEF_METRICS_HPP	metrics/metrics.hpp	31;"	d
DEF_MINHEAP_GRAPHCHI	util/binary_minheap.hpp	30;"	d
DEF_OUTPUT_HPP	output/output.hpp	31;"	d
DEF_PTHREAD_TOOLS_HPP	util/pthread_tools.hpp	2;"	d
DEF_STRIPEDIO_HPP	io/stripedio.hpp	32;"	d
DENSE_BITSET_HPP	util/dense_bitset.hpp	5;"	d
DIM	logger/logger.hpp	287;"	d
DIR	external/vpiotr-mongoose-cpp/mongoose.c	/^typedef struct DIR {$/;"	s	file:
DIR	external/vpiotr-mongoose-cpp/mongoose.c	/^} DIR;$/;"	t	typeref:struct:DIR	file:
DIRSEP	external/vpiotr-mongoose-cpp/main.c	44;"	d	file:
DIRSEP	external/vpiotr-mongoose-cpp/main.c	52;"	d	file:
DIRSEP	external/vpiotr-mongoose-cpp/mongoose.c	191;"	d	file:
DIRSEP	external/vpiotr-mongoose-cpp/mongoose.c	95;"	d	file:
DISALLOW_COPY_AND_ASSIGN	api/graphlab2_1_GAS_api/graphlab.hpp	56;"	d
DOCUMENT_ROOT	external/vpiotr-mongoose-cpp/mongoose.c	/^    DOCUMENT_ROOT, SSL_CERTIFICATE, NUM_THREADS, RUN_AS_USER,$/;"	e	enum:__anon4	file:
DYNAMICEDATA	tests/dynamicdata_smoketest.cpp	30;"	d	file:
DYNAMICEDATA	tests/test_dynamicedata_loader.cpp	31;"	d	file:
DYNAMICVERTEXDATA	tests/test_dynamicedata_loader.cpp	32;"	d	file:
DuplicateEdgeFilter	preprocessing/sharder.hpp	/^    class DuplicateEdgeFilter {$/;"	c	namespace:graphchi
DynamicDataLoaderTestProgram	tests/test_dynamicedata_loader.cpp	/^struct DynamicDataLoaderTestProgram : public GraphChiProgram<VertexDataType, EdgeDataType> {$/;"	s	file:
DynamicDataSmokeTestProgram	tests/dynamicdata_smoketest.cpp	/^struct DynamicDataSmokeTestProgram : public GraphChiProgram<VertexDataType, EdgeDataType> {$/;"	s	file:
EDGE_BUFFER_CHUNKSIZE	engine/dynamic_graphs/edgebuffers.hpp	53;"	d
ENABLE_DIRECTORY_LISTING	external/vpiotr-mongoose-cpp/mongoose.c	/^    SSL_CHAIN_FILE, ENABLE_DIRECTORY_LISTING, ERROR_LOG_FILE,$/;"	e	enum:__anon4	file:
ENABLE_KEEP_ALIVE	external/vpiotr-mongoose-cpp/mongoose.c	/^    ENABLE_KEEP_ALIVE, ACCESS_CONTROL_LIST, MAX_REQUEST_SIZE,$/;"	e	enum:__anon4	file:
ENTRIES_PER_CONFIG_OPTION	external/vpiotr-mongoose-cpp/mongoose.c	422;"	d	file:
EPOCH_DIFF	external/vpiotr-mongoose-cpp/mongoose.c	72;"	d	file:
ERRNO	external/vpiotr-mongoose-cpp/mongoose.c	199;"	d	file:
ERRNO	external/vpiotr-mongoose-cpp/mongoose.c	91;"	d	file:
ERROR	api/graphlab2_1_GAS_api/assertions.hpp	218;"	d
ERROR_LOG_FILE	external/vpiotr-mongoose-cpp/mongoose.c	/^    SSL_CHAIN_FILE, ENABLE_DIRECTORY_LISTING, ERROR_LOG_FILE,$/;"	e	enum:__anon4	file:
ERR_error_string	external/vpiotr-mongoose-cpp/mongoose.c	309;"	d	file:
ERR_get_error	external/vpiotr-mongoose-cpp/mongoose.c	308;"	d	file:
ET	api/functional/functional_bulksync.hpp	/^        typedef PairContainer<typename KERNEL::EdgeDataType> ET;$/;"	t	class:graphchi::functional_vertex_unweighted_bulksync
ET	api/functional/functional_semisync.hpp	/^    typedef typename KERNEL::EdgeDataType ET;$/;"	t	class:graphchi::functional_vertex_unweighted_semisync
EVENT_LOG	external/vpiotr-mongoose-cpp/bindings/python/mongoose.py	/^EVENT_LOG = 2$/;"	v
EWOULDBLOCK	external/vpiotr-mongoose-cpp/mongoose.c	99;"	d	file:
EXPECT_EQ	api/graphlab2_1_GAS_api/assertions.hpp	147;"	d
EXPECT_FALSE	api/graphlab2_1_GAS_api/assertions.hpp	161;"	d
EXPECT_GE	api/graphlab2_1_GAS_api/assertions.hpp	151;"	d
EXPECT_GT	api/graphlab2_1_GAS_api/assertions.hpp	152;"	d
EXPECT_LE	api/graphlab2_1_GAS_api/assertions.hpp	149;"	d
EXPECT_LT	api/graphlab2_1_GAS_api/assertions.hpp	150;"	d
EXPECT_NE	api/graphlab2_1_GAS_api/assertions.hpp	148;"	d
EXPECT_STREQ	api/graphlab2_1_GAS_api/assertions.hpp	162;"	d
EXPECT_TRUE	api/graphlab2_1_GAS_api/assertions.hpp	160;"	d
EXTRA_MIME_TYPES	external/vpiotr-mongoose-cpp/mongoose.c	/^    EXTRA_MIME_TYPES, LISTENING_PORTS,$/;"	e	enum:__anon4	file:
EdgeDataType	api/functional/functional_api.hpp	/^        typedef FEdgeDataType EdgeDataType;$/;"	t	struct:graphchi::functional_kernel
EdgeDataType	api/functional/functional_bulksync.hpp	/^        typedef PairContainer<typename KERNEL::EdgeDataType> EdgeDataType;$/;"	t	class:graphchi::FunctionalProgramProxyBulkSync
EdgeDataType	api/functional/functional_semisync.hpp	/^    typedef typename KERNEL::EdgeDataType EdgeDataType;$/;"	t	class:graphchi::FunctionalProgramProxySemisync
EdgeDataType	api/graphchi_program.hpp	/^        typedef EdgeDataType_ EdgeDataType;$/;"	t	class:graphchi::GraphChiProgram
EdgeDataType	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        typedef typename GraphLabVertexProgram::edge_data_type EdgeDataType;$/;"	t	struct:graphlab::GraphLabEdgeAggregatorWrapper
EdgeDataType	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        typedef typename GraphLabVertexProgram::edge_data_type EdgeDataType;$/;"	t	struct:graphlab::GraphLabWrapper
EdgeDataType	preprocessing/blocksplitter.cpp	/^typedef float EdgeDataType;$/;"	t	file:
EdgeDataType	tests/basic_dynamicengine_smoketest.cpp	/^typedef vid_t EdgeDataType;$/;"	t	file:
EdgeDataType	tests/basic_dynamicengine_smoketest2.cpp	/^typedef vid_t EdgeDataType;$/;"	t	file:
EdgeDataType	tests/basic_smoketest.cpp	/^typedef vid_t EdgeDataType;$/;"	t	file:
EdgeDataType	tests/dynamicdata_smoketest.cpp	/^typedef chivector<vid_t>  EdgeDataType;$/;"	t	file:
EdgeDataType	tests/test_dynamicedata_loader.cpp	/^typedef chivector<vid_t>  EdgeDataType;$/;"	t	file:
EventHandler	external/vpiotr-mongoose-cpp/bindings/python/example.py	/^def EventHandler(event, conn, info):$/;"	f
F	external/vpiotr-mongoose-cpp/Makefile	/^	F=mongoose-`perl -lne '\/define\\s+MONGOOSE_VERSION\\s+"(\\S+)"\/ and print $$1' mongoose.c`.tgz ; cd .. && tar --exclude \\*.hg --exclude \\*.svn --exclude \\*.swp --exclude \\*.nfs\\* -czf x mongoose && mv x mongoose\/$$F$/;"	m
F1	external/vpiotr-mongoose-cpp/mongoose.c	1815;"	d	file:
F2	external/vpiotr-mongoose-cpp/mongoose.c	1816;"	d	file:
F3	external/vpiotr-mongoose-cpp/mongoose.c	1817;"	d	file:
F4	external/vpiotr-mongoose-cpp/mongoose.c	1818;"	d	file:
FIXLINE	preprocessing/conversions.hpp	/^    inline void FIXLINE(char * s) {$/;"	f	namespace:graphchi
FIXLINE	util/randomweightinject.cpp	/^inline void FIXLINE(char * s) {$/;"	f
FunctionalProgramProxyBulkSync	api/functional/functional_bulksync.hpp	/^    class FunctionalProgramProxyBulkSync : public GraphChiProgram<typename KERNEL::VertexDataType,  PairContainer<typename KERNEL::EdgeDataType>, functional_vertex_unweighted_bulksync<KERNEL>  > {$/;"	c	namespace:graphchi
FunctionalProgramProxySemisync	api/functional/functional_semisync.hpp	/^    class FunctionalProgramProxySemisync : public GraphChiProgram<typename KERNEL::VertexDataType, typename  KERNEL::EdgeDataType, functional_vertex_unweighted_semisync<KERNEL> > {$/;"	c	namespace:graphchi
GLOBAL_PASSWORDS_FILE	external/vpiotr-mongoose-cpp/mongoose.c	/^    GLOBAL_PASSWORDS_FILE, INDEX_FILES,$/;"	e	enum:__anon4	file:
GLVertexDataType	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        typedef typename GraphLabVertexProgram::vertex_data_type GLVertexDataType;$/;"	t	struct:graphlab::GraphLabEdgeAggregatorWrapper
GLVertexDataType	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        typedef typename GraphLabVertexProgram::vertex_data_type GLVertexDataType;$/;"	t	struct:graphlab::GraphLabWrapper
GRAPHCHI_BASIC_REPORTER	metrics/reps/basic_reporter.hpp	33;"	d
GRAPHCHI_CMDOPTS_DEF	util/cmdopts.hpp	30;"	d
GRAPHCHI_CONFIGFILE_DEF	util/configfile.hpp	31;"	d
GRAPHCHI_CONVERSIONS_DEF	preprocessing/conversions.hpp	29;"	d
GRAPHCHI_DEF_ALLBASIC_INCLUDES	graphchi_basic_includes.hpp	33;"	d
GRAPHCHI_DYNAMICGRAPHENGINE_DEF	engine/dynamic_graphs/graphchi_dynamicgraph_engine.hpp	32;"	d
GRAPHCHI_FILENAMES_DEF	api/chifilenames.hpp	34;"	d
GRAPHCHI_FUNCTIONALAPI_DEF	api/functional/functional_api.hpp	34;"	d
GRAPHCHI_FUNCTIONALDEFS_DEF	api/functional/functional_defs.hpp	28;"	d
GRAPHCHI_FUNCTIONALENGINE_DEF	engine/functional/functional_engine.hpp	33;"	d
GRAPHCHI_FUNCTIONAL_BULKSYNC_DEF	api/functional/functional_bulksync.hpp	36;"	d
GRAPHCHI_FUNCTIONAL_SEMISYNC_DEF	api/functional/functional_semisync.hpp	30;"	d
GRAPHCHI_HTML_REPORTER	metrics/reps/html_reporter.hpp	32;"	d
GRAPHCHI_LOG_LOG_HPP	logger/logger.hpp	50;"	d
GRAPHCHI_PROGRAM_DEF	api/graphchi_program.hpp	33;"	d
GRAPHCHI_QSORT_INCLUDED	util/qsort.hpp	25;"	d
GRAPHCHI_SHARDER_DEF	preprocessing/sharder.hpp	36;"	d
GRAPHLAB_MACROS	api/graphlab2_1_GAS_api/graphlab.hpp	52;"	d
GRAPHLAB_MACROS_INC_LEVEL	api/graphlab2_1_GAS_api/graphlab.hpp	43;"	d
GRAPHLAB_NULL_REPORTER	metrics/reps/null_reporter.hpp	29;"	d
GRAPHLAB_RANDOM_HPP	api/graphlab2_1_GAS_api/random.hpp	25;"	d
GREEN	logger/logger.hpp	295;"	d
GUILIB	external/vpiotr-mongoose-cpp/Makefile	/^GUILIB=	user32.lib shell32.lib$/;"	m
GraphChiProgram	api/graphchi_program.hpp	/^    class GraphChiProgram {$/;"	c	namespace:graphchi
GraphLabEdgeAggregatorWrapper	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        GraphLabEdgeAggregatorWrapper(EdgeMapType map_function,$/;"	f	struct:graphlab::GraphLabEdgeAggregatorWrapper
GraphLabEdgeAggregatorWrapper	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^    struct GraphLabEdgeAggregatorWrapper : public GraphChiProgram<bool, typename GraphLabVertexProgram::edge_data_type> {$/;"	s	namespace:graphlab
GraphLabEdgeWrapper	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        GraphLabEdgeWrapper(graphchi_edge<EdgeDataType> * edge, VertexType * vertex,$/;"	f	struct:graphlab::GraphLabEdgeWrapper
GraphLabEdgeWrapper	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^    struct GraphLabEdgeWrapper {$/;"	s	namespace:graphlab
GraphLabVertexWrapper	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        GraphLabVertexWrapper(graphchi::vid_t vertexId, VertexType * vertex,$/;"	f	struct:graphlab::GraphLabVertexWrapper
GraphLabVertexWrapper	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^    struct GraphLabVertexWrapper {$/;"	s	namespace:graphlab
GraphLabWrapper	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        GraphLabWrapper() {$/;"	f	struct:graphlab::GraphLabWrapper
GraphLabWrapper	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^    struct GraphLabWrapper : public GraphChiProgram<bool, typename GraphLabVertexProgram::edge_data_type> {$/;"	s	namespace:graphlab
HEXTOI	external/vpiotr-mongoose-cpp/mongoose.c	1433;"	d	file:
HIDDEN	logger/logger.hpp	291;"	d
HIGHMASK	api/graph_objects.hpp	385;"	d
HTTP_ERROR	external/vpiotr-mongoose-cpp/bindings/python/mongoose.py	/^HTTP_ERROR = 1$/;"	v
ID_EDIT_CONFIG	external/vpiotr-mongoose-cpp/main.c	304;"	d	file:
ID_ICON	external/vpiotr-mongoose-cpp/main.c	308;"	d	file:
ID_INSTALL_SERVICE	external/vpiotr-mongoose-cpp/main.c	306;"	d	file:
ID_QUIT	external/vpiotr-mongoose-cpp/main.c	303;"	d	file:
ID_REMOVE_SERVICE	external/vpiotr-mongoose-cpp/main.c	307;"	d	file:
ID_SEPARATOR	external/vpiotr-mongoose-cpp/main.c	305;"	d	file:
ID_TRAYICON	external/vpiotr-mongoose-cpp/main.c	302;"	d	file:
INDEX_FILES	external/vpiotr-mongoose-cpp/mongoose.c	/^    GLOBAL_PASSWORDS_FILE, INDEX_FILES,$/;"	e	enum:__anon4	file:
INIT_SSL	external/vpiotr-mongoose-cpp/bindings/python/mongoose.py	/^INIT_SSL = 3$/;"	v
INT64_FMT	external/vpiotr-mongoose-cpp/mongoose.c	102;"	d	file:
INT64_FMT	external/vpiotr-mongoose-cpp/mongoose.c	201;"	d	file:
INT64_MAX	external/vpiotr-mongoose-cpp/mongoose.c	148;"	d	file:
INTEGER	metrics/metrics.hpp	/^  enum metrictype {REAL, INTEGER, TIME, STRING, VECTOR};$/;"	e	enum:graphchi::metrictype
INVALID_SOCKET	external/vpiotr-mongoose-cpp/mongoose.c	200;"	d	file:
IN_EDGES	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        IN_EDGES = 1, $/;"	e	enum:graphlab::edge_dir_type
ISORT	util/qsort.hpp	41;"	d
IS_DIRSEP_CHAR	external/vpiotr-mongoose-cpp/mongoose.c	192;"	d	file:
IS_DIRSEP_CHAR	external/vpiotr-mongoose-cpp/mongoose.c	96;"	d	file:
IS_POD_TYPE	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^    struct IS_POD_TYPE { };$/;"	s	namespace:graphlab
J	external/vpiotr-mongoose-cpp/examples/html/jquery.js	/^e(a[0],b):w}function J(){return(new Date).getTime()}function Y(){return false}function Z(){return true}function na(a,b,d){d[0].type=a;return c.event.handle.apply(b,d)}function oa(a){var b,d=[],f=[],e=arguments,j,i,o,k,n,r;i=c.data(this,"events");if(!(a.liveFired===this||!i||!i.live||a.button&&a.type==="click")){a.liveFired=this;var u=i.live.slice(0);for(k=0;k<u.length;k++){i=u[k];i.origType.replace(O,"")===a.type?f.push(i.selector):u.splice(k--,1)}j=c(a.target).closest(f,a.currentTarget);n=0;for(r=$/;"	f
K	util/kwaymerge.hpp	/^    int K;$/;"	m	class:kway_merge
LIB	external/vpiotr-mongoose-cpp/Makefile	/^LIB=		_$(PROG).so$/;"	m
LINFLAGS	external/vpiotr-mongoose-cpp/Makefile	/^LINFLAGS=	-ldl -pthread $(CFLAGS)$/;"	m
LINK	external/vpiotr-mongoose-cpp/Makefile	/^LINK=	\/link \/incremental:no \/libpath:$(VC)\\lib \/subsystem:windows \\$/;"	m
LISTENING_PORT	external/vpiotr-mongoose-cpp/test/embed.c	34;"	d	file:
LISTENING_PORTS	external/vpiotr-mongoose-cpp/mongoose.c	/^    EXTRA_MIME_TYPES, LISTENING_PORTS,$/;"	e	enum:__anon4	file:
LOG_DEBUG	logger/logger.hpp	76;"	d
LOG_ERROR	logger/logger.hpp	73;"	d
LOG_FATAL	logger/logger.hpp	72;"	d
LOG_INFO	logger/logger.hpp	75;"	d
LOG_NONE	logger/logger.hpp	71;"	d
LOG_WARNING	logger/logger.hpp	74;"	d
LocalMongooseEventHandler	external/vpiotr-mongoose-cpp/mongcpp.cpp	/^static void *LocalMongooseEventHandler(enum mg_event eventCode,$/;"	f	file:
MAC_SHARED	external/vpiotr-mongoose-cpp/Makefile	/^MAC_SHARED=	-flat_namespace -bundle -undefined suppress$/;"	m
MAGENTA	logger/logger.hpp	298;"	d
MAKEUQUAD	external/vpiotr-mongoose-cpp/mongoose.c	69;"	d	file:
MAX_CGI_ENVIR_VARS	external/vpiotr-mongoose-cpp/mongoose.c	212;"	d	file:
MAX_MESSAGES	external/vpiotr-mongoose-cpp/examples/chat.c	25;"	d	file:
MAX_MESSAGE_LEN	external/vpiotr-mongoose-cpp/examples/chat.c	24;"	d	file:
MAX_OPTIONS	external/vpiotr-mongoose-cpp/main.c	56;"	d	file:
MAX_RADIX	util/radixSort.hpp	41;"	d
MAX_REQUEST_SIZE	external/vpiotr-mongoose-cpp/mongoose.c	/^    ENABLE_KEEP_ALIVE, ACCESS_CONTROL_LIST, MAX_REQUEST_SIZE,$/;"	e	enum:__anon4	file:
MAX_SESSIONS	external/vpiotr-mongoose-cpp/examples/chat.c	26;"	d	file:
MAX_USER_LEN	external/vpiotr-mongoose-cpp/examples/chat.c	23;"	d	file:
MD5Context	external/vpiotr-mongoose-cpp/mongoose.c	/^typedef struct MD5Context {$/;"	s	file:
MD5Final	external/vpiotr-mongoose-cpp/mongoose.c	/^static void MD5Final(unsigned char digest[16], MD5_CTX *ctx) {$/;"	f	file:
MD5Init	external/vpiotr-mongoose-cpp/mongoose.c	/^static void MD5Init(MD5_CTX *ctx) {$/;"	f	file:
MD5STEP	external/vpiotr-mongoose-cpp/mongoose.c	1820;"	d	file:
MD5Transform	external/vpiotr-mongoose-cpp/mongoose.c	/^static void MD5Transform(uint32_t buf[4], uint32_t const in[16]) {$/;"	f	file:
MD5Update	external/vpiotr-mongoose-cpp/mongoose.c	/^static void MD5Update(MD5_CTX *ctx, unsigned char const *buf, unsigned len) {$/;"	f	file:
MD5_CTX	external/vpiotr-mongoose-cpp/mongoose.c	/^} MD5_CTX;$/;"	t	typeref:struct:MD5Context	file:
MG_AUTHENTICATE	external/vpiotr-mongoose-cpp/mongoose.h	/^  MG_AUTHENTICATE,  \/\/ Authenticate a new HTTP request.  request_info->ah$/;"	e	enum:mg_event
MG_EVENT_LOG	external/vpiotr-mongoose-cpp/mongoose.h	/^  MG_EVENT_LOG,     \/\/ Mongoose logs an event, request_info.log_message$/;"	e	enum:mg_event
MG_HTTP_ERROR	external/vpiotr-mongoose-cpp/mongoose.h	/^  MG_HTTP_ERROR,    \/\/ HTTP error must be returned to the client$/;"	e	enum:mg_event
MG_INIT_SSL	external/vpiotr-mongoose-cpp/mongoose.h	/^  MG_INIT_SSL,      \/\/ Mongoose initializes SSL. Instead of mg_connection *,$/;"	e	enum:mg_event
MG_NEW_REQUEST	external/vpiotr-mongoose-cpp/mongoose.h	/^  MG_NEW_REQUEST,   \/\/ New HTTP request has arrived from the client$/;"	e	enum:mg_event
MINCAPACITY	api/dynamicdata/chivector.hpp	39;"	d
MINGWDBG	external/vpiotr-mongoose-cpp/Makefile	/^MINGWDBG= -DNDEBUG -Os$/;"	m
MINGWOPT	external/vpiotr-mongoose-cpp/Makefile	/^MINGWOPT= -W -Wall -mthreads -Wl,--subsystem,windows $(MINGWDBG)$/;"	m
MONGOOSE_HEADER_INCLUDED	external/vpiotr-mongoose-cpp/mongoose.h	22;"	d
MONGOOSE_VERSION	external/vpiotr-mongoose-cpp/mongoose.c	209;"	d	file:
Main	external/vpiotr-mongoose-cpp/bindings/csharp/example.cs	/^	static void Main() {$/;"	m	class:Program	file:
MethodMap	external/vpiotr-mongoose-cpp/mongcpp.h	/^typedef std::map<std::string, MongooseRequestMethodCode> MethodMap;$/;"	t	namespace:mongoose
MethodMapGuard	external/vpiotr-mongoose-cpp/mongcpp.h	/^typedef std::auto_ptr<MethodMap> MethodMapGuard;$/;"	t	namespace:mongoose
Mongoose	external/vpiotr-mongoose-cpp/bindings/csharp/mongoose.cs	/^	public Mongoose() {$/;"	m	class:Mongoose
Mongoose	external/vpiotr-mongoose-cpp/bindings/csharp/mongoose.cs	/^public class Mongoose {$/;"	c
Mongoose	external/vpiotr-mongoose-cpp/bindings/python/mongoose.py	/^class Mongoose(object):$/;"	c
MongooseCallback	external/vpiotr-mongoose-cpp/bindings/csharp/mongoose.cs	/^public delegate void MongooseCallback(MongooseConnection conn, MongooseRequestInfo ri);$/;"	m
MongooseCallback2	external/vpiotr-mongoose-cpp/bindings/csharp/mongoose.cs	/^public delegate void MongooseCallback2(IntPtr conn, ref MongooseRequestInfo ri, IntPtr user_data);$/;"	m
MongooseConnection	external/vpiotr-mongoose-cpp/bindings/csharp/mongoose.cs	/^	public MongooseConnection(IntPtr conn_, Mongoose mongoose_) {$/;"	m	class:MongooseConnection
MongooseConnection	external/vpiotr-mongoose-cpp/bindings/csharp/mongoose.cs	/^public class MongooseConnection {$/;"	c
MongooseConnection	external/vpiotr-mongoose-cpp/mongcpp.cpp	/^MongooseConnection::MongooseConnection(struct mg_connection *conn): m_conn(conn)$/;"	f	class:MongooseConnection
MongooseConnection	external/vpiotr-mongoose-cpp/mongcpp.h	/^class MongooseConnection {$/;"	c	namespace:mongoose
MongooseHeader	external/vpiotr-mongoose-cpp/bindings/csharp/mongoose.cs	/^[StructLayout(LayoutKind.Sequential)] public struct MongooseHeader {$/;"	s
MongooseRequest	external/vpiotr-mongoose-cpp/mongcpp.cpp	/^MongooseRequest::MongooseRequest(struct mg_connection *conn, mg_request_info* info):$/;"	f	class:MongooseRequest
MongooseRequest	external/vpiotr-mongoose-cpp/mongcpp.h	/^class MongooseRequest {$/;"	c	namespace:mongoose
MongooseRequestInfo	external/vpiotr-mongoose-cpp/bindings/csharp/mongoose.cs	/^[StructLayout(LayoutKind.Sequential)] public struct MongooseRequestInfo {$/;"	s
MongooseRequestMethodCode	external/vpiotr-mongoose-cpp/mongcpp.h	/^enum MongooseRequestMethodCode {$/;"	g	namespace:mongoose
MongooseResponse	external/vpiotr-mongoose-cpp/mongcpp.cpp	/^MongooseResponse::MongooseResponse(struct mg_connection *conn): m_conn(conn)$/;"	f	class:MongooseResponse
MongooseResponse	external/vpiotr-mongoose-cpp/mongcpp.h	/^class MongooseResponse {$/;"	c	namespace:mongoose
MongooseServer	external/vpiotr-mongoose-cpp/mongcpp.cpp	/^MongooseServer::MongooseServer(): m_statusRunning(false), m_prepared(false), m_ctx(NULL)$/;"	f	class:MongooseServer
MongooseServer	external/vpiotr-mongoose-cpp/mongcpp.h	/^class MongooseServer {$/;"	c	namespace:mongoose
NEW_REQUEST	external/vpiotr-mongoose-cpp/bindings/python/mongoose.py	/^NEW_REQUEST = 0$/;"	v
NO_CGI	external/vpiotr-mongoose-cpp/mongoose.c	60;"	d	file:
NO_EDGES	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        NO_EDGES = 0, $/;"	e	enum:graphlab::edge_dir_type
NO_SOCKLEN_T	external/vpiotr-mongoose-cpp/mongoose.c	92;"	d	file:
NUM_OPTIONS	external/vpiotr-mongoose-cpp/mongoose.c	/^    NUM_OPTIONS$/;"	e	enum:__anon4	file:
NUM_THREADS	external/vpiotr-mongoose-cpp/mongoose.c	/^    DOCUMENT_ROOT, SSL_CERTIFICATE, NUM_THREADS, RUN_AS_USER,$/;"	e	enum:__anon4	file:
OUTPUTLEVEL	logger/logger.hpp	86;"	d
OUT_EDGES	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        OUT_EDGES = 2 , $/;"	e	enum:graphlab::edge_dir_type
O_BINARY	external/vpiotr-mongoose-cpp/mongoose.c	193;"	d	file:
O_NONBLOCK	external/vpiotr-mongoose-cpp/mongoose.c	97;"	d	file:
PASSWORDS_FILE_NAME	external/vpiotr-mongoose-cpp/mongoose.c	210;"	d	file:
PATH_MAX	external/vpiotr-mongoose-cpp/main.c	42;"	d	file:
PATH_MAX	external/vpiotr-mongoose-cpp/mongoose.c	51;"	d	file:
PCHECK	api/graphlab2_1_GAS_api/assertions.hpp	103;"	d
PROG	external/vpiotr-mongoose-cpp/Makefile	/^PROG=	mongoose$/;"	m
PROG	external/vpiotr-mongoose-cpp/examples/Makefile	/^PROG=	chat$/;"	m
PROTECT_URI	external/vpiotr-mongoose-cpp/mongoose.c	/^    PROTECT_URI, AUTHENTICATION_DOMAIN, SSI_EXTENSIONS, ACCESS_LOG_FILE,$/;"	e	enum:__anon4	file:
PUT_DELETE_PASSWORDS_FILE	external/vpiotr-mongoose-cpp/mongoose.c	/^    CGI_EXTENSIONS, CGI_ENVIRONMENT, PUT_DELETE_PASSWORDS_FILE, CGI_INTERPRETER,$/;"	e	enum:__anon4	file:
PairContainer	graphchi_types.hpp	/^        PairContainer() {$/;"	f	struct:graphchi::PairContainer
PairContainer	graphchi_types.hpp	/^        PairContainer(ET a, ET b) {$/;"	f	struct:graphchi::PairContainer
PairContainer	graphchi_types.hpp	/^    struct PairContainer {$/;"	s	namespace:graphchi
ProcPhase	preprocessing/sharder.hpp	/^    enum ProcPhase  { COMPUTE_INTERVALS=1, SHOVEL=2 };$/;"	g	namespace:graphchi
Program	external/vpiotr-mongoose-cpp/bindings/csharp/example.cs	/^public class Program {$/;"	c
Qa	external/vpiotr-mongoose-cpp/examples/html/jquery.js	/^(function(A,w){function ma(){if(!c.isReady){try{s.documentElement.doScroll("left")}catch(a){setTimeout(ma,1);return}c.ready()}}function Qa(a,b){b.src?c.ajax({url:b.src,async:false,dataType:"script"}):c.globalEval(b.text||b.textContent||b.innerHTML||"");b.parentNode&&b.parentNode.removeChild(b)}function X(a,b,d,f,e,j){var i=a.length;if(typeof b==="object"){for(var o in b)X(a,o,b[o],f,e,d);return a}if(d!==w){f=!j&&f&&c.isFunction(d);for(o=0;o<i;o++)e(a[o],b,f?d.call(a[o],o,e(a[o],b)):d,j);return a}return i?$/;"	f
RANDOMRESETPROB	tests/bulksync_functional_test.cpp	29;"	d	file:
RATE_DIFF	external/vpiotr-mongoose-cpp/mongoose.c	71;"	d	file:
READ	io/stripedio.hpp	/^    enum BLOCK_ACTION { READ, WRITE };$/;"	e	enum:graphchi::BLOCK_ACTION
REAL	metrics/metrics.hpp	/^  enum metrictype {REAL, INTEGER, TIME, STRING, VECTOR};$/;"	e	enum:graphchi::metrictype
RED	logger/logger.hpp	294;"	d
RESET	logger/logger.hpp	285;"	d
REVERSE	logger/logger.hpp	290;"	d
RTLD_LAZY	external/vpiotr-mongoose-cpp/mongoose.c	115;"	d	file:
RUN_AS_USER	external/vpiotr-mongoose-cpp/mongoose.c	/^    DOCUMENT_ROOT, SSL_CERTIFICATE, NUM_THREADS, RUN_AS_USER,$/;"	e	enum:__anon4	file:
RequestValueSet	external/vpiotr-mongoose-cpp/mongcpp.h	/^typedef std::map<std::string, std::string> RequestValueSet;$/;"	t	namespace:mongoose
ResponseValueIndex	external/vpiotr-mongoose-cpp/mongcpp.h	/^typedef std::map<std::string, int> ResponseValueIndex;$/;"	t	namespace:mongoose
ResponseValueList	external/vpiotr-mongoose-cpp/mongcpp.h	/^typedef std::vector< std::pair<std::string, std::string> > ResponseValueList;$/;"	t	namespace:mongoose
SESSION_TTL	external/vpiotr-mongoose-cpp/examples/chat.c	27;"	d	file:
SHARDER_BUFSIZE	preprocessing/sharder.hpp	72;"	d
SHOVEL	preprocessing/sharder.hpp	/^    enum ProcPhase  { COMPUTE_INTERVALS=1, SHOVEL=2 };$/;"	e	enum:graphchi::ProcPhase
SHUT_WR	external/vpiotr-mongoose-cpp/mongoose.c	105;"	d	file:
SIGKILL	external/vpiotr-mongoose-cpp/mongoose.c	1130;"	d	file:
SOCKET	external/vpiotr-mongoose-cpp/mongoose.c	/^typedef int SOCKET;$/;"	t	file:
SPINLOCK_SUPPORTED	util/pthread_tools.hpp	105;"	d
SPINLOCK_SUPPORTED	util/pthread_tools.hpp	109;"	d
SSI_EXTENSIONS	external/vpiotr-mongoose-cpp/mongoose.c	/^    PROTECT_URI, AUTHENTICATION_DOMAIN, SSI_EXTENSIONS, ACCESS_LOG_FILE,$/;"	e	enum:__anon4	file:
SSL	external/vpiotr-mongoose-cpp/mongoose.c	/^typedef struct ssl_st SSL;$/;"	t	typeref:struct:ssl_st	file:
SSL_CERTIFICATE	external/vpiotr-mongoose-cpp/mongoose.c	/^    DOCUMENT_ROOT, SSL_CERTIFICATE, NUM_THREADS, RUN_AS_USER,$/;"	e	enum:__anon4	file:
SSL_CHAIN_FILE	external/vpiotr-mongoose-cpp/mongoose.c	/^    SSL_CHAIN_FILE, ENABLE_DIRECTORY_LISTING, ERROR_LOG_FILE,$/;"	e	enum:__anon4	file:
SSL_CTX	external/vpiotr-mongoose-cpp/mongoose.c	/^typedef struct ssl_ctx_st SSL_CTX;$/;"	t	typeref:struct:ssl_ctx_st	file:
SSL_CTX_free	external/vpiotr-mongoose-cpp/mongoose.c	298;"	d	file:
SSL_CTX_new	external/vpiotr-mongoose-cpp/mongoose.c	289;"	d	file:
SSL_CTX_set_default_passwd_cb	external/vpiotr-mongoose-cpp/mongoose.c	296;"	d	file:
SSL_CTX_use_PrivateKey_file	external/vpiotr-mongoose-cpp/mongoose.c	292;"	d	file:
SSL_CTX_use_certificate_chain_file	external/vpiotr-mongoose-cpp/mongoose.c	300;"	d	file:
SSL_CTX_use_certificate_file	external/vpiotr-mongoose-cpp/mongoose.c	294;"	d	file:
SSL_ERROR_WANT_READ	external/vpiotr-mongoose-cpp/mongoose.c	246;"	d	file:
SSL_ERROR_WANT_WRITE	external/vpiotr-mongoose-cpp/mongoose.c	247;"	d	file:
SSL_FILETYPE_PEM	external/vpiotr-mongoose-cpp/mongoose.c	248;"	d	file:
SSL_LIB	external/vpiotr-mongoose-cpp/mongoose.c	181;"	d	file:
SSL_LIB	external/vpiotr-mongoose-cpp/mongoose.c	185;"	d	file:
SSL_LIB	external/vpiotr-mongoose-cpp/mongoose.c	93;"	d	file:
SSL_METHOD	external/vpiotr-mongoose-cpp/mongoose.c	/^typedef struct ssl_method_st SSL_METHOD;$/;"	t	typeref:struct:ssl_method_st	file:
SSL_accept	external/vpiotr-mongoose-cpp/mongoose.c	282;"	d	file:
SSL_connect	external/vpiotr-mongoose-cpp/mongoose.c	283;"	d	file:
SSL_free	external/vpiotr-mongoose-cpp/mongoose.c	281;"	d	file:
SSL_get_error	external/vpiotr-mongoose-cpp/mongoose.c	286;"	d	file:
SSL_library_init	external/vpiotr-mongoose-cpp/mongoose.c	291;"	d	file:
SSL_load_error_strings	external/vpiotr-mongoose-cpp/mongoose.c	299;"	d	file:
SSL_new	external/vpiotr-mongoose-cpp/mongoose.c	288;"	d	file:
SSL_read	external/vpiotr-mongoose-cpp/mongoose.c	284;"	d	file:
SSL_set_fd	external/vpiotr-mongoose-cpp/mongoose.c	287;"	d	file:
SSL_write	external/vpiotr-mongoose-cpp/mongoose.c	285;"	d	file:
SSLv23_server_method	external/vpiotr-mongoose-cpp/mongoose.c	290;"	d	file:
STR	external/vpiotr-mongoose-cpp/mongoose.c	81;"	d	file:
STRING	metrics/metrics.hpp	/^  enum metrictype {REAL, INTEGER, TIME, STRING, VECTOR};$/;"	e	enum:graphchi::metrictype
STRX	external/vpiotr-mongoose-cpp/mongoose.c	80;"	d	file:
SUPPORT_DELETIONS	tests/basic_dynamicengine_smoketest2.cpp	34;"	d	file:
SYNCHRONIZED_QUEUE_HPP	util/synchronized_queue.hpp	2;"	d
SYS2UNIX_TIME	external/vpiotr-mongoose-cpp/mongoose.c	73;"	d	file:
S_ISDIR	external/vpiotr-mongoose-cpp/main.c	43;"	d	file:
ServerHandlingEvent	external/vpiotr-mongoose-cpp/mongcpp.h	/^typedef enum mg_event ServerHandlingEvent;$/;"	t	namespace:mongoose	typeref:enum:mongoose::mg_event
ServerOptionList	external/vpiotr-mongoose-cpp/mongcpp.h	/^typedef std::vector<std::string> ServerOptionList;$/;"	t	namespace:mongoose
ServerOptionSet	external/vpiotr-mongoose-cpp/mongcpp.h	/^typedef std::map<std::string, std::string> ServerOptionSet;$/;"	t	namespace:mongoose
ServerOptionStorage	external/vpiotr-mongoose-cpp/mongcpp.h	/^typedef std::vector<const char *> ServerOptionStorage;$/;"	t	namespace:mongoose
ServiceMain	external/vpiotr-mongoose-cpp/main.c	/^static void WINAPI ServiceMain(void) {$/;"	f	file:
SmokeTestProgram	tests/basic_dynamicengine_smoketest.cpp	/^struct SmokeTestProgram : public GraphChiProgram<VertexDataType, EdgeDataType> {$/;"	s	file:
SmokeTestProgram	tests/basic_smoketest.cpp	/^struct SmokeTestProgram : public GraphChiProgram<VertexDataType, EdgeDataType> {$/;"	s	file:
SmokeTestProgram2	tests/basic_dynamicengine_smoketest2.cpp	/^struct SmokeTestProgram2 : public GraphChiProgram<VertexDataType, EdgeDataType> {$/;"	s	file:
SumCallback	api/vertex_aggregator.hpp	/^        SumCallback(SumType initval) : VCallback<VertexDataType>() {$/;"	f	class:graphchi::SumCallback
SumCallback	api/vertex_aggregator.hpp	/^    class SumCallback : public VCallback<VertexDataType> {$/;"	c	namespace:graphchi
TIME	metrics/metrics.hpp	/^  enum metrictype {REAL, INTEGER, TIME, STRING, VECTOR};$/;"	e	enum:graphchi::metrictype
TLS_RANDOM_SOURCE_KEY	api/graphlab2_1_GAS_api/random.cpp	/^            pthread_key_t TLS_RANDOM_SOURCE_KEY;$/;"	m	struct:graphlab::random::tls_key_creator	file:
TestMongoServer	external/vpiotr-mongoose-cpp/test/mongotest.cpp	/^    TestMongoServer(): MongooseServer() {}$/;"	f	class:TestMongoServer
TestMongoServer	external/vpiotr-mongoose-cpp/test/mongotest.cpp	/^class TestMongoServer: public MongooseServer {$/;"	c	file:
TrayIcon	external/vpiotr-mongoose-cpp/main.c	/^static NOTIFYICONDATA TrayIcon;$/;"	v	file:
UNDERLINE	logger/logger.hpp	288;"	d
UriDumpInfo	external/vpiotr-mongoose-cpp/bindings/csharp/example.cs	/^    static private void UriDumpInfo(MongooseConnection conn, MongooseRequestInfo ri)$/;"	m	class:Program	file:
UriHandler	external/vpiotr-mongoose-cpp/bindings/csharp/example.cs	/^	static private void UriHandler(MongooseConnection conn, MongooseRequestInfo ri) {$/;"	m	class:Program	file:
VARIABLE_IS_NOT_USED	api/chifilenames.hpp	56;"	d
VARIABLE_IS_NOT_USED	api/graph_objects.hpp	48;"	d
VARIABLE_IS_NOT_USED	preprocessing/conversions.hpp	51;"	d
VARIABLE_IS_NOT_USED	preprocessing/conversions.hpp	53;"	d
VARIABLE_IS_NOT_USED	util/cmdopts.hpp	45;"	d
VC	external/vpiotr-mongoose-cpp/Makefile	/^VC=	z:$/;"	m
VCallback	api/vertex_aggregator.hpp	/^    class VCallback {$/;"	c	namespace:graphchi
VECTOR	metrics/metrics.hpp	/^  enum metrictype {REAL, INTEGER, TIME, STRING, VECTOR};$/;"	e	enum:graphchi::metrictype
VT	api/functional/functional_bulksync.hpp	/^        typedef typename KERNEL::VertexDataType VT;$/;"	t	class:graphchi::functional_vertex_unweighted_bulksync
VT	api/functional/functional_semisync.hpp	/^    typedef typename KERNEL::VertexDataType VT;$/;"	t	class:graphchi::functional_vertex_unweighted_semisync
VertexDataChecker	tests/basic_dynamicengine_smoketest.cpp	/^    VertexDataChecker(int iters) : iters(iters), total(0) {}$/;"	f	class:VertexDataChecker
VertexDataChecker	tests/basic_dynamicengine_smoketest.cpp	/^class VertexDataChecker : public VCallback<VertexDataType> {$/;"	c	file:
VertexDataChecker	tests/basic_dynamicengine_smoketest2.cpp	/^    VertexDataChecker(int iters) : iters(iters), total(0) {}$/;"	f	class:VertexDataChecker
VertexDataChecker	tests/basic_dynamicengine_smoketest2.cpp	/^class VertexDataChecker : public VCallback<VertexDataType> {$/;"	c	file:
VertexDataChecker	tests/basic_smoketest.cpp	/^    VertexDataChecker(int iters) : iters(iters), total(0) {}$/;"	f	class:VertexDataChecker
VertexDataChecker	tests/basic_smoketest.cpp	/^class VertexDataChecker : public VCallback<VertexDataType> {$/;"	c	file:
VertexDataChecker	tests/dynamicdata_smoketest.cpp	/^    VertexDataChecker(int iters) : iters(iters), total(0) {}$/;"	f	class:VertexDataChecker
VertexDataChecker	tests/dynamicdata_smoketest.cpp	/^class VertexDataChecker : public VCallback<VertexDataType> {$/;"	c	file:
VertexDataType	api/functional/functional_api.hpp	/^        typedef FVertexDataType VertexDataType;$/;"	t	struct:graphchi::functional_kernel
VertexDataType	api/functional/functional_bulksync.hpp	/^        typedef typename KERNEL::VertexDataType VertexDataType;$/;"	t	class:graphchi::FunctionalProgramProxyBulkSync
VertexDataType	api/functional/functional_semisync.hpp	/^    typedef typename KERNEL::VertexDataType VertexDataType;$/;"	t	class:graphchi::FunctionalProgramProxySemisync
VertexDataType	api/graphchi_program.hpp	/^        typedef VertexDataType_ VertexDataType;$/;"	t	class:graphchi::GraphChiProgram
VertexDataType	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        typedef bool VertexDataType;  \/* Temporary hack: as the vertices are stored in memory, no need to store on disk. *\/$/;"	t	struct:graphlab::GraphLabEdgeAggregatorWrapper
VertexDataType	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        typedef bool VertexDataType;  \/* Temporary hack: as the vertices are stored in memory, no need to store on disk. *\/$/;"	t	struct:graphlab::GraphLabWrapper
VertexDataType	tests/basic_dynamicengine_smoketest.cpp	/^typedef vid_t VertexDataType;$/;"	t	file:
VertexDataType	tests/basic_dynamicengine_smoketest2.cpp	/^typedef vid_t VertexDataType;$/;"	t	file:
VertexDataType	tests/basic_smoketest.cpp	/^typedef vid_t VertexDataType;$/;"	t	file:
VertexDataType	tests/dynamicdata_smoketest.cpp	/^typedef vid_t VertexDataType;$/;"	t	file:
VertexDataType	tests/test_dynamicedata_loader.cpp	/^typedef chivector<size_t> VertexDataType;$/;"	t	file:
VertexType	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        typedef graphchi_vertex<bool, EdgeDataType> VertexType; \/\/ Confusing!$/;"	t	struct:graphlab::GraphLabVertexWrapper
VertexType	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        typedef graphchi_vertex<bool, EdgeDataType> VertexType;$/;"	t	struct:graphlab::GraphLabEdgeWrapper
VertexValidator	tests/test_dynamicedata_loader.cpp	/^class VertexValidator : public VCallback<chivector<size_t> > {$/;"	c	file:
WHITE	logger/logger.hpp	300;"	d
WINCDECL	external/vpiotr-mongoose-cpp/main.c	48;"	d	file:
WINCDECL	external/vpiotr-mongoose-cpp/main.c	53;"	d	file:
WINCDECL	external/vpiotr-mongoose-cpp/mongoose.c	104;"	d	file:
WINCDECL	external/vpiotr-mongoose-cpp/mongoose.c	203;"	d	file:
WRITE	io/stripedio.hpp	/^    enum BLOCK_ACTION { READ, WRITE };$/;"	e	enum:graphchi::BLOCK_ACTION
WRITE_TO_STDERR	api/graphlab2_1_GAS_api/assertions.hpp	84;"	d
WinMain	external/vpiotr-mongoose-cpp/main.c	/^int WINAPI WinMain(HINSTANCE hInst, HINSTANCE hPrev, LPSTR cmdline, int show) {$/;"	f
WindowProc	external/vpiotr-mongoose-cpp/main.c	/^static LRESULT CALLBACK WindowProc(HWND hWnd, UINT msg, WPARAM wParam,$/;"	f	file:
X	external/vpiotr-mongoose-cpp/examples/html/jquery.js	/^(function(A,w){function ma(){if(!c.isReady){try{s.documentElement.doScroll("left")}catch(a){setTimeout(ma,1);return}c.ready()}}function Qa(a,b){b.src?c.ajax({url:b.src,async:false,dataType:"script"}):c.globalEval(b.text||b.textContent||b.innerHTML||"");b.parentNode&&b.parentNode.removeChild(b)}function X(a,b,d,f,e,j){var i=a.length;if(typeof b==="object"){for(var o in b)X(a,o,b[o],f,e,d);return a}if(d!==w){f=!j&&f&&c.isFunction(d);for(o=0;o<i;o++)e(a[o],b,f?d.call(a[o],o,e(a[o],b)):d,j);return a}return i?$/;"	f
Y	external/vpiotr-mongoose-cpp/examples/html/jquery.js	/^e(a[0],b):w}function J(){return(new Date).getTime()}function Y(){return false}function Z(){return true}function na(a,b,d){d[0].type=a;return c.event.handle.apply(b,d)}function oa(a){var b,d=[],f=[],e=arguments,j,i,o,k,n,r;i=c.data(this,"events");if(!(a.liveFired===this||!i||!i.live||a.button&&a.type==="click")){a.liveFired=this;var u=i.live.slice(0);for(k=0;k<u.length;k++){i=u[k];i.origType.replace(O,"")===a.type?f.push(i.selector):u.splice(k--,1)}j=c(a.target).closest(f,a.currentTarget);n=0;for(r=$/;"	f
YELLOW	logger/logger.hpp	296;"	d
Z	external/vpiotr-mongoose-cpp/examples/html/jquery.js	/^e(a[0],b):w}function J(){return(new Date).getTime()}function Y(){return false}function Z(){return true}function na(a,b,d){d[0].type=a;return c.event.handle.apply(b,d)}function oa(a){var b,d=[],f=[],e=arguments,j,i,o,k,n,r;i=c.data(this,"events");if(!(a.liveFired===this||!i||!i.live||a.button&&a.type==="click")){a.liveFired=this;var u=i.live.slice(0);for(k=0;k<u.length;k++){i=u[k];i.origType.replace(O,"")===a.type?f.push(i.selector):u.splice(k--,1)}j=c(a.target).closest(f,a.currentTarget);n=0;for(r=$/;"	f
_ASSERTIONS_H_	api/graphlab2_1_GAS_api/assertions.hpp	59;"	d
_CRT_SECURE_NO_WARNINGS	external/vpiotr-mongoose-cpp/main.c	22;"	d	file:
_CRT_SECURE_NO_WARNINGS	external/vpiotr-mongoose-cpp/mongoose.c	22;"	d	file:
_FIXLINE	util/configfile.hpp	/^    static void _FIXLINE(char * s) {$/;"	f	namespace:graphchi
_LARGEFILE_SOURCE	external/vpiotr-mongoose-cpp/mongoose.c	25;"	d	file:
_MONGCPP_H__	external/vpiotr-mongoose-cpp/mongcpp.h	13;"	d
_POSIX_	external/vpiotr-mongoose-cpp/mongoose.c	101;"	d	file:
_POSIX_SPIN_LOCKS	util/pthread_tools.hpp	18;"	d
_POSIX_SPIN_LOCKS	util/pthread_tools.hpp	19;"	d
_S_RADIX_INCLUDED	util/radixSort.hpp	24;"	d
_WIN32_WINNT	external/vpiotr-mongoose-cpp/mongoose.c	47;"	d	file:
_XOPEN_SOURCE	external/vpiotr-mongoose-cpp/main.c	24;"	d	file:
_XOPEN_SOURCE	external/vpiotr-mongoose-cpp/mongoose.c	24;"	d	file:
__del__	external/vpiotr-mongoose-cpp/bindings/python/mongoose.py	/^    def __del__(self):$/;"	m	class:Mongoose	file:
__func__	external/vpiotr-mongoose-cpp/mongoose.c	82;"	d	file:
__func__	external/vpiotr-mongoose-cpp/mongoose.c	86;"	d	file:
__graphchi_xcode__graphgenerators__	util/graphgenerators.h	10;"	d
__init__	external/vpiotr-mongoose-cpp/bindings/python/mongoose.py	/^    def __init__(self, callback, **kwargs):$/;"	m	class:Mongoose
__init__	external/vpiotr-mongoose-cpp/bindings/python/mongoose.py	/^    def __init__(self, mongoose, connection):$/;"	m	class:Connection
__print_back_trace	api/graphlab2_1_GAS_api/assertions.hpp	/^static void __print_back_trace() {$/;"	f
_argc	util/cmdopts.hpp	/^    static int _argc;$/;"	m	namespace:graphchi
_argv	util/cmdopts.hpp	/^    static char **_argv;$/;"	m	namespace:graphchi
_cmd_configured	util/cmdopts.hpp	/^    static bool _cmd_configured = false;$/;"	m	namespace:graphchi
_f	util/radixSort.hpp	/^         intT _mask;  intT _offset; F _f; $/;"	m	struct:graphchi::eBits
_fields_	external/vpiotr-mongoose-cpp/bindings/python/mongoose.py	/^    _fields_ = [$/;"	v	class:mg_header
_fields_	external/vpiotr-mongoose-cpp/bindings/python/mongoose.py	/^    _fields_ = [$/;"	v	class:mg_request_info
_load_vertex_intervals	engine/graphchi_engine.hpp	/^        virtual void _load_vertex_intervals() {$/;"	f	class:graphchi::graphchi_engine
_log	logger/logger.hpp	/^    void _log(int lineloglevel,const char* file,const char* function,$/;"	f	class:file_logger
_logbuf	logger/logger.hpp	/^    void _logbuf(int lineloglevel,const char* file,const char* function,$/;"	f	class:file_logger
_lograw	logger/logger.hpp	/^    void _lograw(int lineloglevel, const char* buf, int len) {$/;"	f	class:file_logger
_mask	util/radixSort.hpp	/^         intT _mask;  intT _offset; F _f; $/;"	m	struct:graphchi::eBits
_offset	util/radixSort.hpp	/^         intT _mask;  intT _offset; F _f; $/;"	m	struct:graphchi::eBits
_output_edge	output/output.hpp	/^        void _output_edge(vid_t from, vid_t to, T val) {$/;"	f	class:graphchi::basic_text_output
_queue	util/synchronized_queue.hpp	/^            std::queue<T> _queue;$/;"	m	class:graphchi::synchronized_queue
_queuelock	util/synchronized_queue.hpp	/^            spinlock _queuelock;$/;"	m	class:graphchi::synchronized_queue
accept_new_connection	external/vpiotr-mongoose-cpp/mongoose.c	/^static void accept_new_connection(const struct socket *listener,$/;"	f	file:
accounted_for_inc	engine/dynamic_graphs/edgebuffers.hpp	/^        bool accounted_for_inc;$/;"	m	struct:graphchi::created_edge
accounted_for_outc	engine/dynamic_graphs/edgebuffers.hpp	/^        bool accounted_for_outc;$/;"	m	struct:graphchi::created_edge
accum	api/vertex_aggregator.hpp	/^        SumType accum;$/;"	m	class:graphchi::SumCallback
action	io/stripedio.hpp	/^        BLOCK_ACTION action;$/;"	m	struct:graphchi::iotask
active	shards/dynamicdata/slidingshard.hpp	/^        bool active;$/;"	m	struct:graphchi::sblock
active	shards/slidingshard.hpp	/^        bool active;$/;"	m	struct:graphchi::sblock
activeblocks	shards/dynamicdata/slidingshard.hpp	/^        std::vector<sblock<ET> > activeblocks;$/;"	m	class:graphchi::sliding_shard
activeblocks	shards/slidingshard.hpp	/^        std::vector<sblock> activeblocks;$/;"	m	class:graphchi::sliding_shard
add	api/dynamicdata/chivector.hpp	/^    void add(T val) {$/;"	f	class:graphchi::chivector
add	engine/dynamic_graphs/edgebuffers.hpp	/^        void add(created_edge<ET> cedge) {$/;"	f	class:graphchi::edge_buffer_flat
add	engine/dynamic_graphs/edgebuffers.hpp	/^        void add(vid_t src, vid_t dst, ET data) {$/;"	f	class:graphchi::edge_buffer_flat
add	metrics/metrics.hpp	/^    inline void add(double x) {$/;"	f	struct:graphchi::metrics_entry
add	metrics/metrics.hpp	/^    inline void add(std::string key, double value, metrictype type = REAL) {$/;"	f	class:graphchi::metrics
add	preprocessing/sharder.hpp	/^        virtual void add(edge_with_value<EdgeDataType> val) {$/;"	f	class:graphchi::sharder
addContent	external/vpiotr-mongoose-cpp/mongcpp.cpp	/^void MongooseResponse::addContent(const std::string &text, bool addLen)$/;"	f	class:MongooseResponse
addHeader	external/vpiotr-mongoose-cpp/mongcpp.cpp	/^void MongooseResponse::addHeader()$/;"	f	class:MongooseResponse
addHeaderValue	external/vpiotr-mongoose-cpp/mongcpp.cpp	/^void MongooseResponse::addHeaderValue(const std::string &name, const std::string &value)$/;"	f	class:MongooseResponse
addHeaderValueToText	external/vpiotr-mongoose-cpp/mongcpp.cpp	/^void MongooseResponse::addHeaderValueToText(const std::string &name, const std::string &value)$/;"	f	class:MongooseResponse
addText	external/vpiotr-mongoose-cpp/mongcpp.cpp	/^void MongooseResponse::addText(const std::string &text)$/;"	f	class:MongooseResponse
addTextLine	external/vpiotr-mongoose-cpp/mongcpp.cpp	/^void MongooseResponse::addTextLine(const std::string &text)$/;"	f	class:MongooseResponse
add_edge	engine/dynamic_graphs/graphchi_dynamicgraph_engine.hpp	/^        bool add_edge(vid_t src, vid_t dst, EdgeDataType edata) {$/;"	f	class:graphchi::graphchi_dynamicgraph_engine
add_inedge	api/functional/functional_bulksync.hpp	/^        inline void add_inedge(vid_t src, ET * ptr, bool special_edge) {$/;"	f	class:graphchi::functional_vertex_unweighted_bulksync
add_inedge	api/functional/functional_semisync.hpp	/^    inline void add_inedge(vid_t src, ET * ptr, bool special_edge) {$/;"	f	class:graphchi::functional_vertex_unweighted_semisync
add_inedge	api/graph_objects.hpp	/^        inline void add_inedge(vid_t src, EdgeDataType * ptr, bool special_edge) {$/;"	f	class:graphchi::internal_graphchi_vertex
add_inedge	preprocessing/util/orderbydegree.hpp	/^        void add_inedge(vid_t src, ET * ptr, bool special_edge) {$/;"	f	class:graphchi::special_sharding_vertex
add_outedge	api/functional/functional_bulksync.hpp	/^        inline void add_outedge(vid_t dst, ET * ptr, bool special_edge) {$/;"	f	class:graphchi::functional_vertex_unweighted_bulksync
add_outedge	api/functional/functional_semisync.hpp	/^    inline void add_outedge(vid_t dst, ET * ptr, bool special_edge) {$/;"	f	class:graphchi::functional_vertex_unweighted_semisync
add_outedge	api/graph_objects.hpp	/^        inline void add_outedge(vid_t dst, EdgeDataType * ptr, bool special_edge) {$/;"	f	class:graphchi::internal_graphchi_vertex
add_outedge	preprocessing/util/orderbydegree.hpp	/^        void add_outedge(vid_t dst, ET * ptr, bool special_edge) {$/;"	f	class:graphchi::special_sharding_vertex
add_output	engine/graphchi_engine.hpp	/^        size_t add_output(ioutput<VertexDataType, EdgeDataType> * output) {$/;"	f	class:graphchi::graphchi_engine
add_task	api/ischeduler.hpp	/^        virtual void add_task(vid_t vid, bool also_this_iteration=false) {$/;"	f	class:graphchi::non_scheduler
add_task	engine/bitset_scheduler.hpp	/^        inline void add_task(vid_t vertex, bool also_this_iteration=false) {$/;"	f	class:graphchi::bitset_scheduler
add_task	engine/dynamic_graphs/graphchi_dynamicgraph_engine.hpp	/^        void add_task(vid_t vid) {$/;"	f	class:graphchi::graphchi_dynamicgraph_engine
add_task_to_all	api/ischeduler.hpp	/^        virtual void add_task_to_all() { }$/;"	f	class:graphchi::non_scheduler
add_task_to_all	engine/bitset_scheduler.hpp	/^        void add_task_to_all() {$/;"	f	class:graphchi::bitset_scheduler
add_to_set	external/vpiotr-mongoose-cpp/mongoose.c	/^static void add_to_set(SOCKET fd, fd_set *set, int *max_fd) {$/;"	f	file:
add_to_vector	metrics/metrics.hpp	/^    inline void add_to_vector(std::string key, double value) {$/;"	f	class:graphchi::metrics
add_vector_entry	metrics/metrics.hpp	/^    inline void add_vector_entry(size_t i, double x) {$/;"	f	struct:graphchi::metrics_entry
add_vector_entry	metrics/metrics.hpp	/^    inline void add_vector_entry(std::string key, size_t idx, double value) {$/;"	f	class:graphchi::metrics
added_edges	engine/dynamic_graphs/graphchi_dynamicgraph_engine.hpp	/^        size_t added_edges;$/;"	m	class:graphchi::graphchi_dynamicgraph_engine
addenv	external/vpiotr-mongoose-cpp/mongoose.c	/^static char *addenv(struct cgi_env_block *block, const char *fmt, ...) {$/;"	f	file:
addval	httpadmin/plotter.hpp	/^    void addval(ENGINE * engine, std::string plotname, double val) {$/;"	f	namespace:graphchi
adj	metrics/metrics.hpp	/^    inline void adj(double v) {$/;"	f	struct:graphchi::metrics_entry
adj_session	shards/dynamicdata/memoryshard.hpp	/^        int adj_session;$/;"	m	class:graphchi::memory_shard
adj_session	shards/memoryshard.hpp	/^        int adj_session;$/;"	m	class:graphchi::memory_shard
adjdata	shards/dynamicdata/memoryshard.hpp	/^        uint8_t * adjdata;$/;"	m	class:graphchi::memory_shard
adjdata	shards/memoryshard.hpp	/^        uint8_t * adjdata;$/;"	m	class:graphchi::memory_shard
adjfile_session	shards/dynamicdata/slidingshard.hpp	/^        int adjfile_session;$/;"	m	class:graphchi::sliding_shard
adjfile_session	shards/slidingshard.hpp	/^        int adjfile_session;$/;"	m	class:graphchi::sliding_shard
adjfilesize	shards/dynamicdata/memoryshard.hpp	/^        size_t adjfilesize;$/;"	m	class:graphchi::memory_shard
adjfilesize	shards/dynamicdata/slidingshard.hpp	/^        size_t adjoffset, edataoffset, adjfilesize, edatafilesize;$/;"	m	class:graphchi::sliding_shard
adjfilesize	shards/memoryshard.hpp	/^        size_t adjfilesize;$/;"	m	class:graphchi::memory_shard
adjfilesize	shards/slidingshard.hpp	/^        size_t adjoffset, edataoffset, adjfilesize, edatafilesize;$/;"	m	class:graphchi::sliding_shard
adjoffset	shards/dynamicdata/slidingshard.hpp	/^        size_t adjoffset, edataoffset, adjfilesize, edatafilesize;$/;"	m	class:graphchi::sliding_shard
adjoffset	shards/dynamicdata/slidingshard.hpp	/^        size_t adjoffset, edataoffset;$/;"	m	struct:graphchi::indexentry
adjoffset	shards/slidingshard.hpp	/^        size_t adjoffset, edataoffset, adjfilesize, edatafilesize;$/;"	m	class:graphchi::sliding_shard
adjoffset	shards/slidingshard.hpp	/^        size_t adjoffset, edataoffset;$/;"	m	struct:graphchi::indexentry
adjust_degrees_for_deleted	engine/dynamic_graphs/graphchi_dynamicgraph_engine.hpp	/^        void adjust_degrees_for_deleted(std::vector< svertex_t > &vertices, vid_t window_st) {$/;"	f	class:graphchi::graphchi_dynamicgraph_engine
after_exec_interval	api/graphchi_program.hpp	/^        virtual void after_exec_interval(vid_t window_st, vid_t window_en, graphchi_context &gcontext) {        $/;"	f	class:graphchi::GraphChiProgram
after_exec_interval	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        virtual void after_exec_interval(vid_t window_st, vid_t window_en, graphchi_context &gcontext) {        $/;"	f	struct:graphlab::GraphLabEdgeAggregatorWrapper
after_exec_interval	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        virtual void after_exec_interval(vid_t window_st, vid_t window_en, graphchi_context &gcontext) {        $/;"	f	struct:graphlab::GraphLabWrapper
after_exec_interval	tests/basic_dynamicengine_smoketest.cpp	/^    void after_exec_interval(vid_t window_st, vid_t window_en, graphchi_context &gcontext) {        $/;"	f	struct:SmokeTestProgram
after_exec_interval	tests/basic_dynamicengine_smoketest2.cpp	/^    void after_exec_interval(vid_t window_st, vid_t window_en, graphchi_context &gcontext) {        $/;"	f	struct:SmokeTestProgram2
after_exec_interval	tests/basic_smoketest.cpp	/^    void after_exec_interval(vid_t window_st, vid_t window_en, graphchi_context &gcontext) {        $/;"	f	struct:SmokeTestProgram
after_exec_interval	tests/dynamicdata_smoketest.cpp	/^    void after_exec_interval(vid_t window_st, vid_t window_en, graphchi_context &gcontext) {$/;"	f	struct:DynamicDataSmokeTestProgram
after_exec_interval	tests/test_dynamicedata_loader.cpp	/^    void after_exec_interval(vid_t window_st, vid_t window_en, graphchi_context &gcontext) {$/;"	f	struct:DynamicDataLoaderTestProgram
after_iteration	api/functional/functional_bulksync.hpp	/^        void after_iteration(int iteration, graphchi_context &ginfo) {$/;"	f	class:graphchi::FunctionalProgramProxyBulkSync
after_iteration	api/functional/functional_semisync.hpp	/^    void after_iteration(int iteration, graphchi_context &ginfo) {$/;"	f	class:graphchi::FunctionalProgramProxySemisync
after_iteration	api/graphchi_program.hpp	/^        virtual void after_iteration(int iteration, graphchi_context &gcontext) {$/;"	f	class:graphchi::GraphChiProgram
after_iteration	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        virtual void after_iteration(int iteration, graphchi_context &gcontext) {$/;"	f	struct:graphlab::GraphLabEdgeAggregatorWrapper
after_iteration	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        virtual void after_iteration(int iteration, graphchi_context &gcontext) {$/;"	f	struct:graphlab::GraphLabWrapper
after_iteration	tests/basic_dynamicengine_smoketest.cpp	/^    void after_iteration(int iteration, graphchi_context &gcontext) {$/;"	f	struct:SmokeTestProgram
after_iteration	tests/basic_dynamicengine_smoketest2.cpp	/^    void after_iteration(int iteration, graphchi_context &gcontext) {$/;"	f	struct:SmokeTestProgram2
after_iteration	tests/basic_smoketest.cpp	/^    void after_iteration(int iteration, graphchi_context &gcontext) {$/;"	f	struct:SmokeTestProgram
after_iteration	tests/dynamicdata_smoketest.cpp	/^    void after_iteration(int iteration, graphchi_context &gcontext) {$/;"	f	struct:DynamicDataSmokeTestProgram
after_iteration	tests/test_dynamicedata_loader.cpp	/^    void after_iteration(int iteration, graphchi_context &gcontext) {$/;"	f	struct:DynamicDataLoaderTestProgram
aggr	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        ReductionType aggr;$/;"	m	struct:graphlab::GraphLabEdgeAggregatorWrapper
ah	external/vpiotr-mongoose-cpp/mongoose.h	/^  struct mg_auth_header *ah; \/\/ Parsed Authorization header, if present$/;"	m	struct:mg_request_info	typeref:struct:mg_request_info::mg_auth_header
ajax_get_messages	external/vpiotr-mongoose-cpp/examples/chat.c	/^static void ajax_get_messages(struct mg_connection *conn,$/;"	f	file:
ajax_reply_start	external/vpiotr-mongoose-cpp/examples/chat.c	/^static const char *ajax_reply_start =$/;"	v	file:
ajax_reply_start	httpadmin/chi_httpadmin.hpp	/^    static const char *ajax_reply_start =$/;"	m	namespace:graphchi
ajax_send_message	external/vpiotr-mongoose-cpp/examples/chat.c	/^static void ajax_send_message(struct mg_connection *conn,$/;"	f	file:
ajax_send_message	httpadmin/chi_httpadmin.hpp	/^    static void ajax_send_message(struct mg_connection *conn,$/;"	f	namespace:graphchi
analyze_labels	util/labelanalysis.hpp	/^void analyze_labels(std::string basefilename, int printtop = 20) {    $/;"	f
array	util/dense_bitset.hpp	/^        size_t* array;$/;"	m	class:graphchi::dense_bitset
arrlen	util/dense_bitset.hpp	/^        size_t arrlen;$/;"	m	class:graphchi::dense_bitset
async_edata_loading	shards/dynamicdata/slidingshard.hpp	/^        bool async_edata_loading;$/;"	m	class:graphchi::sliding_shard
async_edata_loading	shards/memoryshard.hpp	/^        bool async_edata_loading;$/;"	m	class:graphchi::memory_shard
async_edata_loading	shards/slidingshard.hpp	/^        bool async_edata_loading;$/;"	m	class:graphchi::sliding_shard
atomic	util/atomic.hpp	/^        atomic(const T& value = 0) : value(value) { }$/;"	f	class:graphchi::atomic
atomic	util/atomic.hpp	/^    class atomic{$/;"	c	namespace:graphchi
atomic_compare_and_swap	util/atomic.hpp	/^    bool atomic_compare_and_swap(T& a, const T &oldval, const T &newval) {$/;"	f	namespace:graphchi
atomic_compare_and_swap	util/atomic.hpp	/^    inline bool atomic_compare_and_swap(double& a, const double &oldval, const double &newval) {$/;"	f	namespace:graphchi
atomic_compare_and_swap	util/atomic.hpp	/^    inline bool atomic_compare_and_swap(float& a, const float &oldval, const float &newval) {$/;"	f	namespace:graphchi
atomic_exchange	util/atomic.hpp	/^    void atomic_exchange(T& a, T& b) {$/;"	f	namespace:graphchi
atomic_inc	util/pthread_tools.hpp	183;"	d
atomic_inc	util/pthread_tools.hpp	248;"	d
atomic_xadd	util/pthread_tools.hpp	181;"	d
atomic_xadd	util/pthread_tools.hpp	246;"	d
auth_header	external/vpiotr-mongoose-cpp/mongoose.c	/^    char *auth_header;          \/\/ Buffer for the Authorization header (request_info.ah points into it).$/;"	m	struct:mg_connection	file:
authorize	external/vpiotr-mongoose-cpp/examples/chat.c	/^static void authorize(struct mg_connection *conn,$/;"	f	file:
authorize_from_file	external/vpiotr-mongoose-cpp/mongoose.c	/^static int authorize_from_file(struct mg_connection *conn, FILE *fp) {$/;"	f	file:
authorize_url	external/vpiotr-mongoose-cpp/examples/chat.c	/^static const char *authorize_url = "\/authorize";$/;"	v	file:
bIndexT	util/radixSort.hpp	/^    typedef unsigned char bIndexT;$/;"	t	namespace:graphchi
barrier	util/pthread_tools.hpp	/^        barrier(size_t numthreads) { pthread_barrier_init(&m_barrier, NULL, numthreads); }$/;"	f	class:graphchi::barrier
barrier	util/pthread_tools.hpp	/^        barrier(size_t numthreads) {$/;"	f	class:graphchi::barrier
barrier	util/pthread_tools.hpp	/^    class barrier {$/;"	c	namespace:graphchi
base_engine	engine/dynamic_graphs/graphchi_dynamicgraph_engine.hpp	/^        typedef graphchi_engine<VertexDataType, EdgeDataType>  base_engine;$/;"	t	class:graphchi::graphchi_dynamicgraph_engine
base_filename	engine/auxdata/degree_data.hpp	/^        std::string base_filename;$/;"	m	class:graphchi::degree_data
base_filename	engine/graphchi_engine.hpp	/^        std::string base_filename;$/;"	m	class:graphchi::graphchi_engine
basefilename	preprocessing/sharder.hpp	/^        std::string basefilename;$/;"	m	class:graphchi::sharder
basic_reporter	metrics/reps/basic_reporter.hpp	/^  class basic_reporter : public imetrics_reporter {$/;"	c	namespace:graphchi
basic_text_output	output/output.hpp	/^        basic_text_output(std::string filename, std::string delimiter="\\t") : strm(filename.c_str(),std::ofstream::out), $/;"	f	class:graphchi::basic_text_output
basic_text_output	output/output.hpp	/^    class basic_text_output : public ioutput<VT, ET> {$/;"	c	namespace:graphchi
before_exec_interval	api/functional/functional_bulksync.hpp	/^        void before_exec_interval(vid_t window_st, vid_t window_en, graphchi_context &ginfo) {        $/;"	f	class:graphchi::FunctionalProgramProxyBulkSync
before_exec_interval	api/functional/functional_semisync.hpp	/^    void before_exec_interval(vid_t window_st, vid_t window_en, graphchi_context &ginfo) {        $/;"	f	class:graphchi::FunctionalProgramProxySemisync
before_exec_interval	api/graphchi_program.hpp	/^        virtual void before_exec_interval(vid_t window_st, vid_t window_en, graphchi_context &gcontext) {        $/;"	f	class:graphchi::GraphChiProgram
before_exec_interval	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        virtual void before_exec_interval(vid_t window_st, vid_t window_en, graphchi_context &gcontext) {        $/;"	f	struct:graphlab::GraphLabEdgeAggregatorWrapper
before_exec_interval	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        virtual void before_exec_interval(vid_t window_st, vid_t window_en, graphchi_context &gcontext) {        $/;"	f	struct:graphlab::GraphLabWrapper
before_exec_interval	tests/basic_dynamicengine_smoketest.cpp	/^    void before_exec_interval(vid_t window_st, vid_t window_en, graphchi_context &gcontext) {        $/;"	f	struct:SmokeTestProgram
before_exec_interval	tests/basic_dynamicengine_smoketest2.cpp	/^    void before_exec_interval(vid_t window_st, vid_t window_en, graphchi_context &gcontext) {        $/;"	f	struct:SmokeTestProgram2
before_exec_interval	tests/basic_smoketest.cpp	/^    void before_exec_interval(vid_t window_st, vid_t window_en, graphchi_context &gcontext) {        $/;"	f	struct:SmokeTestProgram
before_exec_interval	tests/dynamicdata_smoketest.cpp	/^    void before_exec_interval(vid_t window_st, vid_t window_en, graphchi_context &gcontext) {$/;"	f	struct:DynamicDataSmokeTestProgram
before_exec_interval	tests/test_dynamicedata_loader.cpp	/^    void before_exec_interval(vid_t window_st, vid_t window_en, graphchi_context &gcontext) {$/;"	f	struct:DynamicDataLoaderTestProgram
before_iteration	api/functional/functional_bulksync.hpp	/^        void before_iteration(int iteration, graphchi_context &info) {$/;"	f	class:graphchi::FunctionalProgramProxyBulkSync
before_iteration	api/functional/functional_semisync.hpp	/^    void before_iteration(int iteration, graphchi_context &info) {$/;"	f	class:graphchi::FunctionalProgramProxySemisync
before_iteration	api/graphchi_program.hpp	/^        virtual void before_iteration(int iteration, graphchi_context &gcontext) {$/;"	f	class:graphchi::GraphChiProgram
before_iteration	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        virtual void before_iteration(int iteration, graphchi_context &gcontext) {$/;"	f	struct:graphlab::GraphLabEdgeAggregatorWrapper
before_iteration	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        virtual void before_iteration(int iteration, graphchi_context &gcontext) {$/;"	f	struct:graphlab::GraphLabWrapper
before_iteration	tests/basic_dynamicengine_smoketest.cpp	/^    void before_iteration(int iteration, graphchi_context &gcontext) {$/;"	f	struct:SmokeTestProgram
before_iteration	tests/basic_dynamicengine_smoketest2.cpp	/^    void before_iteration(int iteration, graphchi_context &gcontext) {$/;"	f	struct:SmokeTestProgram2
before_iteration	tests/basic_smoketest.cpp	/^    void before_iteration(int iteration, graphchi_context &gcontext) {$/;"	f	struct:SmokeTestProgram
before_iteration	tests/dynamicdata_smoketest.cpp	/^    void before_iteration(int iteration, graphchi_context &gcontext) {$/;"	f	struct:DynamicDataSmokeTestProgram
before_iteration	tests/test_dynamicedata_loader.cpp	/^    void before_iteration(int iteration, graphchi_context &gcontext) {$/;"	f	struct:DynamicDataLoaderTestProgram
below_selectedbit	util/dense_bitset.hpp	/^        size_t below_selectedbit[8 * sizeof(size_t)];$/;"	m	class:graphchi::dense_bitset
bernoulli	api/graphlab2_1_GAS_api/random.hpp	/^            inline bool bernoulli(const double p = double(0.5)) {$/;"	f	class:graphlab::random::generator
bernoulli	api/graphlab2_1_GAS_api/random.hpp	/^        inline bool bernoulli(const double p = double(0.5)) {$/;"	f	namespace:graphlab::random
bin2str	external/vpiotr-mongoose-cpp/mongoose.c	/^static void bin2str(char *to, const unsigned char *p, size_t len) {$/;"	f	file:
binary_minheap	util/binary_minheap.hpp	/^    binary_minheap(int capacity) :  capacity(capacity), sz(0) {$/;"	f	class:binary_minheap
binary_minheap	util/binary_minheap.hpp	/^class binary_minheap {$/;"	c
birth_time	external/vpiotr-mongoose-cpp/mongoose.c	/^    time_t birth_time;          \/\/ Time connection was accepted$/;"	m	struct:mg_connection	file:
bit_to_pos	util/dense_bitset.hpp	/^        inline static void bit_to_pos(uint32_t b, uint32_t &arrpos, uint32_t &bitpos) {$/;"	f	class:graphchi::dense_bitset
bits	external/vpiotr-mongoose-cpp/mongoose.c	/^    uint32_t bits[2];$/;"	m	struct:MD5Context	file:
bitset_scheduler	engine/bitset_scheduler.hpp	/^        bitset_scheduler(int nvertices) {$/;"	f	class:graphchi::bitset_scheduler
bitset_scheduler	engine/bitset_scheduler.hpp	/^    class bitset_scheduler : public ischeduler {$/;"	c	namespace:graphchi
block_cache	io/stripedio.hpp	/^        block_cache(size_t cache_budget_bytes) : cache_budget_bytes(cache_budget_bytes), cache_size(0), full(false) {$/;"	f	class:graphchi::block_cache
block_cache	io/stripedio.hpp	/^    class block_cache {$/;"	c	namespace:graphchi
block_edatasessions	shards/dynamicdata/memoryshard.hpp	/^        std::vector<int> block_edatasessions;$/;"	m	class:graphchi::memory_shard
block_edatasessions	shards/memoryshard.hpp	/^        std::vector<int> block_edatasessions;$/;"	m	class:graphchi::memory_shard
blockfilename	engine/auxdata/dynamicdata/vertex_data_dynamic.hpp	/^        std::string blockfilename(int blockid) {$/;"	f	class:graphchi::vertex_data_store
blockfilename	shards/dynamicdata/slidingshard.hpp	/^        std::string blockfilename;$/;"	m	struct:graphchi::sblock
blockid	engine/auxdata/dynamicdata/vertex_data_dynamic.hpp	/^        int blockid;$/;"	m	struct:graphchi::vdblock_t
blockid	preprocessing/sharder.hpp	/^        int blockid;$/;"	m	class:graphchi::sharder
blocksize	engine/graphchi_engine.hpp	/^        size_t blocksize;$/;"	m	class:graphchi::graphchi_engine
blocksize	shards/dynamicdata/memoryshard.hpp	/^        size_t blocksize;$/;"	m	class:graphchi::memory_shard
blocksize	shards/dynamicdata/slidingshard.hpp	/^        size_t blocksize;$/;"	m	class:graphchi::sliding_shard
blocksize	shards/memoryshard.hpp	/^        size_t blocksize;$/;"	m	class:graphchi::memory_shard
blocksize	shards/slidingshard.hpp	/^        size_t blocksize;$/;"	m	class:graphchi::sliding_shard
blocksizes	shards/dynamicdata/memoryshard.hpp	/^        std::vector<size_t> blocksizes;$/;"	m	class:graphchi::memory_shard
blocksizes	shards/memoryshard.hpp	/^        std::vector<size_t> blocksizes;$/;"	m	class:graphchi::memory_shard
broadcast	external/vpiotr-mongoose-cpp/mongoose.c	/^typedef struct {HANDLE signal, broadcast;} pthread_cond_t;$/;"	m	struct:__anon2	file:
broadcast	util/pthread_tools.hpp	/^        inline void broadcast() const {$/;"	f	class:graphchi::conditional
buf	external/vpiotr-mongoose-cpp/mongoose.c	/^    char *buf;                  \/\/ Buffer for received data$/;"	m	struct:mg_connection	file:
buf	external/vpiotr-mongoose-cpp/mongoose.c	/^    char buf[CGI_ENVIRONMENT_SIZE]; \/\/ Environment buffer$/;"	m	struct:cgi_env_block	file:
buf	external/vpiotr-mongoose-cpp/mongoose.c	/^    uint32_t buf[4];$/;"	m	struct:MD5Context	file:
buf_size	external/vpiotr-mongoose-cpp/mongoose.c	/^    int buf_size;               \/\/ Buffer size$/;"	m	struct:mg_connection	file:
buffer	preprocessing/sharder.hpp	/^        edge_with_value<EdgeDataType> * buffer;$/;"	m	struct:graphchi::shard_flushinfo
buffer	preprocessing/sharder.hpp	/^        edge_with_value<EdgeDataType> * buffer;$/;"	m	struct:graphchi::shovel_merge_source
bufidx	preprocessing/sharder.hpp	/^        size_t bufidx;$/;"	m	struct:graphchi::shovel_merge_source
bufptrs	preprocessing/sharder.hpp	/^        int * bufptrs;$/;"	m	class:graphchi::sharder
bufs	engine/dynamic_graphs/edgebuffers.hpp	/^        std::vector<created_edge<ET> *> bufs;$/;"	m	class:graphchi::edge_buffer_flat
bufsize	preprocessing/sharder.hpp	/^        size_t bufsize;$/;"	m	class:graphchi::sharder
bufsize_bytes	preprocessing/sharder.hpp	/^        size_t bufsize_bytes;$/;"	m	struct:graphchi::shovel_merge_source
bufsize_edges	preprocessing/sharder.hpp	/^        size_t bufsize_edges;$/;"	m	struct:graphchi::shovel_merge_source
builtin_mime_types	external/vpiotr-mongoose-cpp/mongoose.c	/^} builtin_mime_types[] = {$/;"	v	typeref:struct:__anon5	file:
bwrite	engine/dynamic_graphs/graphchi_dynamicgraph_engine.hpp	/^        void bwrite(int f, char * buf, char * &bufptr, T val) {$/;"	f	class:graphchi::graphchi_dynamicgraph_engine
bwrite	preprocessing/sharder.hpp	/^        void bwrite(int f, char * buf, char * &bufptr, T val) {$/;"	f	class:graphchi::sharder
bwrite_edata	engine/dynamic_graphs/graphchi_dynamicgraph_engine.hpp	/^        void bwrite_edata(char * buf, char * &bufptr, T val, size_t & totbytes, std::string & shard_filename) {            $/;"	f	class:graphchi::graphchi_dynamicgraph_engine
bwrite_edata	preprocessing/sharder.hpp	/^        void bwrite_edata(char * &buf, char * &bufptr, T val, size_t & totbytes, std::string & shard_filename,$/;"	f	class:graphchi::sharder
byteReverse	external/vpiotr-mongoose-cpp/mongoose.c	/^static void byteReverse(unsigned char *buf, unsigned longs) {$/;"	f	file:
byteReverse	external/vpiotr-mongoose-cpp/mongoose.c	1802;"	d	file:
c	util/pthread_tools.hpp	/^        conditional c;$/;"	m	class:graphchi::barrier
c.fn.init	external/vpiotr-mongoose-cpp/examples/html/jquery.js	/^function(b,d){return a.call(b,d,b)}))},end:function(){return this.prevObject||c(null)},push:ba,sort:[].sort,splice:[].splice};c.fn.init.prototype=c.fn;c.extend=c.fn.extend=function(){var a=arguments[0]||{},b=1,d=arguments.length,f=false,e,j,i,o;if(typeof a==="boolean"){f=a;a=arguments[1]||{};b=2}if(typeof a!=="object"&&!c.isFunction(a))a={};if(d===b){a=this;--b}for(;b<d;b++)if((e=arguments[b])!=null)for(j in e){i=a[j];o=e[j];if(a!==o)if(f&&o&&(c.isPlainObject(o)||c.isArray(o))){i=i&&(c.isPlainObject(i)||$/;"	c
cache	io/stripedio.hpp	/^        block_cache cache;$/;"	m	class:graphchi::stripedio
cache_budget_bytes	io/stripedio.hpp	/^        size_t cache_budget_bytes;$/;"	m	class:graphchi::block_cache
cache_size	io/stripedio.hpp	/^        size_t cache_size;$/;"	m	class:graphchi::block_cache
cached_block	io/stripedio.hpp	/^        cached_block(size_t len, void * data, bool was_compressed) : len(len), data(data), was_compressed(was_compressed) {}$/;"	f	struct:graphchi::cached_block
cached_block	io/stripedio.hpp	/^    struct cached_block {$/;"	s	namespace:graphchi
cachemap	io/stripedio.hpp	/^        std::map<std::string, cached_block *> cachemap;$/;"	m	class:graphchi::block_cache
calcMD5	external/vpiotr-mongoose-cpp/mongcpp.cpp	/^void MongooseServer::calcMD5(const std::string &text, std::string &output)$/;"	f	class:MongooseServer
call_user	external/vpiotr-mongoose-cpp/mongoose.c	/^static void *call_user(struct mg_connection *conn, enum mg_event event) {$/;"	f	file:
callback	api/vertex_aggregator.hpp	/^        void callback(vid_t vertex_id, VertexDataType &value) {$/;"	f	class:graphchi::SumCallback
callback	external/vpiotr-mongoose-cpp/test/embed.c	/^static void *callback(enum mg_event event,$/;"	f	file:
callback	tests/basic_dynamicengine_smoketest.cpp	/^    void callback(vid_t vertex_id, VertexDataType &vecvalue) {$/;"	f	class:VertexDataChecker
callback	tests/basic_dynamicengine_smoketest2.cpp	/^    void callback(vid_t vertex_id, VertexDataType &vecvalue) {$/;"	f	class:VertexDataChecker
callback	tests/basic_smoketest.cpp	/^    void callback(vid_t vertex_id, VertexDataType &vecvalue) {$/;"	f	class:VertexDataChecker
callback	tests/dynamicdata_smoketest.cpp	/^    void callback(vid_t vertex_id, VertexDataType &vecvalue) {$/;"	f	class:VertexDataChecker
callback	tests/test_dynamicedata_loader.cpp	/^    virtual void callback(vid_t vertex_id, chivector<size_t> &vec) {$/;"	f	class:VertexValidator
called	util/pthread_tools.hpp	/^        int called;$/;"	m	class:graphchi::barrier
capacity	api/dynamicdata/chivector.hpp	/^    uint16_t capacity() {$/;"	f	class:graphchi::chivector
capacity	util/binary_minheap.hpp	/^    int capacity;$/;"	m	class:binary_minheap
cerr	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        virtual std::ostream& cerr() const { return std::cerr; } $/;"	f	class:graphlab::icontext
cgi_env_block	external/vpiotr-mongoose-cpp/mongoose.c	/^struct cgi_env_block {$/;"	s	file:
change_slashes_to_backslashes	external/vpiotr-mongoose-cpp/mongoose.c	/^static void change_slashes_to_backslashes(char *path) {$/;"	f	file:
chat.backendUrl	external/vpiotr-mongoose-cpp/examples/html/main.js	/^var chat = {$/;"	p
chat.errorMessageFadeOutTimeoutMs	external/vpiotr-mongoose-cpp/examples/html/main.js	/^  maxVisibleMessages: 10,$/;"	p
chat.errorMessageFadeOutTimer	external/vpiotr-mongoose-cpp/examples/html/main.js	/^  errorMessageFadeOutTimeoutMs: 2000,$/;"	p
chat.getMessages	external/vpiotr-mongoose-cpp/examples/html/main.js	/^};$/;"	f
chat.getMessagesIntervalMs	external/vpiotr-mongoose-cpp/examples/html/main.js	/^  lastMessageId: 0,$/;"	p
chat.handleMenuItemClick	external/vpiotr-mongoose-cpp/examples/html/main.js	/^};$/;"	f
chat.handleMessageInput	external/vpiotr-mongoose-cpp/examples/html/main.js	/^};$/;"	f
chat.lastMessageId	external/vpiotr-mongoose-cpp/examples/html/main.js	/^  errorMessageFadeOutTimer: null,$/;"	p
chat.maxVisibleMessages	external/vpiotr-mongoose-cpp/examples/html/main.js	/^  backendUrl: '',$/;"	p
chat.normalizeText	external/vpiotr-mongoose-cpp/examples/html/main.js	/^};$/;"	f
chat.refresh	external/vpiotr-mongoose-cpp/examples/html/main.js	/^};$/;"	f
chat.showError	external/vpiotr-mongoose-cpp/examples/html/main.js	/^};$/;"	f
checkMethodMap	external/vpiotr-mongoose-cpp/mongcpp.cpp	/^void MongooseServer::checkMethodMap()$/;"	f	class:MongooseServer
checkStopped	external/vpiotr-mongoose-cpp/mongcpp.cpp	/^void MongooseServer::checkStopped()$/;"	f	class:MongooseServer
check_acl	external/vpiotr-mongoose-cpp/mongoose.c	/^static int check_acl(struct mg_context *ctx, const struct usa *usa) {$/;"	f	file:
check_adjblock	shards/dynamicdata/slidingshard.hpp	/^        inline void check_adjblock(size_t toread) {$/;"	f	class:graphchi::sliding_shard
check_adjblock	shards/slidingshard.hpp	/^        inline void check_adjblock(size_t toread) {$/;"	f	class:graphchi::sliding_shard
check_authorization	external/vpiotr-mongoose-cpp/mongoose.c	/^static int check_authorization(struct mg_connection *conn, const char *path) {$/;"	f	file:
check_block_initialized	shards/dynamicdata/memoryshard.hpp	/^        void check_block_initialized(int blockid) {$/;"	f	class:graphchi::memory_shard
check_cmd_init	util/cmdopts.hpp	/^    static void check_cmd_init() {$/;"	f	namespace:graphchi
check_curblock	shards/dynamicdata/slidingshard.hpp	/^        inline void check_curblock(size_t toread) {$/;"	f	class:graphchi::sliding_shard
check_curblock	shards/slidingshard.hpp	/^        inline void check_curblock(size_t toread) {$/;"	f	class:graphchi::sliding_shard
check_origfile_modification_earlier	api/chifilenames.hpp	/^    bool check_origfile_modification_earlier(std::string basefilename, int nshards) {$/;"	f	namespace:graphchi
check_password	external/vpiotr-mongoose-cpp/examples/chat.c	/^static int check_password(const char *user, const char *password) {$/;"	f	file:
check_password	external/vpiotr-mongoose-cpp/mongoose.c	/^static int check_password(struct mg_connection *conn) {$/;"	f	file:
check_size	engine/auxdata/dynamicdata/vertex_data_dynamic.hpp	/^        void check_size(size_t nvertices) {$/;"	f	class:graphchi::vertex_data_store
check_size	engine/auxdata/vertex_data.hpp	/^        void check_size(size_t nvertices) {$/;"	f	class:graphchi::vertex_data_store
checkarray_filesize	util/ioutil.hpp	/^void checkarray_filesize(std::string fname, size_t nelements) {$/;"	f
checksum	tests/test_dynamicedata_loader.cpp	/^size_t checksum = 0;$/;"	v
chicontext	engine/graphchi_engine.hpp	/^        graphchi_context chicontext;$/;"	m	class:graphchi::graphchi_engine
chivecs	shards/dynamicdata/dynamicblock.hpp	/^        ET * chivecs;$/;"	m	struct:graphchi::dynamicdata_block
chivector	api/dynamicdata/chivector.hpp	/^    chivector() {$/;"	f	class:graphchi::chivector
chivector	api/dynamicdata/chivector.hpp	/^    chivector(uint16_t sz, uint16_t cap, T * dataptr) : data(dataptr) {$/;"	f	class:graphchi::chivector
chivector	api/dynamicdata/chivector.hpp	/^class chivector {$/;"	c	namespace:graphchi
chunkid	shards/dynamicdata/memoryshard.hpp	/^        uint64_t chunkid;$/;"	m	class:graphchi::memory_shard
chunkid	shards/memoryshard.hpp	/^        uint64_t chunkid;$/;"	m	class:graphchi::memory_shard
clear	api/dynamicdata/chivector.hpp	/^    void clear() {$/;"	f	class:graphchi::chivector
clear	engine/auxdata/dynamicdata/vertex_data_dynamic.hpp	/^        void clear(size_t nvertices) {$/;"	f	class:graphchi::vertex_data_store
clear	engine/auxdata/vertex_data.hpp	/^        void clear(size_t nvertices) {$/;"	f	class:graphchi::vertex_data_store
clear	engine/dynamic_graphs/edgebuffers.hpp	/^        void clear() {$/;"	f	class:graphchi::edge_buffer_flat
clear	metrics/metrics.hpp	/^    inline void clear() {$/;"	f	class:graphchi::metrics
clear	util/dense_bitset.hpp	/^        void clear() {$/;"	f	class:graphchi::dense_bitset
clear_bit	util/dense_bitset.hpp	/^        inline bool clear_bit(uint32_t b) {$/;"	f	class:graphchi::dense_bitset
clear_bits	util/dense_bitset.hpp	/^        inline void clear_bits(uint32_t fromb, uint32_t tob) { \/\/ tob is inclusive$/;"	f	class:graphchi::dense_bitset
clear_gather_cache	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        virtual void clear_gather_cache(const vertex_type& vertex) {$/;"	f	class:graphlab::icontext
client	external/vpiotr-mongoose-cpp/mongoose.c	/^    struct socket client;       \/\/ Connected client$/;"	m	struct:mg_connection	typeref:struct:mg_connection::socket	file:
close	external/vpiotr-mongoose-cpp/mongoose.c	113;"	d	file:
close	output/output.hpp	/^        void close() {$/;"	f	class:graphchi::basic_text_output
close	preprocessing/sharder.hpp	/^        void close() {$/;"	f	class:graphchi::sharded_graph_output
close_all_listening_sockets	external/vpiotr-mongoose-cpp/mongoose.c	/^static void close_all_listening_sockets(struct mg_context *ctx) {$/;"	f	file:
close_connection	external/vpiotr-mongoose-cpp/mongoose.c	/^static void close_connection(struct mg_connection *conn) {$/;"	f	file:
close_session	io/stripedio.hpp	/^        void close_session(int session) {$/;"	f	class:graphchi::stripedio
close_socket_gracefully	external/vpiotr-mongoose-cpp/mongoose.c	/^static void close_socket_gracefully(SOCKET sock) {$/;"	f	file:
closedir	external/vpiotr-mongoose-cpp/mongoose.c	/^static int closedir(DIR *dir) {$/;"	f	file:
closefd	io/stripedio.hpp	/^        bool closefd;$/;"	m	struct:graphchi::iotask
closesocket	external/vpiotr-mongoose-cpp/mongoose.c	194;"	d	file:
cmpxchg	util/pthread_tools.hpp	182;"	d
cmpxchg	util/pthread_tools.hpp	247;"	d
cnonce	external/vpiotr-mongoose-cpp/mongoose.h	/^  const char *user, *uri, *cnonce, *response, *qop, *nc, *nonce; \/\/ Fields of the Authorization header$/;"	m	struct:mg_auth_header
commit	shards/dynamicdata/memoryshard.hpp	/^        void commit(bool commit_inedges, bool commit_outedges) {$/;"	f	class:graphchi::memory_shard
commit	shards/dynamicdata/slidingshard.hpp	/^        void commit(sblock<ET> &b, bool synchronously, bool disable_writes=false) {$/;"	f	class:graphchi::sliding_shard
commit	shards/memoryshard.hpp	/^        void commit(bool commit_inedges, bool commit_outedges) {$/;"	f	class:graphchi::memory_shard
commit	shards/slidingshard.hpp	/^        void commit(sblock &b, bool synchronously, bool disable_writes=false) {$/;"	f	class:graphchi::sliding_shard
commit_async	shards/dynamicdata/slidingshard.hpp	/^        void commit_async(stripedio * iomgr) {$/;"	f	struct:graphchi::sblock
commit_async	shards/slidingshard.hpp	/^        void commit_async(stripedio * iomgr) {$/;"	f	struct:graphchi::sblock
commit_cached_blocks	io/stripedio.hpp	/^        void commit_cached_blocks() {$/;"	f	class:graphchi::stripedio
commit_graph_changes	engine/dynamic_graphs/graphchi_dynamicgraph_engine.hpp	/^        void commit_graph_changes() {            $/;"	f	class:graphchi::graphchi_dynamicgraph_engine
commit_now	shards/dynamicdata/slidingshard.hpp	/^        void commit_now(stripedio * iomgr) {$/;"	f	struct:graphchi::sblock
commit_now	shards/slidingshard.hpp	/^        void commit_now(stripedio * iomgr) {$/;"	f	struct:graphchi::sblock
commitqueue	io/stripedio.hpp	/^        synchronized_queue<iotask> * commitqueue;$/;"	m	struct:graphchi::thrinfo
compare_dir_entries	external/vpiotr-mongoose-cpp/mongoose.c	/^static int WINCDECL compare_dir_entries(const void *p1, const void *p2) {$/;"	f	file:
compressed	io/stripedio.hpp	/^        bool compressed;$/;"	m	struct:graphchi::io_descriptor
compressed	io/stripedio.hpp	/^        bool compressed;$/;"	m	struct:graphchi::iotask
compressed_block_size	preprocessing/sharder.hpp	/^        int compressed_block_size;$/;"	m	class:graphchi::sharder
compressed_session	io/stripedio.hpp	/^        bool compressed_session(int session) {$/;"	f	class:graphchi::stripedio
computational_edges	api/functional/functional_bulksync.hpp	/^        bool computational_edges() {$/;"	f	class:graphchi::functional_vertex_unweighted_bulksync
computational_edges	api/functional/functional_semisync.hpp	/^    bool computational_edges() {$/;"	f	class:graphchi::functional_vertex_unweighted_semisync
computational_edges	api/graph_objects.hpp	/^        static bool computational_edges() {$/;"	f	class:graphchi::graphchi_vertex
compute_vertexvalue	tests/bulksync_functional_test.cpp	/^    int compute_vertexvalue(graphchi_context &ginfo, vertex_info& myvertex, int nbvalsum) {$/;"	f	struct:smoketest_program
cond	external/vpiotr-mongoose-cpp/mongoose.c	/^    pthread_cond_t  cond;      \/\/ Condvar for tracking workers terminations$/;"	m	struct:mg_context	file:
conditional	util/pthread_tools.hpp	/^        conditional() {$/;"	f	class:graphchi::conditional
conditional	util/pthread_tools.hpp	/^    class conditional {$/;"	c	namespace:graphchi
conf	util/cmdopts.hpp	/^    static std::map<std::string, std::string> conf;$/;"	m	namespace:graphchi
config	external/vpiotr-mongoose-cpp/mongoose.c	/^    char *config[NUM_OPTIONS];    \/\/ Mongoose configuration parameters$/;"	m	struct:mg_context	file:
config_file	external/vpiotr-mongoose-cpp/main.c	/^static char config_file[PATH_MAX];  \/\/ Set by process_command_line_arguments()$/;"	v	file:
config_options	external/vpiotr-mongoose-cpp/mongoose.c	/^static const char *config_options[] = {$/;"	v	file:
conn	external/vpiotr-mongoose-cpp/bindings/csharp/mongoose.cs	/^	private IntPtr conn;$/;"	f	class:MongooseConnection	file:
conn	external/vpiotr-mongoose-cpp/mongoose.c	/^    struct mg_connection *conn;$/;"	m	struct:cgi_env_block	typeref:struct:cgi_env_block::mg_connection	file:
conn	external/vpiotr-mongoose-cpp/mongoose.c	/^    struct mg_connection *conn;$/;"	m	struct:de	typeref:struct:de::mg_connection	file:
consider_caching	io/stripedio.hpp	/^        bool consider_caching(std::string filename, void * data, size_t len, bool was_compresssed) {$/;"	f	class:graphchi::block_cache
consume_socket	external/vpiotr-mongoose-cpp/mongoose.c	/^static int consume_socket(struct mg_context *ctx, struct socket *sp) {$/;"	f	file:
consumed_content	external/vpiotr-mongoose-cpp/mongoose.c	/^    int64_t consumed_content;   \/\/ How many bytes of content is already read$/;"	m	struct:mg_connection	file:
content_len	external/vpiotr-mongoose-cpp/mongoose.c	/^    int64_t content_len;        \/\/ Content-Length header value$/;"	m	struct:mg_connection	file:
convert	preprocessing/conversions.hpp	/^    int convert(std::string basefilename, std::string nshards_string) {$/;"	f	namespace:graphchi
convert_adjlist	preprocessing/conversions.hpp	/^    void convert_adjlist(std::string inputfile, sharder<EdgeDataType, FinalEdgeDataType> &sharderobj) {$/;"	f	namespace:graphchi
convert_binedgelist	preprocessing/conversions.hpp	/^    void convert_binedgelist(std::string basefilename, sharder<EdgeDataType, FinalEdgeDataType> &sharderobj) {$/;"	f	namespace:graphchi
convert_binedgelistval	preprocessing/conversions.hpp	/^    void convert_binedgelistval(std::string basefilename, sharder<EdgeDataType, FinalEdgeDataType> &sharderobj) {$/;"	f	namespace:graphchi
convert_cassovary	preprocessing/conversions.hpp	/^    void convert_cassovary(std::string basefilename, sharder<EdgeDataType, FinalEdgeDataType> &sharderobj) {$/;"	f	namespace:graphchi
convert_edgelist	preprocessing/conversions.hpp	/^    void convert_edgelist(std::string inputfile, sharder<EdgeDataType, FinalEdgeDataType> &sharderobj, bool multivalue_edges=false) {$/;"	f	namespace:graphchi
convert_if_notexists	preprocessing/conversions.hpp	/^    int convert_if_notexists(std::string basefilename, std::string nshards_string) {$/;"	f	namespace:graphchi
convert_if_notexists	preprocessing/conversions.hpp	/^    int convert_if_notexists(std::string basefilename, std::string nshards_string, bool &didexist) {$/;"	f	namespace:graphchi
convert_if_notexists_novalues	preprocessing/conversions.hpp	/^    int convert_if_notexists_novalues(std::string basefilename, std::string nshards_string) {$/;"	f	namespace:graphchi
convert_if_notexists_novalues	preprocessing/conversions.hpp	/^    int convert_if_notexists_novalues(std::string basefilename, std::string nshards_string, bool &didexist) {$/;"	f	namespace:graphchi
convert_metis	preprocessing/conversions.hpp	/^    void convert_metis(std::string inputPath, sharder<EdgeDataType, FinalEdgeDataType> &sharderobj) {$/;"	f	namespace:graphchi
convert_none	preprocessing/conversions.hpp	/^    static int VARIABLE_IS_NOT_USED convert_none(std::string basefilename, std::string nshards_string) {$/;"	f	namespace:graphchi
convert_uri_to_file_name	external/vpiotr-mongoose-cpp/mongoose.c	/^static void convert_uri_to_file_name(struct mg_connection *conn,$/;"	f	file:
count	engine/dynamic_graphs/edgebuffers.hpp	/^        unsigned int count;$/;"	m	class:graphchi::edge_buffer_flat
count	io/stripedio.hpp	/^        volatile int count;$/;"	m	struct:graphchi::refcountptr
count	metrics/metrics.hpp	/^    size_t count;$/;"	m	struct:graphchi::metrics_entry
count	util/labelanalysis.hpp	/^    unsigned int count;  \/\/ Count excludes the vertex which has its own id as the label. (Important optimization)$/;"	m	struct:labelcount_tt
cout	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        virtual std::ostream& cout() const { return std::cout; }$/;"	f	class:graphlab::icontext
cp	engine/dynamic_graphs/graphchi_dynamicgraph_engine.hpp	/^        size_t cp(std::string origfile, std::string dstfile, bool zeroout=false) {$/;"	f	class:graphchi::graphchi_dynamicgraph_engine
cpedata	engine/dynamic_graphs/graphchi_dynamicgraph_engine.hpp	/^        void cpedata(std::string origfile, std::string dstfile, bool zeroout=false) {$/;"	f	class:graphchi::graphchi_dynamicgraph_engine
create_degree_file	preprocessing/sharder.hpp	/^        void create_degree_file() {$/;"	f	class:graphchi::sharder
create_degree_handler	engine/dynamic_graphs/graphchi_dynamicgraph_engine.hpp	/^        virtual degree_data * create_degree_handler() {$/;"	f	class:graphchi::graphchi_dynamicgraph_engine
create_degree_handler	engine/graphchi_engine.hpp	/^        virtual degree_data * create_degree_handler() {$/;"	f	class:graphchi::graphchi_engine
create_memshard	engine/dynamic_graphs/graphchi_dynamicgraph_engine.hpp	/^        virtual typename base_engine::memshard_t * create_memshard(vid_t interval_st, vid_t interval_en) {$/;"	f	class:graphchi::graphchi_dynamicgraph_engine
create_memshard	engine/graphchi_engine.hpp	/^        virtual memshard_t * create_memshard(vid_t interval_st, vid_t interval_en) {$/;"	f	class:graphchi::graphchi_engine
created_edge	engine/dynamic_graphs/edgebuffers.hpp	/^        created_edge(vid_t src, vid_t dst, EdgeDataType _data) : src(src), dst(dst), data(_data), accounted_for_outc(false),$/;"	f	struct:graphchi::created_edge
created_edge	engine/dynamic_graphs/edgebuffers.hpp	/^    struct created_edge {$/;"	s	namespace:graphchi
createnextshard	preprocessing/sharder.hpp	/^        void createnextshard() {$/;"	f	class:graphchi::sharder
cry	external/vpiotr-mongoose-cpp/mongoose.c	/^static void cry(struct mg_connection *conn, const char *fmt, ...) {$/;"	f	file:
crypto_sw	external/vpiotr-mongoose-cpp/mongoose.c	/^static struct ssl_func crypto_sw[] = {$/;"	v	typeref:struct:ssl_func	file:
ctx	external/vpiotr-mongoose-cpp/bindings/csharp/mongoose.cs	/^	private IntPtr ctx;$/;"	f	class:Mongoose	file:
ctx	external/vpiotr-mongoose-cpp/main.c	/^static struct mg_context *ctx;      \/\/ Set by start_mongoose()$/;"	v	typeref:struct:mg_context	file:
ctx	external/vpiotr-mongoose-cpp/mongoose.c	/^    struct mg_context *ctx;$/;"	m	struct:mg_connection	typeref:struct:mg_connection::mg_context	file:
ctypes	external/vpiotr-mongoose-cpp/bindings/python/mongoose.py	/^import ctypes$/;"	i
cumval	api/functional/functional_bulksync.hpp	/^        VT cumval;$/;"	m	class:graphchi::functional_vertex_unweighted_bulksync
cumval	api/functional/functional_semisync.hpp	/^    VT cumval;$/;"	m	class:graphchi::functional_vertex_unweighted_semisync
cumvalue	metrics/metrics.hpp	/^    double cumvalue;$/;"	m	struct:graphchi::metrics_entry
cur_shard_counter	preprocessing/sharder.hpp	/^        size_t cur_shard_counter;$/;"	m	class:graphchi::sharder
curadjblock	shards/dynamicdata/slidingshard.hpp	/^        sblock<ET> * curadjblock;$/;"	m	class:graphchi::sliding_shard
curadjblock	shards/slidingshard.hpp	/^        sblock * curadjblock;$/;"	m	class:graphchi::sliding_shard
curadjfilepos	engine/dynamic_graphs/graphchi_dynamicgraph_engine.hpp	/^        size_t curadjfilepos;$/;"	m	class:graphchi::graphchi_dynamicgraph_engine
curadjfilepos	preprocessing/sharder.hpp	/^        size_t curadjfilepos;$/;"	m	class:graphchi::sharder
curblock	shards/dynamicdata/slidingshard.hpp	/^        sblock<ET> * curblock;$/;"	m	class:graphchi::sliding_shard
curblock	shards/slidingshard.hpp	/^        sblock * curblock;$/;"	m	class:graphchi::sliding_shard
curiteration_bitset	engine/bitset_scheduler.hpp	/^        dense_bitset * curiteration_bitset;$/;"	m	class:graphchi::bitset_scheduler
curshovel_buffer	preprocessing/sharder.hpp	/^        edge_with_value<EdgeDataType> * curshovel_buffer;$/;"	m	class:graphchi::sharder
curshovel_idx	preprocessing/sharder.hpp	/^        size_t curshovel_idx;$/;"	m	class:graphchi::sharder
curvid	shards/dynamicdata/slidingshard.hpp	/^        vid_t curvid;$/;"	m	class:graphchi::sliding_shard
curvid	shards/slidingshard.hpp	/^        vid_t curvid;$/;"	m	class:graphchi::sliding_shard
custom_request_handler	httpadmin/chi_httpadmin.hpp	/^    class custom_request_handler {$/;"	c	namespace:graphchi
d_name	external/vpiotr-mongoose-cpp/mongoose.c	/^    char d_name[PATH_MAX];$/;"	m	struct:dirent	file:
data	api/dynamicdata/chivector.hpp	/^    T * data;$/;"	m	class:graphchi::chivector
data	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        const edge_data_type& data() const { return const_cast<edge_data_type&>(*edge->data_ptr); }$/;"	f	struct:graphlab::GraphLabEdgeWrapper
data	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        const vertex_data_type& data() const {$/;"	f	struct:graphlab::GraphLabVertexWrapper
data	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        edge_data_type& data() { return *(edge->data_ptr); }$/;"	f	struct:graphlab::GraphLabEdgeWrapper
data	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        vertex_data_type& data() {$/;"	f	struct:graphlab::GraphLabVertexWrapper
data	engine/auxdata/dynamicdata/vertex_data_dynamic.hpp	/^        uint8_t* data;$/;"	m	struct:graphchi::vdblock_t
data	engine/dynamic_graphs/edgebuffers.hpp	/^        EdgeDataType data;$/;"	m	struct:graphchi::created_edge
data	io/stripedio.hpp	/^        void * data;$/;"	m	struct:graphchi::cached_block
data	shards/dynamicdata/dynamicblock.hpp	/^        uint8_t * data;$/;"	m	struct:graphchi::dynamicdata_block
data	shards/dynamicdata/slidingshard.hpp	/^        uint8_t * data;$/;"	m	struct:graphchi::sblock
data	shards/slidingshard.hpp	/^        uint8_t * data;$/;"	m	struct:graphchi::sblock
data_len	external/vpiotr-mongoose-cpp/mongoose.c	/^    int data_len;               \/\/ Total size of data in a buffer$/;"	m	struct:mg_connection	file:
data_ptr	api/graph_objects.hpp	/^        EdgeDataType * data_ptr;$/;"	m	class:graphchi::graphchi_edge
dataptr	api/functional/functional_semisync.hpp	/^    VT * dataptr;$/;"	m	class:graphchi::functional_vertex_unweighted_semisync
dataptr	api/graph_objects.hpp	/^        VertexDataType * dataptr;$/;"	m	class:graphchi::internal_graphchi_vertex
dblock	engine/auxdata/dynamicdata/vertex_data_dynamic.hpp	/^        dynamicdata_block<VertexDataType> * dblock;$/;"	m	struct:graphchi::vdblock_t
de	external/vpiotr-mongoose-cpp/mongoose.c	/^struct de {$/;"	s	file:
dec	util/atomic.hpp	/^        T dec() { return __sync_sub_and_fetch(&value, 1);  }$/;"	f	class:graphchi::atomic
dec	util/atomic.hpp	/^        T dec(const T val) { return __sync_sub_and_fetch(&value, val);  }$/;"	f	class:graphchi::atomic
dec_ret_last	util/atomic.hpp	/^        T dec_ret_last() { return __sync_fetch_and_sub(&value, 1);  }$/;"	f	class:graphchi::atomic
dec_ret_last	util/atomic.hpp	/^        T dec_ret_last(const T val) { return __sync_fetch_and_sub(&value, val);  }$/;"	f	class:graphchi::atomic
decrHeapSize	util/binary_minheap.hpp	/^    inline void decrHeapSize() { sz--; assert(sz >= 0); }   $/;"	f	class:binary_minheap
deg	preprocessing/util/orderbydegree.hpp	/^        int deg;$/;"	m	struct:graphchi::vertex_degree
degree	engine/auxdata/degree_data.hpp	/^    struct degree {$/;"	s	namespace:graphchi
degree	util/readdeg.cpp	/^struct degree {$/;"	s	file:
degree_data	engine/auxdata/degree_data.hpp	/^        degree_data(std::string base_filename, stripedio * iomgr) : iomgr(iomgr), loaded_chunk(NULL) {$/;"	f	class:graphchi::degree_data
degree_data	engine/auxdata/degree_data.hpp	/^    class degree_data {$/;"	c	namespace:graphchi
degree_handler	engine/graphchi_engine.hpp	/^        degree_data * degree_handler;$/;"	m	class:graphchi::graphchi_engine
degrees	preprocessing/sharder.hpp	/^        degree * degrees;$/;"	m	class:graphchi::sharder
delegates1	external/vpiotr-mongoose-cpp/bindings/csharp/mongoose.cs	/^    	private event MongooseCallback delegates1;$/;"	E	class:Mongoose	file:
delegates2	external/vpiotr-mongoose-cpp/bindings/csharp/mongoose.cs	/^    	private event MongooseCallback2 delegates2;$/;"	E	class:Mongoose	file:
delete_block_uncompressed_sizefile	shards/dynamicdata/dynamicblock.hpp	/^    void delete_block_uncompressed_sizefile(std::string blockfilename) {$/;"	f	namespace:graphchi
delete_shards	api/chifilenames.hpp	/^    static void delete_shards(std::string base_filename, int nshards) {$/;"	f	namespace:graphchi
deletecounts	engine/dynamic_graphs/graphchi_dynamicgraph_engine.hpp	/^        std::vector<int> deletecounts;$/;"	m	class:graphchi::graphchi_dynamicgraph_engine
deleted_inc	api/graph_objects.hpp	/^        int deleted_inc;$/;"	m	class:graphchi::internal_graphchi_vertex
deleted_outc	api/graph_objects.hpp	/^        int deleted_outc;$/;"	m	class:graphchi::internal_graphchi_vertex
delimiter	output/output.hpp	/^        std::string delimiter;$/;"	m	class:graphchi::basic_text_output
deltas	api/graphchi_context.hpp	/^        std::vector<double> deltas;$/;"	m	struct:graphchi::graphchi_context
dense_bitset	util/dense_bitset.hpp	/^        dense_bitset() : array(NULL), len(0) {$/;"	f	class:graphchi::dense_bitset
dense_bitset	util/dense_bitset.hpp	/^        dense_bitset(size_t size) : array(NULL), len(size) {$/;"	f	class:graphchi::dense_bitset
dense_bitset	util/dense_bitset.hpp	/^    class dense_bitset {$/;"	c	namespace:graphchi
destroy_tls_data	api/graphlab2_1_GAS_api/random.cpp	/^        void destroy_tls_data(void* ptr) {$/;"	f	namespace:graphlab::random
determine_next_window	engine/dynamic_graphs/graphchi_dynamicgraph_engine.hpp	/^        virtual vid_t determine_next_window(vid_t iinterval, vid_t fromvid, vid_t maxvid, size_t membudget) {$/;"	f	class:graphchi::graphchi_dynamicgraph_engine
determine_next_window	engine/graphchi_engine.hpp	/^        virtual vid_t determine_next_window(vid_t iinterval, vid_t fromvid, vid_t maxvid, size_t membudget) {$/;"	f	class:graphchi::graphchi_engine
determine_number_of_shards	preprocessing/sharder.hpp	/^        virtual void determine_number_of_shards(std::string nshards_string) {$/;"	f	class:graphchi::sharder
die	external/vpiotr-mongoose-cpp/main.c	/^static void die(const char *fmt, ...) {$/;"	f	file:
dirent	external/vpiotr-mongoose-cpp/mongoose.c	/^struct dirent {$/;"	s	file:
dirname	engine/auxdata/dynamicdata/vertex_data_dynamic.hpp	/^        std::string dirname;$/;"	m	class:graphchi::vertex_data_store
dirname_shard_edata_block	api/chifilenames.hpp	/^    static std::string dirname_shard_edata_block(std::string edata_shardname, size_t blocksize) {$/;"	f	namespace:graphchi
disable_async_writes	shards/dynamicdata/memoryshard.hpp	/^        bool disable_async_writes;$/;"	m	class:graphchi::memory_shard
disable_async_writes	shards/dynamicdata/slidingshard.hpp	/^        bool disable_async_writes;$/;"	m	class:graphchi::sliding_shard
disable_async_writes	shards/memoryshard.hpp	/^        bool disable_async_writes;$/;"	m	class:graphchi::memory_shard
disable_async_writes	shards/slidingshard.hpp	/^        bool disable_async_writes;$/;"	m	class:graphchi::sliding_shard
disable_outedges	engine/graphchi_engine.hpp	/^        bool disable_outedges;$/;"	m	class:graphchi::graphchi_engine
disable_parallel_loading	shards/memoryshard.hpp	/^        void disable_parallel_loading() {$/;"	f	class:graphchi::memory_shard
disable_preloading	engine/dynamic_graphs/graphchi_dynamicgraph_engine.hpp	/^        virtual bool disable_preloading() {$/;"	f	class:graphchi::graphchi_dynamicgraph_engine
disable_vertexdata_storage	engine/graphchi_engine.hpp	/^        bool disable_vertexdata_storage;$/;"	m	class:graphchi::graphchi_engine
disable_writes	shards/dynamicdata/slidingshard.hpp	/^        bool disable_writes;$/;"	m	class:graphchi::sliding_shard
disable_writes	shards/slidingshard.hpp	/^        bool disable_writes;$/;"	m	class:graphchi::sliding_shard
discard_current_request_from_buffer	external/vpiotr-mongoose-cpp/mongoose.c	/^static void discard_current_request_from_buffer(struct mg_connection *conn) {$/;"	f	file:
discover_shard_num	engine/graphchi_engine.hpp	/^        int discover_shard_num() {$/;"	f	class:graphchi::graphchi_engine
discrete_rng	api/graphlab2_1_GAS_api/random.hpp	/^            discrete_rng_type discrete_rng;$/;"	m	class:graphlab::random::generator
discrete_rng_type	api/graphlab2_1_GAS_api/random.hpp	/^            typedef boost::mt11213b            discrete_rng_type;$/;"	t	class:graphlab::random::generator
distributed_graph	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^    struct distributed_graph {$/;"	s	namespace:graphlab
distribution_type	api/graphlab2_1_GAS_api/random.hpp	/^                typedef boost::uniform_int<IntType> distribution_type;$/;"	t	struct:graphlab::random::distributions::uniform
distribution_type	api/graphlab2_1_GAS_api/random.hpp	/^                typedef boost::uniform_real<double> distribution_type;$/;"	t	struct:graphlab::random::distributions::uniform
distribution_type	api/graphlab2_1_GAS_api/random.hpp	/^                typedef boost::uniform_real<float> distribution_type;$/;"	t	struct:graphlab::random::distributions::uniform
distributions	api/graphlab2_1_GAS_api/random.hpp	/^        namespace distributions {$/;"	n	namespace:graphlab::random
dlopen	external/vpiotr-mongoose-cpp/mongoose.c	/^static HANDLE dlopen(const char *dll_name, int flags) {$/;"	f	file:
dlsym	external/vpiotr-mongoose-cpp/mongoose.c	114;"	d	file:
do_PUT_test	external/vpiotr-mongoose-cpp/test/test.pl	/^sub do_PUT_test {$/;"	s
do_embedded_test	external/vpiotr-mongoose-cpp/test/test.pl	/^sub do_embedded_test {$/;"	s
do_report	metrics/reps/basic_reporter.hpp	/^    virtual void do_report(std::string name, std::string ident, std::map<std::string, metrics_entry> & entries) {$/;"	f	class:graphchi::basic_reporter
do_report	metrics/reps/file_reporter.hpp	/^      virtual void do_report(std::string name, std::string ident, std::map<std::string, metrics_entry> & entries) {$/;"	f	class:graphchi::file_reporter
do_report	metrics/reps/html_reporter.hpp	/^            virtual void do_report(std::string name, std::string ident, std::map<std::string, metrics_entry> & entries) {$/;"	f	class:graphchi::html_reporter
do_report	metrics/reps/null_reporter.hpp	/^    virtual void do_report(std::string name, std::string ident, std::map<std::string, metrics_entry> & entries) {$/;"	f	class:graphchi::null_reporter
do_ssi_exec	external/vpiotr-mongoose-cpp/mongoose.c	/^static void do_ssi_exec(struct mg_connection *conn, char *tag) {$/;"	f	file:
do_ssi_include	external/vpiotr-mongoose-cpp/mongoose.c	/^static void do_ssi_include(struct mg_connection *conn, const char *ssi,$/;"	f	file:
document_root	external/vpiotr-mongoose-cpp/bindings/python/example.py	/^                           document_root='\/tmp',$/;"	v
done	preprocessing/sharder.hpp	/^        virtual void done() {$/;"	f	class:graphchi::sharder
doneptr	io/stripedio.hpp	/^        volatile int * doneptr;$/;"	m	struct:graphchi::iotask
doneptr	shards/memoryshard.hpp	/^        int * doneptr;$/;"	m	class:graphchi::memory_shard
drawplot	httpadmin/plotter.hpp	/^    static void drawplot(std::string plotname, size_t lookback_secs) {$/;"	f	namespace:graphchi
drawplots	httpadmin/plotter.hpp	/^    static void drawplots() {$/;"	f	namespace:graphchi
dst	engine/dynamic_graphs/edgebuffers.hpp	/^        vid_t dst;$/;"	m	struct:graphchi::created_edge
dst	preprocessing/sharder.hpp	/^        vid_t dst;$/;"	m	struct:graphchi::edge_with_value
dstF	preprocessing/sharder.hpp	/^    struct dstF {$/;"	s	namespace:graphchi
dstSrcF	preprocessing/sharder.hpp	/^        dstSrcF(vid_t maxvertex) : maxvertex(maxvertex + 1) {}$/;"	f	struct:graphchi::dstSrcF
dstSrcF	preprocessing/sharder.hpp	/^    struct dstSrcF {$/;"	s	namespace:graphchi
dummy	preprocessing/conversions.hpp	/^    struct dummy {$/;"	s	namespace:graphchi
dummyC	preprocessing/conversions.hpp	/^    struct dummyC {$/;"	s	namespace:graphchi
dummy_t	preprocessing/sharder.hpp	/^        typedef char dummy_t;$/;"	t	class:graphchi::sharder
duplicate_edge_filter	preprocessing/sharder.hpp	/^        DuplicateEdgeFilter<EdgeDataType> * duplicate_edge_filter;$/;"	m	class:graphchi::sharder
duplicate_filter	preprocessing/sharder.hpp	/^        DuplicateEdgeFilter<EdgeDataType> *  duplicate_filter;$/;"	m	struct:graphchi::shard_flushinfo
dynamicblocks	shards/dynamicdata/memoryshard.hpp	/^        std::vector< dynamicdata_block<ET> * > dynamicblocks;$/;"	m	class:graphchi::memory_shard
dynamicdata_block	shards/dynamicdata/dynamicblock.hpp	/^        dynamicdata_block() : data(NULL), chivecs(NULL) {}$/;"	f	struct:graphchi::dynamicdata_block
dynamicdata_block	shards/dynamicdata/dynamicblock.hpp	/^        dynamicdata_block(int nitems, uint8_t * data, int datasize) : nitems(nitems){$/;"	f	struct:graphchi::dynamicdata_block
dynamicdata_block	shards/dynamicdata/dynamicblock.hpp	/^    struct dynamicdata_block {$/;"	s	namespace:graphchi
dynblock	shards/dynamicdata/slidingshard.hpp	/^        dynamicdata_block<ET> * dynblock;$/;"	m	struct:graphchi::sblock
eBits	util/radixSort.hpp	/^        eBits(int bits, intT offset, F f): _mask((1<<bits)-1),$/;"	f	struct:graphchi::eBits
eBits	util/radixSort.hpp	/^    struct eBits {$/;"	s	namespace:graphchi
ebuffer_size	preprocessing/sharder.hpp	/^        size_t ebuffer_size;$/;"	m	class:graphchi::sharder
edata_flush	engine/dynamic_graphs/graphchi_dynamicgraph_engine.hpp	/^        void edata_flush(char * buf, char * bufptr, std::string & shard_filename, size_t totbytes) {$/;"	f	class:graphchi::graphchi_dynamicgraph_engine
edata_flush	preprocessing/sharder.hpp	/^        void edata_flush(char * buf, char * bufptr, std::string & shard_filename, size_t totbytes) {$/;"	f	class:graphchi::sharder
edata_ptr_for_stream_cont	shards/dynamicdata/memoryshard.hpp	/^        size_t edata_ptr_for_stream_cont() {$/;"	f	class:graphchi::memory_shard
edata_ptr_for_stream_cont	shards/memoryshard.hpp	/^        size_t edata_ptr_for_stream_cont() {$/;"	f	class:graphchi::memory_shard
edatafilesize	shards/dynamicdata/memoryshard.hpp	/^        size_t edatafilesize;$/;"	m	class:graphchi::memory_shard
edatafilesize	shards/dynamicdata/slidingshard.hpp	/^        size_t adjoffset, edataoffset, adjfilesize, edatafilesize;$/;"	m	class:graphchi::sliding_shard
edatafilesize	shards/memoryshard.hpp	/^        size_t edatafilesize;$/;"	m	class:graphchi::memory_shard
edatafilesize	shards/slidingshard.hpp	/^        size_t adjoffset, edataoffset, adjfilesize, edatafilesize;$/;"	m	class:graphchi::sliding_shard
edataoffset	shards/dynamicdata/slidingshard.hpp	/^        size_t adjoffset, edataoffset, adjfilesize, edatafilesize;$/;"	m	class:graphchi::sliding_shard
edataoffset	shards/dynamicdata/slidingshard.hpp	/^        size_t adjoffset, edataoffset;$/;"	m	struct:graphchi::indexentry
edataoffset	shards/slidingshard.hpp	/^        size_t adjoffset, edataoffset, adjfilesize, edatafilesize;$/;"	m	class:graphchi::sliding_shard
edataoffset	shards/slidingshard.hpp	/^        size_t adjoffset, edataoffset;$/;"	m	struct:graphchi::indexentry
edge	api/graph_objects.hpp	/^        graphchi_edge<EdgeDataType> * edge(int i) {$/;"	f	class:graphchi::graphchi_vertex
edge	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        graphchi_edge<EdgeDataType> * edge;$/;"	m	struct:graphlab::GraphLabEdgeWrapper
edge_buffer	engine/dynamic_graphs/graphchi_dynamicgraph_engine.hpp	/^        typedef edge_buffer_flat<EdgeDataType> edge_buffer; $/;"	t	class:graphchi::graphchi_dynamicgraph_engine
edge_buffer_flat	engine/dynamic_graphs/edgebuffers.hpp	/^        edge_buffer_flat() : count(0) {$/;"	f	class:graphchi::edge_buffer_flat
edge_buffer_flat	engine/dynamic_graphs/edgebuffers.hpp	/^    class edge_buffer_flat {$/;"	c	namespace:graphchi
edge_data_type	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        typedef EdgeDataType edge_data_type;$/;"	t	struct:graphlab::GraphLabEdgeWrapper
edge_data_type	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        typedef edge_data edge_data_type;$/;"	t	struct:graphlab::distributed_graph
edge_data_type	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        typedef typename Graph::edge_data_type edge_data_type;$/;"	t	struct:graphlab::ivertex_program
edge_dir_type	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        typedef graphlab::edge_dir_type edge_dir_type;$/;"	t	struct:graphlab::ivertex_program
edge_dir_type	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^    enum edge_dir_type {$/;"	g	namespace:graphlab
edge_t	preprocessing/sharder.hpp	/^        typedef edge_with_value<EdgeDataType> edge_t;$/;"	t	class:graphchi::sharder
edge_t_dst_less	preprocessing/sharder.hpp	/^    bool edge_t_dst_less(const edge_with_value<EdgeDataType> &a, const edge_with_value<EdgeDataType> &b) {$/;"	f	namespace:graphchi
edge_t_src_less	preprocessing/sharder.hpp	/^    bool edge_t_src_less(const edge_with_value<EdgeDataType> &a, const edge_with_value<EdgeDataType> &b) {$/;"	f	namespace:graphchi
edge_type	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        typedef GraphLabEdgeWrapper<vertex_data_type, edge_data_type> edge_type;$/;"	t	struct:graphlab::distributed_graph
edge_type	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        typedef GraphLabEdgeWrapper<vertex_data_type, edge_data_type> edge_type;$/;"	t	struct:graphlab::ivertex_program
edge_type	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        typedef typename GraphLabVertexProgram::edge_type edge_type;$/;"	t	struct:graphlab::GraphLabEdgeAggregatorWrapper
edge_with_value	preprocessing/sharder.hpp	/^        edge_with_value() {}$/;"	f	struct:graphchi::edge_with_value
edge_with_value	preprocessing/sharder.hpp	/^        edge_with_value(vid_t src, vid_t dst, EdgeDataType value) : src(src), dst(dst), value(value) {$/;"	f	struct:graphchi::edge_with_value
edge_with_value	preprocessing/sharder.hpp	/^    struct edge_with_value {$/;"	s	namespace:graphchi
edgecounter	graphchi_types.hpp	/^        size_t edgecounter;$/;"	m	struct:graphchi::shard_index
edgedata	shards/dynamicdata/memoryshard.hpp	/^        char ** edgedata;$/;"	m	class:graphchi::memory_shard
edgedata	shards/memoryshard.hpp	/^        char ** edgedata;$/;"	m	class:graphchi::memory_shard
edgedatasize	preprocessing/sharder.hpp	/^        size_t edgedatasize;$/;"	m	class:graphchi::sharder
edgeptr	shards/dynamicdata/memoryshard.hpp	/^        size_t edgeptr;$/;"	m	class:graphchi::memory_shard
edges_in_shards	engine/dynamic_graphs/graphchi_dynamicgraph_engine.hpp	/^        size_t edges_in_shards;$/;"	m	class:graphchi::graphchi_dynamicgraph_engine
edges_per_block	preprocessing/sharder.hpp	/^        size_t edges_per_block;$/;"	m	class:graphchi::sharder
edges_per_shard	preprocessing/sharder.hpp	/^        size_t edges_per_shard;$/;"	m	class:graphchi::sharder
edgevec	shards/dynamicdata/dynamicblock.hpp	/^        ET * edgevec(int i) {$/;"	f	struct:graphchi::dynamicdata_block
edit_config_file	external/vpiotr-mongoose-cpp/main.c	/^static void edit_config_file(void) {$/;"	f	file:
elapsed_seconds	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        virtual float elapsed_seconds() const {  return gcontext->runtime(); }$/;"	f	class:graphlab::icontext
element_type_t	api/dynamicdata/chivector.hpp	/^    typedef T element_type_t;$/;"	t	class:graphchi::chivector
empty	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^    struct empty {};$/;"	s	namespace:graphlab
empty	util/binary_minheap.hpp	/^    bool empty() { return sz == 0; }$/;"	f	class:binary_minheap
enable_deterministic_parallelism	engine/graphchi_engine.hpp	/^        bool enable_deterministic_parallelism;$/;"	m	class:graphchi::graphchi_engine
enable_parallel_loading	shards/memoryshard.hpp	/^        bool enable_parallel_loading;$/;"	m	class:graphchi::memory_shard
end	shards/dynamicdata/slidingshard.hpp	/^        size_t end;$/;"	m	struct:graphchi::sblock
end	shards/slidingshard.hpp	/^        size_t end;$/;"	m	struct:graphchi::sblock
end_preprocessing	preprocessing/sharder.hpp	/^        void end_preprocessing() {$/;"	f	class:graphchi::sharder
ensure_size	engine/auxdata/degree_data.hpp	/^        void ensure_size(vid_t maxid) {$/;"	f	class:graphchi::degree_data
entries	metrics/metrics.hpp	/^    std::map<std::string, metrics_entry> entries;$/;"	m	class:graphchi::metrics
eptr_less	api/graph_objects.hpp	/^    bool eptr_less(const graphchi_edge<ET> &a, const graphchi_edge<ET> &b) {$/;"	f	namespace:graphchi
errno	external/vpiotr-mongoose-cpp/mongoose.c	65;"	d	file:
event	external/vpiotr-mongoose-cpp/test/embed.c	/^  enum mg_event event;$/;"	m	struct:test_config	typeref:enum:test_config::mg_event	file:
event_handler	external/vpiotr-mongoose-cpp/examples/chat.c	/^static void *event_handler(enum mg_event event,$/;"	f	file:
event_handler	httpadmin/chi_httpadmin.hpp	/^    static void *event_handler(enum mg_event event,$/;"	f	namespace:graphchi
exchange	util/atomic.hpp	/^        T exchange(const T val) { return __sync_lock_test_and_set(&value, val);  }$/;"	f	class:graphchi::atomic
exec	logger/logger.hpp	/^  inline static file_logger& exec(int lineloglevel,const char* file,const char* function, int line) {$/;"	f	struct:log_stream_dispatch
exec	logger/logger.hpp	/^  inline static null_stream exec(int lineloglevel,const char* file,const char* function, int line) {$/;"	f	struct:log_stream_dispatch
exec	logger/logger.hpp	/^  inline static void exec(int loglevel,const char* file,const char* function,$/;"	f	struct:log_dispatch
exec_interval	engine/graphchi_engine.hpp	/^        int exec_interval;$/;"	m	class:graphchi::graphchi_engine
exec_threads	engine/graphchi_engine.hpp	/^        int exec_threads;$/;"	m	class:graphchi::graphchi_engine
exec_updates	engine/graphchi_engine.hpp	/^        virtual void exec_updates(GraphChiProgram<VertexDataType, EdgeDataType, svertex_t> &userprogram,$/;"	f	class:graphchi::graphchi_engine
exec_updates_inmemory_mode	engine/graphchi_engine.hpp	/^        virtual void exec_updates_inmemory_mode(GraphChiProgram<VertexDataType, EdgeDataType, svertex_t> &userprogram,$/;"	f	class:graphchi::graphchi_engine
execthreads	api/graphchi_context.hpp	/^        int execthreads;$/;"	m	struct:graphchi::graphchi_context
execute_sharding	preprocessing/sharder.hpp	/^        int execute_sharding(std::string nshards_string) {$/;"	f	class:graphchi::sharder
exit_flag	external/vpiotr-mongoose-cpp/main.c	/^static int exit_flag;$/;"	v	file:
expected_response	external/vpiotr-mongoose-cpp/mongoose.h	/^  char *expected_response; \/\/ Compared against response$/;"	m	struct:mg_auth_header
expire	external/vpiotr-mongoose-cpp/examples/chat.c	/^  time_t expire;            \/\/ Expiration timestamp, UTC$/;"	m	struct:session	file:
ext_len	external/vpiotr-mongoose-cpp/mongoose.c	/^    size_t ext_len;$/;"	m	struct:__anon5	file:
extension	external/vpiotr-mongoose-cpp/mongoose.c	/^    const char *extension;$/;"	m	struct:__anon5	file:
extension_pool	api/dynamicdata/chivector.hpp	/^class extension_pool {$/;"	c	namespace:graphchi
extensions	api/dynamicdata/chivector.hpp	/^    std::vector<T> * extensions;  \/\/ TODO: use a more memory efficient system?$/;"	m	class:graphchi::chivector
extractMin	util/binary_minheap.hpp	/^    void extractMin() {$/;"	f	class:binary_minheap
f	logger/logger.hpp	/^  file_logger& operator<<(std::ostream& (*f)(std::ostream&)){$/;"	f	class:file_logger
f	logger/logger.hpp	/^  inline null_stream operator<<(std::ostream& (*f)(std::ostream&)) { return null_stream(); }$/;"	f	struct:null_stream
f	metrics/reps/file_reporter.hpp	/^    FILE * f;$/;"	m	class:graphchi::file_reporter
f	metrics/reps/html_reporter.hpp	/^            FILE * f;$/;"	m	class:graphchi::html_reporter
f	preprocessing/sharder.hpp	/^        int f;$/;"	m	struct:graphchi::shovel_merge_source
fail	external/vpiotr-mongoose-cpp/test/exploit.pl	/^sub fail(){$/;"	s
fail	external/vpiotr-mongoose-cpp/test/test.pl	/^sub fail {$/;"	s
fail	external/vpiotr-mongoose-cpp/test/test_all_build_flags.pl	/^sub fail {$/;"	s
fast_bernoulli	api/graphlab2_1_GAS_api/random.hpp	/^            inline bool fast_bernoulli(const double p = double(0.5)) {$/;"	f	class:graphlab::random::generator
fast_bernoulli	api/graphlab2_1_GAS_api/random.hpp	/^        inline bool fast_bernoulli(const double p = double(0.5)) {$/;"	f	namespace:graphlab::random
fast_discrete_rng	api/graphlab2_1_GAS_api/random.hpp	/^            fast_discrete_rng_type fast_discrete_rng;$/;"	m	class:graphlab::random::generator
fast_discrete_rng_type	api/graphlab2_1_GAS_api/random.hpp	/^            typedef boost::rand48              fast_discrete_rng_type;$/;"	t	class:graphlab::random::generator
fast_uniform	api/graphlab2_1_GAS_api/random.hpp	/^            inline NumType fast_uniform(const NumType min, const NumType max) {$/;"	f	class:graphlab::random::generator
fast_uniform	api/graphlab2_1_GAS_api/random.hpp	/^        inline NumType fast_uniform(const NumType min, const NumType max) {$/;"	f	namespace:graphlab::random
fc	external/vpiotr-mongoose-cpp/mongoose.c	/^static struct mg_connection *fc(struct mg_context *ctx) {$/;"	f	file:
fd	engine/auxdata/dynamicdata/vertex_data_dynamic.hpp	/^        int fd;$/;"	m	struct:graphchi::vdblock_t
fd	io/stripedio.hpp	/^        int fd;$/;"	m	struct:graphchi::iotask
fdopen	external/vpiotr-mongoose-cpp/mongoose.c	117;"	d	file:
file_exists	api/chifilenames.hpp	/^    static bool file_exists(std::string sname) {$/;"	f	namespace:graphchi
file_logger	logger/logger.hpp	/^    file_logger() {$/;"	f	class:file_logger
file_logger	logger/logger.hpp	/^class file_logger{$/;"	c
file_name	external/vpiotr-mongoose-cpp/mongoose.c	/^    char *file_name;$/;"	m	struct:de	file:
file_reporter	metrics/reps/file_reporter.hpp	/^    file_reporter() {}$/;"	f	class:graphchi::file_reporter
file_reporter	metrics/reps/file_reporter.hpp	/^    file_reporter(std::string fname) : filename(fname) {$/;"	f	class:graphchi::file_reporter
file_reporter	metrics/reps/file_reporter.hpp	/^  class file_reporter : public imetrics_reporter {$/;"	c	namespace:graphchi
filedesc	engine/auxdata/degree_data.hpp	/^        int filedesc;$/;"	m	class:graphchi::degree_data
filedesc	engine/auxdata/vertex_data.hpp	/^        int filedesc;$/;"	m	class:graphchi::vertex_data_store
filedesc	io/stripedio.hpp	/^        int filedesc;$/;"	m	struct:graphchi::mmap_info
filename	api/graphchi_context.hpp	/^        std::string filename;$/;"	m	struct:graphchi::graphchi_context
filename	engine/auxdata/degree_data.hpp	/^        std::string filename;$/;"	m	class:graphchi::degree_data
filename	engine/auxdata/vertex_data.hpp	/^        std::string filename;$/;"	m	class:graphchi::vertex_data_store
filename	io/stripedio.hpp	/^        std::string filename;    $/;"	m	struct:graphchi::io_descriptor
filename	metrics/reps/file_reporter.hpp	/^    std::string filename;$/;"	m	class:graphchi::file_reporter
filename	metrics/reps/html_reporter.hpp	/^            std::string filename;$/;"	m	class:graphchi::html_reporter
filename_adj	shards/dynamicdata/memoryshard.hpp	/^        std::string filename_adj;$/;"	m	class:graphchi::memory_shard
filename_adj	shards/dynamicdata/slidingshard.hpp	/^        std::string filename_adj;$/;"	m	class:graphchi::sliding_shard
filename_adj	shards/memoryshard.hpp	/^        std::string filename_adj;$/;"	m	class:graphchi::memory_shard
filename_adj	shards/slidingshard.hpp	/^        std::string filename_adj;$/;"	m	class:graphchi::sliding_shard
filename_config	api/chifilenames.hpp	/^    static std::string filename_config() {$/;"	f	namespace:graphchi
filename_config_local	api/chifilenames.hpp	/^    static std::string filename_config_local() {$/;"	f	namespace:graphchi
filename_degree_data	api/chifilenames.hpp	/^    static std::string filename_degree_data(std::string basefilename)  {$/;"	f	namespace:graphchi
filename_edata	shards/dynamicdata/memoryshard.hpp	/^        std::string filename_edata;$/;"	m	class:graphchi::memory_shard
filename_edata	shards/dynamicdata/slidingshard.hpp	/^        std::string filename_edata;$/;"	m	class:graphchi::sliding_shard
filename_edata	shards/memoryshard.hpp	/^        std::string filename_edata;$/;"	m	class:graphchi::memory_shard
filename_edata	shards/slidingshard.hpp	/^        std::string filename_edata;$/;"	m	class:graphchi::sliding_shard
filename_intervals	api/chifilenames.hpp	/^    static std::string filename_intervals(std::string basefilename, int nshards) {$/;"	f	namespace:graphchi
filename_shard_adj	api/chifilenames.hpp	/^    static std::string filename_shard_adj(std::string basefilename, int p, int nshards) {$/;"	f	namespace:graphchi
filename_shard_adjidx	api/chifilenames.hpp	/^    static std::string filename_shard_adjidx(std::string adjfilename) {$/;"	f	namespace:graphchi
filename_shard_edata	api/chifilenames.hpp	/^    static std::string filename_shard_edata(std::string basefilename, int p, int nshards) {$/;"	f	namespace:graphchi
filename_shard_edata_block	api/chifilenames.hpp	/^    static std::string filename_shard_edata_block(std::string edata_shardname, int blockid, size_t blocksize) {$/;"	f	namespace:graphchi
filename_vertex_data	api/chifilenames.hpp	/^    static std::string filename_vertex_data(std::string basefilename) {$/;"	f	namespace:graphchi
fileno	external/vpiotr-mongoose-cpp/mongoose.c	124;"	d	file:
filepos	graphchi_types.hpp	/^        size_t filepos;$/;"	m	struct:graphchi::shard_index
filter_max_vertex	preprocessing/sharder.hpp	/^        vid_t filter_max_vertex;$/;"	m	class:graphchi::sharder
finalize_function	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        FinalizerType finalize_function;$/;"	m	struct:graphlab::GraphLabEdgeAggregatorWrapper
find	api/dynamicdata/chivector.hpp	/^    int find(T val) {$/;"	f	class:graphchi::chivector
find_shards	api/chifilenames.hpp	/^    static int find_shards(std::string base_filename, std::string shard_string="auto") {$/;"	f	namespace:graphchi
finish	preprocessing/sharder.hpp	/^        void finish() {$/;"	f	struct:graphchi::shovel_merge_source
finish_after_iters	engine/dynamic_graphs/graphchi_dynamicgraph_engine.hpp	/^        void finish_after_iters(int extra_iters) {$/;"	f	class:graphchi::graphchi_dynamicgraph_engine
finish_shard	preprocessing/sharder.hpp	/^        virtual void finish_shard(int shard, edge_t * shovelbuf, size_t shovelsize) {$/;"	f	class:graphchi::sharder
finish_sharding	preprocessing/sharder.hpp	/^        size_t finish_sharding() {$/;"	f	class:graphchi::sharded_graph_output
first_bit_in_block	util/dense_bitset.hpp	/^        inline size_t first_bit_in_block(const size_t &block) {$/;"	f	class:graphchi::dense_bitset
first_iteration	api/functional/functional_bulksync.hpp	/^        void first_iteration(graphchi_context &ginfo) {$/;"	f	class:graphchi::functional_vertex_unweighted_bulksync
first_iteration	api/functional/functional_semisync.hpp	/^    void first_iteration(graphchi_context &gcontext_) {$/;"	f	class:graphchi::functional_vertex_unweighted_semisync
first_pass_finished	io/stripedio.hpp	/^        void first_pass_finished() {$/;"	f	class:graphchi::stripedio
first_vertex_id	engine/auxdata/degree_data.hpp	/^        vid_t first_vertex_id() {$/;"	f	class:graphchi::degree_data
first_vertex_id	engine/auxdata/dynamicdata/vertex_data_dynamic.hpp	/^        vid_t first_vertex_id() {$/;"	f	class:graphchi::vertex_data_store
first_vertex_id	engine/auxdata/vertex_data.hpp	/^        vid_t first_vertex_id() {$/;"	f	class:graphchi::vertex_data_store
flockfile	external/vpiotr-mongoose-cpp/mongoose.c	120;"	d	file:
flush	preprocessing/sharder.hpp	/^        void flush() {$/;"	f	struct:graphchi::shard_flushinfo
flush	shards/dynamicdata/slidingshard.hpp	/^        void flush() {$/;"	f	class:graphchi::sliding_shard
flush	shards/slidingshard.hpp	/^        void flush() {$/;"	f	class:graphchi::sliding_shard
flush_shovel	preprocessing/sharder.hpp	/^        void flush_shovel(bool async=true) {$/;"	f	class:graphchi::sharder
foreach	api/graphlab2_1_GAS_api/graphlab.hpp	64;"	d
foreach_vertices	api/vertex_aggregator.hpp	/^    void foreach_vertices(std::string basefilename, vid_t fromv, vid_t tov, VCallback<VertexDataType> &callback) {$/;"	f	namespace:graphchi
forward_body_data	external/vpiotr-mongoose-cpp/mongoose.c	/^static int forward_body_data(struct mg_connection *conn, FILE *fp,$/;"	f	file:
fout	logger/logger.hpp	/^  std::ofstream fout;$/;"	m	class:file_logger
free_after	io/stripedio.hpp	/^        bool free_after;$/;"	m	struct:graphchi::iotask
free_context	external/vpiotr-mongoose-cpp/mongoose.c	/^static void free_context(struct mg_context *ctx) {$/;"	f	file:
fseeko	external/vpiotr-mongoose-cpp/mongoose.c	116;"	d	file:
full	io/stripedio.hpp	/^        bool full;$/;"	m	class:graphchi::block_cache
func	external/vpiotr-mongoose-cpp/bindings/python/mongoose.py	/^            def func(event, connection, request_info):$/;"	f	function:Mongoose.__init__
func	external/vpiotr-mongoose-cpp/test/embed.c	/^  void (*func)(struct mg_connection *, const struct mg_request_info *);$/;"	m	struct:test_config	file:
function.pa	external/vpiotr-mongoose-cpp/examples/html/jquery.js	/^j.length;n<r;n++)for(k=0;k<u.length;k++){i=u[k];if(j[n].selector===i.selector){o=j[n].elem;f=null;if(i.preType==="mouseenter"||i.preType==="mouseleave")f=c(a.relatedTarget).closest(i.selector)[0];if(!f||f!==o)d.push({elem:o,handleObj:i})}}n=0;for(r=d.length;n<r;n++){j=d[n];a.currentTarget=j.elem;a.data=j.handleObj.data;a.handleObj=j.handleObj;if(j.handleObj.origHandler.apply(j.elem,e)===false){b=false;break}}return b}}function pa(a,b){return"live."+(a&&a!=="*"?a+".":"")+b.replace(\/\\.\/g,"`").replace(\/ \/g,$/;"	f
function.qa	external/vpiotr-mongoose-cpp/examples/html/jquery.js	/^"&")}function qa(a){return!a||!a.parentNode||a.parentNode.nodeType===11}function ra(a,b){var d=0;b.each(function(){if(this.nodeName===(a[d]&&a[d].nodeName)){var f=c.data(a[d++]),e=c.data(this,f);if(f=f&&f.events){delete e.handle;e.events={};for(var j in f)for(var i in f[j])c.event.add(this,j,f[j][i],f[j][i].data)}}})}function sa(a,b,d){var f,e,j;b=b&&b[0]?b[0].ownerDocument||b[0]:s;if(a.length===1&&typeof a[0]==="string"&&a[0].length<512&&b===s&&!ta.test(a[0])&&(c.support.checkClone||!ua.test(a[0]))){e=$/;"	f
functional_engine	engine/functional/functional_engine.hpp	/^        functional_engine(std::string base_filename, int nshards, bool selective_scheduling, metrics &_m) :$/;"	f	class:graphchi::functional_engine
functional_engine	engine/functional/functional_engine.hpp	/^    class functional_engine : public graphchi_engine<VertexDataType, EdgeDataType,  fvertex_t> {$/;"	c	namespace:graphchi
functional_kernel	api/functional/functional_api.hpp	/^        functional_kernel() {}$/;"	f	struct:graphchi::functional_kernel
functional_kernel	api/functional/functional_api.hpp	/^     struct functional_kernel {$/;"	s	namespace:graphchi
functional_vertex_unweighted_bulksync	api/functional/functional_bulksync.hpp	/^        functional_vertex_unweighted_bulksync() : graphchi_vertex<VT, ET> () {}$/;"	f	class:graphchi::functional_vertex_unweighted_bulksync
functional_vertex_unweighted_bulksync	api/functional/functional_bulksync.hpp	/^        functional_vertex_unweighted_bulksync(graphchi_context &ginfo, vid_t _id, int indeg, int outdeg) : $/;"	f	class:graphchi::functional_vertex_unweighted_bulksync
functional_vertex_unweighted_bulksync	api/functional/functional_bulksync.hpp	/^        functional_vertex_unweighted_bulksync(vid_t _id, $/;"	f	class:graphchi::functional_vertex_unweighted_bulksync
functional_vertex_unweighted_bulksync	api/functional/functional_bulksync.hpp	/^    class functional_vertex_unweighted_bulksync : public graphchi_vertex<typename KERNEL::VertexDataType, PairContainer<typename KERNEL::EdgeDataType> > {$/;"	c	namespace:graphchi
functional_vertex_unweighted_semisync	api/functional/functional_semisync.hpp	/^    functional_vertex_unweighted_semisync() {}$/;"	f	class:graphchi::functional_vertex_unweighted_semisync
functional_vertex_unweighted_semisync	api/functional/functional_semisync.hpp	/^    functional_vertex_unweighted_semisync(graphchi_context &ginfo, vid_t _id, int indeg, int outdeg) { $/;"	f	class:graphchi::functional_vertex_unweighted_semisync
functional_vertex_unweighted_semisync	api/functional/functional_semisync.hpp	/^    functional_vertex_unweighted_semisync(vid_t _id, $/;"	f	class:graphchi::functional_vertex_unweighted_semisync
functional_vertex_unweighted_semisync	api/functional/functional_semisync.hpp	/^class functional_vertex_unweighted_semisync  {$/;"	c	namespace:graphchi
funlockfile	external/vpiotr-mongoose-cpp/mongoose.c	121;"	d	file:
fvertex_t	api/functional/functional_bulksync.hpp	/^        typedef functional_vertex_unweighted_bulksync<KERNEL> fvertex_t;$/;"	t	class:graphchi::FunctionalProgramProxyBulkSync
fvertex_t	api/functional/functional_semisync.hpp	/^    typedef functional_vertex_unweighted_semisync<KERNEL> fvertex_t;$/;"	t	class:graphchi::FunctionalProgramProxySemisync
gamma	api/graphlab2_1_GAS_api/random.hpp	/^            inline double gamma(const double alpha = double(1)) {$/;"	f	class:graphlab::random::generator
gamma	api/graphlab2_1_GAS_api/random.hpp	/^        inline double gamma(const double alpha = double(1)) {$/;"	f	namespace:graphlab::random
gather	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        virtual gather_type gather(icontext_type& context, $/;"	f	struct:graphlab::ivertex_program
gather_edges	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        virtual edge_dir_type gather_edges(icontext_type& context,$/;"	f	struct:graphlab::ivertex_program
gather_type	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        typedef GatherType gather_type;$/;"	t	class:graphlab::icontext
gather_type	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        typedef GatherType gather_type;$/;"	t	struct:graphlab::ivertex_program
gather_type	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        typedef typename GraphLabVertexProgram::gather_type gather_type;$/;"	t	struct:graphlab::GraphLabEdgeAggregatorWrapper
gather_type	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        typedef typename GraphLabVertexProgram::gather_type gather_type;$/;"	t	struct:graphlab::GraphLabWrapper
gaussian	api/graphlab2_1_GAS_api/random.hpp	/^            inline double gaussian(const double mean = double(0),$/;"	f	class:graphlab::random::generator
gaussian	api/graphlab2_1_GAS_api/random.hpp	/^        inline double gaussian(const double mean = double(0), $/;"	f	namespace:graphlab::random
gcontext	api/functional/functional_bulksync.hpp	/^        graphchi_context * gcontext;$/;"	m	class:graphchi::functional_vertex_unweighted_bulksync
gcontext	api/functional/functional_semisync.hpp	/^    graphchi_context * gcontext;$/;"	m	class:graphchi::functional_vertex_unweighted_semisync
gcontext	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        graphchi_context * gcontext;$/;"	m	class:graphlab::icontext
gen	api/graphlab2_1_GAS_api/random.hpp	/^                generator& gen;$/;"	m	struct:graphlab::random::generator::shuffle_functor
generateInfoContent	external/vpiotr-mongoose-cpp/test/mongotest.cpp	/^    const string generateInfoContent(const MongooseRequest &request) {$/;"	f	class:TestMongoServer
generate_bit_masks	util/dense_bitset.hpp	/^        void generate_bit_masks() {$/;"	f	class:graphchi::dense_bitset
generate_session_id	external/vpiotr-mongoose-cpp/examples/chat.c	/^static void generate_session_id(char *buf, const char *random,$/;"	f	file:
generatedata	tests/test_dynamicedata_loader.cpp	/^void generatedata(std::string filename) {$/;"	f
generator	api/graphlab2_1_GAS_api/random.hpp	/^            generator() {$/;"	f	class:graphlab::random::generator
generator	api/graphlab2_1_GAS_api/random.hpp	/^        class generator {$/;"	c	namespace:graphlab::random
generators	api/graphlab2_1_GAS_api/random.cpp	/^            std::set<generator*> generators;$/;"	m	struct:graphlab::random::source_registry	file:
get	api/dynamicdata/chivector.hpp	/^    T get(int idx) {$/;"	f	class:graphchi::chivector
get	metrics/metrics.hpp	/^    inline metrics_entry get(std::string key) {$/;"	f	class:graphchi::metrics
get	util/dense_bitset.hpp	/^        inline bool get(uint32_t b) const{$/;"	f	class:graphchi::dense_bitset
getCookie	external/vpiotr-mongoose-cpp/mongcpp.cpp	/^bool MongooseConnection::getCookie(const std::string &name, std::string &output) const$/;"	f	class:MongooseConnection
getHeader	external/vpiotr-mongoose-cpp/mongcpp.cpp	/^bool MongooseConnection::getHeader(const std::string &name, std::string &output) const$/;"	f	class:MongooseConnection
getHeaderValue	external/vpiotr-mongoose-cpp/mongcpp.cpp	/^bool MongooseResponse::getHeaderValue(const std::string &name, std::string &output)$/;"	f	class:MongooseResponse
getHttpStatusDesc	external/vpiotr-mongoose-cpp/mongcpp.cpp	/^const char *MongooseResponse::getHttpStatusDesc(int statusCode)$/;"	f	class:MongooseResponse
getHttpVersion	external/vpiotr-mongoose-cpp/mongcpp.cpp	/^const std::string MongooseRequest::getHttpVersion() const$/;"	f	class:MongooseRequest
getInfo	external/vpiotr-mongoose-cpp/mongcpp.cpp	/^mg_request_info* MongooseRequest::getInfo() const$/;"	f	class:MongooseRequest
getInfo	external/vpiotr-mongoose-cpp/mongcpp.cpp	/^struct mg_connection *MongooseConnection::getInfo()$/;"	f	class:MongooseConnection
getLogMessage	external/vpiotr-mongoose-cpp/mongcpp.cpp	/^const std::string MongooseRequest::getLogMessage() const$/;"	f	class:MongooseRequest
getOptionValue	external/vpiotr-mongoose-cpp/mongcpp.cpp	/^bool MongooseServer::getOptionValue(const std::string &name, std::string &value) const$/;"	f	class:MongooseServer
getOptionValue	external/vpiotr-mongoose-cpp/mongcpp.cpp	/^void MongooseServer::getOptionValue(const std::string &name, std::string &value, const std::string &defValue) const$/;"	f	class:MongooseServer
getOptions	external/vpiotr-mongoose-cpp/mongcpp.cpp	/^void MongooseServer::getOptions(ServerOptionSet &options) const$/;"	f	class:MongooseServer
getQueryString	external/vpiotr-mongoose-cpp/mongcpp.cpp	/^const std::string MongooseRequest::getQueryString() const$/;"	f	class:MongooseRequest
getRemoteIp	external/vpiotr-mongoose-cpp/mongcpp.cpp	/^long MongooseRequest::getRemoteIp() const$/;"	f	class:MongooseRequest
getRemotePort	external/vpiotr-mongoose-cpp/mongcpp.cpp	/^int MongooseRequest::getRemotePort() const$/;"	f	class:MongooseRequest
getRemoteUser	external/vpiotr-mongoose-cpp/mongcpp.cpp	/^const std::string MongooseRequest::getRemoteUser() const$/;"	f	class:MongooseRequest
getRequestMethod	external/vpiotr-mongoose-cpp/mongcpp.cpp	/^const std::string MongooseRequest::getRequestMethod() const$/;"	f	class:MongooseRequest
getRequestMethodCode	external/vpiotr-mongoose-cpp/mongcpp.cpp	/^MongooseRequestMethodCode MongooseRequest::getRequestMethodCode() const$/;"	f	class:MongooseRequest
getStatusCode	external/vpiotr-mongoose-cpp/mongcpp.cpp	/^int MongooseRequest::getStatusCode() const$/;"	f	class:MongooseRequest
getUri	external/vpiotr-mongoose-cpp/mongcpp.cpp	/^const std::string MongooseRequest::getUri() const$/;"	f	class:MongooseRequest
getValidOptions	external/vpiotr-mongoose-cpp/mongcpp.cpp	/^void MongooseServer::getValidOptions(ServerOptionList &output)$/;"	f	class:MongooseServer
getVar	external/vpiotr-mongoose-cpp/mongcpp.cpp	/^bool MongooseRequest::getVar(const std::string &name, std::string &output) const$/;"	f	class:MongooseRequest
getVersion	external/vpiotr-mongoose-cpp/mongcpp.cpp	/^std::string MongooseServer::getVersion()$/;"	f	class:MongooseServer
get_adjoffset	shards/dynamicdata/slidingshard.hpp	/^        size_t get_adjoffset() { return adjoffset; }$/;"	f	class:graphchi::sliding_shard
get_adjoffset	shards/slidingshard.hpp	/^        size_t get_adjoffset() { return adjoffset; }$/;"	f	class:graphchi::sliding_shard
get_block_cache	io/stripedio.hpp	/^        block_cache & get_block_cache() {$/;"	f	class:graphchi::stripedio
get_block_uncompressed_size	shards/dynamicdata/dynamicblock.hpp	/^    int get_block_uncompressed_size(std::string blockfilename, int defaultsize) {$/;"	f	namespace:graphchi
get_cached	io/stripedio.hpp	/^        void * get_cached(std::string filename) {$/;"	f	class:graphchi::block_cache
get_config_option_double	util/cmdopts.hpp	/^    static double VARIABLE_IS_NOT_USED get_config_option_double(const char *option_name, double default_value) {$/;"	f	namespace:graphchi
get_config_option_int	util/cmdopts.hpp	/^    static int VARIABLE_IS_NOT_USED get_config_option_int(const char *option_name) {$/;"	f	namespace:graphchi
get_config_option_int	util/cmdopts.hpp	/^    static int VARIABLE_IS_NOT_USED get_config_option_int(const char *option_name, int default_value) {$/;"	f	namespace:graphchi
get_config_option_long	util/cmdopts.hpp	/^    static uint64_t VARIABLE_IS_NOT_USED get_config_option_long(const char *option_name, uint64_t default_value) {$/;"	f	namespace:graphchi
get_config_option_string	util/cmdopts.hpp	/^    static  std::string VARIABLE_IS_NOT_USED get_config_option_string(const char *option_name,$/;"	f	namespace:graphchi
get_config_option_string	util/cmdopts.hpp	/^    static std::string VARIABLE_IS_NOT_USED get_config_option_string(const char *option_name) {$/;"	f	namespace:graphchi
get_context	engine/graphchi_engine.hpp	/^        graphchi_context &get_context() {$/;"	f	class:graphchi::graphchi_engine
get_data	api/functional/functional_semisync.hpp	/^    VT get_data() {$/;"	f	class:graphchi::functional_vertex_unweighted_semisync
get_data	api/graph_objects.hpp	/^        EdgeDataType get_data() {$/;"	f	class:graphchi::graphchi_edge
get_data	api/graph_objects.hpp	/^        VertexDataType get_data() {$/;"	f	class:graphchi::graphchi_vertex
get_degree	engine/auxdata/degree_data.hpp	/^        inline degree get_degree(vid_t vertexid) {$/;"	f	class:graphchi::degree_data
get_delta	api/graphchi_context.hpp	/^        double get_delta() {$/;"	f	struct:graphchi::graphchi_context
get_dirname	preprocessing/conversions.hpp	/^    static VARIABLE_IS_NOT_USED std::string get_dirname(std::string arg) {$/;"	f	namespace:graphchi
get_document_root	external/vpiotr-mongoose-cpp/mongoose.c	/^static int get_document_root(const struct mg_connection *conn,$/;"	f	file:
get_edataoffset	shards/dynamicdata/slidingshard.hpp	/^        size_t get_edataoffset() { return edataoffset; }$/;"	f	class:graphchi::sliding_shard
get_edataoffset	shards/slidingshard.hpp	/^        size_t get_edataoffset() { return edataoffset; }$/;"	f	class:graphchi::sliding_shard
get_filename	preprocessing/conversions.hpp	/^    static std::string VARIABLE_IS_NOT_USED get_filename(std::string arg) {$/;"	f	namespace:graphchi
get_filesize	io/stripedio.hpp	/^    static size_t get_filesize(std::string filename) {$/;"	f	namespace:graphchi
get_header	external/vpiotr-mongoose-cpp/bindings/csharp/mongoose.cs	/^	public string get_header(string header_name) {$/;"	m	class:MongooseConnection
get_header	external/vpiotr-mongoose-cpp/bindings/python/mongoose.py	/^    def get_header(self, name):$/;"	m	class:Connection
get_header	external/vpiotr-mongoose-cpp/mongoose.c	/^static const char *get_header(const struct mg_request_info *ri,$/;"	f	file:
get_info_json	engine/dynamic_graphs/graphchi_dynamicgraph_engine.hpp	/^        std::string get_info_json() {$/;"	f	class:graphchi::graphchi_dynamicgraph_engine
get_info_json	engine/graphchi_engine.hpp	/^        std::string get_info_json() {$/;"	f	class:graphchi::graphchi_engine
get_info_json	shards/dynamicdata/slidingshard.hpp	/^        std::string get_info_json() {$/;"	f	class:graphchi::sliding_shard
get_info_json	shards/slidingshard.hpp	/^        std::string get_info_json() {$/;"	f	class:graphchi::sliding_shard
get_interval	engine/graphchi_engine.hpp	/^        virtual std::pair<vid_t, vid_t> get_interval(int i) {$/;"	f	class:graphchi::graphchi_engine
get_interval_end	engine/graphchi_engine.hpp	/^        vid_t get_interval_end(int i) {$/;"	f	class:graphchi::graphchi_engine
get_interval_start	engine/graphchi_engine.hpp	/^        vid_t get_interval_start(int i) {$/;"	f	class:graphchi::graphchi_engine
get_intervals	engine/graphchi_engine.hpp	/^        virtual std::vector< std::pair<vid_t, vid_t> > get_intervals() {$/;"	f	class:graphchi::graphchi_engine
get_iomanager	engine/graphchi_engine.hpp	/^        stripedio * get_iomanager() {$/;"	f	class:graphchi::graphchi_engine
get_lock	api/functional/functional_defs.hpp	/^    mutex & get_lock(vid_t vertexid) {$/;"	f	namespace:graphchi
get_log_file	logger/logger.hpp	/^  std::string get_log_file(void) {$/;"	f	class:file_logger
get_log_level	logger/logger.hpp	/^  int get_log_level() {$/;"	f	class:file_logger
get_log_to_console	logger/logger.hpp	/^  bool get_log_to_console() {$/;"	f	class:file_logger
get_membudget_mb	engine/graphchi_engine.hpp	/^        int get_membudget_mb() {$/;"	f	class:graphchi::graphchi_engine
get_mime_type	external/vpiotr-mongoose-cpp/mongoose.c	/^static void get_mime_type(struct mg_context *ctx, const char *path,$/;"	f	file:
get_mmaped_file	io/stripedio.hpp	/^        void * get_mmaped_file(std::string &filename, bool write) {$/;"	f	class:graphchi::stripedio
get_nshards	engine/graphchi_engine.hpp	/^        virtual int get_nshards() {$/;"	f	class:graphchi::graphchi_engine
get_num_of_log_entries	external/vpiotr-mongoose-cpp/test/test.pl	/^sub get_num_of_log_entries {$/;"	s
get_num_vertices	api/chifilenames.hpp	/^    static VARIABLE_IS_NOT_USED size_t get_num_vertices(std::string basefilename) {$/;"	f	namespace:graphchi
get_option	external/vpiotr-mongoose-cpp/bindings/csharp/mongoose.cs	/^	public string get_option(string option_name) {$/;"	m	class:Mongoose
get_option	external/vpiotr-mongoose-cpp/bindings/python/mongoose.py	/^    def get_option(self, name):$/;"	m	class:Mongoose
get_option_float	util/cmdopts.hpp	/^    static float VARIABLE_IS_NOT_USED get_option_float(const char *option_name, float default_value)$/;"	f	namespace:graphchi
get_option_index	external/vpiotr-mongoose-cpp/mongoose.c	/^static int get_option_index(const char *name) {$/;"	f	file:
get_option_int	util/cmdopts.hpp	/^    static int VARIABLE_IS_NOT_USED get_option_int(const char *option_name)$/;"	f	namespace:graphchi
get_option_int	util/cmdopts.hpp	/^    static int VARIABLE_IS_NOT_USED get_option_int(const char *option_name, int default_value)$/;"	f	namespace:graphchi
get_option_long	util/cmdopts.hpp	/^    static uint64_t VARIABLE_IS_NOT_USED get_option_long(const char *option_name, uint64_t default_value)$/;"	f	namespace:graphchi
get_option_string	util/cmdopts.hpp	/^    static std::string VARIABLE_IS_NOT_USED get_option_string(const char *option_name)$/;"	f	namespace:graphchi
get_option_string	util/cmdopts.hpp	/^    static std::string VARIABLE_IS_NOT_USED get_option_string(const char *option_name,$/;"	f	namespace:graphchi
get_option_string_interactive	util/cmdopts.hpp	/^    static std::string VARIABLE_IS_NOT_USED get_option_string_interactive(const char *option_name, std::string options)$/;"	f	namespace:graphchi
get_part_str	api/chifilenames.hpp	/^    static std::string VARIABLE_IS_NOT_USED get_part_str(int p, int nshards) {$/;"	f	namespace:graphchi
get_qsvar	external/vpiotr-mongoose-cpp/examples/chat.c	/^static void get_qsvar(const struct mg_request_info *request_info,$/;"	f	file:
get_qsvar	httpadmin/chi_httpadmin.hpp	/^    static void get_qsvar(const struct mg_request_info *request_info,$/;"	f	namespace:graphchi
get_random_source_key	api/graphlab2_1_GAS_api/random.cpp	/^        static pthread_key_t get_random_source_key() {$/;"	f	namespace:graphlab::random
get_request_len	external/vpiotr-mongoose-cpp/mongoose.c	/^static int get_request_len(const char *buf, int buflen) {$/;"	f	file:
get_session	external/vpiotr-mongoose-cpp/examples/chat.c	/^static struct session *get_session(const struct mg_connection *conn) {$/;"	f	file:
get_session_filename	io/stripedio.hpp	/^        std::string & get_session_filename(int session) {$/;"	f	class:graphchi::stripedio
get_shard_edata_filesize	api/chifilenames.hpp	/^    static size_t get_shard_edata_filesize(std::string edata_shardname) {$/;"	f	namespace:graphchi
get_shard_for	engine/dynamic_graphs/graphchi_dynamicgraph_engine.hpp	/^        int get_shard_for(vid_t dst) {$/;"	f	class:graphchi::graphchi_dynamicgraph_engine
get_source	api/graphlab2_1_GAS_api/random.cpp	/^        generator& get_source() {$/;"	f	namespace:graphlab::random
get_top_vertices	util/toplist.hpp	/^    std::vector<vertex_value<VertexDataType> > get_top_vertices(std::string basefilename, int ntop, vid_t from=0, vid_t to=0) {$/;"	f	namespace:graphchi
get_var	external/vpiotr-mongoose-cpp/bindings/csharp/mongoose.cs	/^	public string get_var(string header_name) {$/;"	m	class:MongooseConnection
get_var	external/vpiotr-mongoose-cpp/bindings/python/mongoose.py	/^    def get_var(self, data, name):$/;"	m	class:Connection
get_vector	api/graph_objects.hpp	/^        EdgeDataType * get_vector() {  \/\/ EdgeDataType is a chivector$/;"	f	class:graphchi::graphchi_edge
get_vector	api/graph_objects.hpp	/^        VertexDataType * get_vector() {$/;"	f	class:graphchi::graphchi_vertex
getdir	preprocessing/conversions.hpp	/^    static int VARIABLE_IS_NOT_USED getdir (std::string dir, std::vector<std::string> &files)$/;"	f	namespace:graphchi
global	api/graphlab2_1_GAS_api/random.cpp	/^            static nondet_generator& global() {$/;"	f	class:graphlab::random::nondet_generator
global	api/graphlab2_1_GAS_api/random.cpp	/^            static source_registry& global() {$/;"	f	struct:graphlab::random::source_registry
global_logger	logger/logger.hpp	/^static file_logger& global_logger() {$/;"	f
graph_type	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        typedef Graph graph_type;$/;"	t	struct:graphlab::ivertex_program
graph_type	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        typedef GraphType graph_type;   $/;"	t	class:graphlab::icontext
graph_type	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        typedef typename GraphLabVertexProgram::graph_type graph_type;$/;"	t	struct:graphlab::GraphLabEdgeAggregatorWrapper
graph_type	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        typedef typename GraphLabVertexProgram::graph_type graph_type;$/;"	t	struct:graphlab::GraphLabWrapper
graphchi	api/chifilenames.hpp	/^namespace graphchi {$/;"	n
graphchi	api/dynamicdata/chivector.hpp	/^namespace graphchi {$/;"	n
graphchi	api/functional/functional_api.hpp	/^namespace graphchi {$/;"	n
graphchi	api/functional/functional_bulksync.hpp	/^namespace graphchi {$/;"	n
graphchi	api/functional/functional_defs.hpp	/^namespace graphchi {$/;"	n
graphchi	api/functional/functional_semisync.hpp	/^namespace graphchi {$/;"	n
graphchi	api/graph_objects.hpp	/^namespace graphchi {$/;"	n
graphchi	api/graphchi_context.hpp	/^namespace graphchi {$/;"	n
graphchi	api/graphchi_program.hpp	/^namespace graphchi {$/;"	n
graphchi	api/ischeduler.hpp	/^namespace graphchi {$/;"	n
graphchi	api/vertex_aggregator.hpp	/^namespace graphchi {$/;"	n
graphchi	engine/auxdata/degree_data.hpp	/^namespace graphchi {$/;"	n
graphchi	engine/auxdata/dynamicdata/vertex_data_dynamic.hpp	/^namespace graphchi {$/;"	n
graphchi	engine/auxdata/vertex_data.hpp	/^namespace graphchi {$/;"	n
graphchi	engine/bitset_scheduler.hpp	/^namespace graphchi {$/;"	n
graphchi	engine/dynamic_graphs/edgebuffers.hpp	/^namespace graphchi {$/;"	n
graphchi	engine/dynamic_graphs/graphchi_dynamicgraph_engine.hpp	/^namespace graphchi {$/;"	n
graphchi	engine/functional/functional_engine.hpp	/^namespace graphchi {$/;"	n
graphchi	engine/graphchi_engine.hpp	/^namespace graphchi {$/;"	n
graphchi	graphchi_basic_includes.hpp	/^namespace graphchi {$/;"	n
graphchi	graphchi_types.hpp	/^namespace graphchi {$/;"	n
graphchi	httpadmin/chi_httpadmin.hpp	/^namespace graphchi {$/;"	n
graphchi	httpadmin/plotter.hpp	/^namespace graphchi {$/;"	n
graphchi	io/stripedio.hpp	/^namespace graphchi {$/;"	n
graphchi	metrics/imetrics_reporter.hpp	/^namespace graphchi {$/;"	n
graphchi	metrics/metrics.hpp	/^namespace graphchi {$/;"	n
graphchi	metrics/reps/basic_reporter.hpp	/^namespace graphchi {$/;"	n
graphchi	metrics/reps/file_reporter.hpp	/^namespace graphchi {$/;"	n
graphchi	metrics/reps/html_reporter.hpp	/^namespace graphchi {$/;"	n
graphchi	metrics/reps/null_reporter.hpp	/^namespace graphchi {$/;"	n
graphchi	output/output.hpp	/^namespace graphchi {$/;"	n
graphchi	preprocessing/conversions.hpp	/^namespace graphchi {$/;"	n
graphchi	preprocessing/sharder.hpp	/^namespace graphchi {$/;"	n
graphchi	preprocessing/util/orderbydegree.hpp	/^namespace graphchi {$/;"	n
graphchi	shards/dynamicdata/dynamicblock.hpp	/^namespace graphchi {$/;"	n
graphchi	shards/dynamicdata/memoryshard.hpp	/^namespace graphchi {$/;"	n
graphchi	shards/dynamicdata/slidingshard.hpp	/^namespace graphchi {$/;"	n
graphchi	shards/memoryshard.hpp	/^namespace graphchi {$/;"	n
graphchi	shards/slidingshard.hpp	/^namespace graphchi {$/;"	n
graphchi	util/atomic.hpp	/^namespace graphchi {$/;"	n
graphchi	util/cmdopts.hpp	/^namespace graphchi { $/;"	n
graphchi	util/configfile.hpp	/^namespace graphchi {$/;"	n
graphchi	util/dense_bitset.hpp	/^namespace graphchi {$/;"	n
graphchi	util/pthread_tools.hpp	/^namespace graphchi {$/;"	n
graphchi	util/radixSort.hpp	/^namespace graphchi {$/;"	n
graphchi	util/synchronized_queue.hpp	/^namespace graphchi {$/;"	n
graphchi	util/toplist.hpp	/^namespace graphchi {$/;"	n
graphchi_context	api/graphchi_context.hpp	/^        graphchi_context() : scheduler(NULL), iteration(0), last_iteration(-1) {$/;"	f	struct:graphchi::graphchi_context
graphchi_context	api/graphchi_context.hpp	/^    struct graphchi_context {$/;"	s	namespace:graphchi
graphchi_dynamicgraph_engine	engine/dynamic_graphs/graphchi_dynamicgraph_engine.hpp	/^        graphchi_dynamicgraph_engine(std::string base_filename, int nshards, bool selective_scheduling, metrics &_m) :$/;"	f	class:graphchi::graphchi_dynamicgraph_engine
graphchi_dynamicgraph_engine	engine/dynamic_graphs/graphchi_dynamicgraph_engine.hpp	/^    class graphchi_dynamicgraph_engine : public graphchi_engine<VertexDataType, EdgeDataType, svertex_t> {$/;"	c	namespace:graphchi
graphchi_edge	api/graph_objects.hpp	/^        graphchi_edge() {}$/;"	f	class:graphchi::graphchi_edge
graphchi_edge	api/graph_objects.hpp	/^        graphchi_edge(vid_t _vertexid, EdgeDataType * edata_ptr) : vertexid(_vertexid), data_ptr(edata_ptr) {$/;"	f	class:graphchi::graphchi_edge
graphchi_edge	api/graph_objects.hpp	/^    class graphchi_edge {$/;"	c	namespace:graphchi
graphchi_engine	engine/graphchi_engine.hpp	/^        graphchi_engine(std::string _base_filename, int _nshards, bool _selective_scheduling, metrics &_m) : base_filename(_base_filename), nshards(_nshards), use_selective_scheduling(_selective_scheduling), m(_m) {$/;"	f	class:graphchi::graphchi_engine
graphchi_engine	engine/graphchi_engine.hpp	/^    class graphchi_engine {$/;"	c	namespace:graphchi
graphchi_init	util/cmdopts.hpp	/^    static void graphchi_init(int argc, const char ** argv) {$/;"	f	namespace:graphchi
graphchi_vertex	api/graph_objects.hpp	/^        graphchi_vertex() : internal_graphchi_vertex<VertexDataType, EdgeDataType>() { }$/;"	f	class:graphchi::graphchi_vertex
graphchi_vertex	api/graph_objects.hpp	/^        graphchi_vertex(vid_t _id, $/;"	f	class:graphchi::graphchi_vertex
graphchi_vertex	api/graph_objects.hpp	/^    class graphchi_vertex : public internal_graphchi_vertex<VertexDataType, EdgeDataType> {$/;"	c	namespace:graphchi
graphchi_xcode_dynamicblock_hpp	shards/dynamicdata/dynamicblock.hpp	30;"	d
graphlab	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^namespace graphlab {$/;"	n
graphlab	api/graphlab2_1_GAS_api/random.cpp	/^namespace graphlab {$/;"	n	file:
graphlab	api/graphlab2_1_GAS_api/random.hpp	/^namespace graphlab {$/;"	n
hStatus	external/vpiotr-mongoose-cpp/main.c	/^static SERVICE_STATUS_HANDLE hStatus;$/;"	v	file:
ha1	external/vpiotr-mongoose-cpp/mongoose.h	/^  char *ha1;               \/\/ ha1 = md5(username:domain:password), used to compute expected_response$/;"	m	struct:mg_auth_header
handle	external/vpiotr-mongoose-cpp/mongoose.c	/^    HANDLE   handle;$/;"	m	struct:DIR	file:
handleEvent	external/vpiotr-mongoose-cpp/mongcpp.cpp	/^bool MongooseServer::handleEvent(ServerHandlingEvent eventCode, MongooseConnection &connection, const MongooseRequest &request, MongooseResponse &response)$/;"	f	class:MongooseServer
handleEvent	external/vpiotr-mongoose-cpp/mongcpp.cpp	/^void *MongooseServer::handleEvent(ServerHandlingEvent eventCode,$/;"	f	class:MongooseServer
handleEvent	external/vpiotr-mongoose-cpp/test/mongotest.cpp	/^    virtual bool handleEvent(ServerHandlingEvent eventCode, MongooseConnection &connection, const MongooseRequest &request, MongooseResponse &response) {$/;"	f	class:TestMongoServer
handleInfo	external/vpiotr-mongoose-cpp/test/mongotest.cpp	/^    void handleInfo(const MongooseRequest &request, MongooseResponse &response) {$/;"	f	class:TestMongoServer
handle_cgi_request	external/vpiotr-mongoose-cpp/mongoose.c	/^static void handle_cgi_request(struct mg_connection *conn, const char *prog) {$/;"	f	file:
handle_directory_request	external/vpiotr-mongoose-cpp/mongoose.c	/^static void handle_directory_request(struct mg_connection *conn,$/;"	f	file:
handle_file_request	external/vpiotr-mongoose-cpp/mongoose.c	/^static void handle_file_request(struct mg_connection *conn, const char *path,$/;"	f	file:
handle_jsonp	external/vpiotr-mongoose-cpp/examples/chat.c	/^static int handle_jsonp(struct mg_connection *conn,$/;"	f	file:
handle_jsonp	httpadmin/chi_httpadmin.hpp	/^    static int handle_jsonp(struct mg_connection *conn,$/;"	f	namespace:graphchi
handle_proxy_request	external/vpiotr-mongoose-cpp/mongoose.c	/^static void handle_proxy_request(struct mg_connection *conn) {$/;"	f	file:
handle_request	external/vpiotr-mongoose-cpp/mongoose.c	/^static void handle_request(struct mg_connection *conn) {$/;"	f	file:
handle_ssi_file_request	external/vpiotr-mongoose-cpp/mongoose.c	/^static void handle_ssi_file_request(struct mg_connection *conn,$/;"	f	file:
has_more	preprocessing/sharder.hpp	/^        bool has_more() {$/;"	f	struct:graphchi::shovel_merge_source
has_new_tasks	engine/bitset_scheduler.hpp	/^        bool has_new_tasks;$/;"	m	class:graphchi::bitset_scheduler
hash	io/stripedio.hpp	/^        int hash(std::string filename) {$/;"	f	class:graphchi::stripedio
header	external/vpiotr-mongoose-cpp/test/exploit.pl	/^sub header()$/;"	s
hits	io/stripedio.hpp	/^        size_t hits, misses;$/;"	m	class:graphchi::block_cache
html_reporter	metrics/reps/html_reporter.hpp	/^            html_reporter() {}$/;"	f	class:graphchi::html_reporter
html_reporter	metrics/reps/html_reporter.hpp	/^            html_reporter(std::string fname) : filename(fname) {$/;"	f	class:graphchi::html_reporter
html_reporter	metrics/reps/html_reporter.hpp	/^    class html_reporter : public imetrics_reporter {$/;"	c	namespace:graphchi
http_500_error	external/vpiotr-mongoose-cpp/mongoose.c	/^static const char *http_500_error = "Internal Server Error";$/;"	v	file:
http_headers	external/vpiotr-mongoose-cpp/bindings/csharp/mongoose.cs	/^	[MarshalAs(UnmanagedType.ByValArray,SizeConst=64)] public MongooseHeader[] http_headers;$/;"	f	struct:MongooseRequestInfo
http_headers	external/vpiotr-mongoose-cpp/mongoose.h	/^  } http_headers[64];    \/\/ Maximum 64 headers$/;"	m	struct:mg_request_info	typeref:struct:mg_request_info::mg_header
http_version	external/vpiotr-mongoose-cpp/bindings/csharp/mongoose.cs	/^	public string	http_version;$/;"	f	struct:MongooseRequestInfo
http_version	external/vpiotr-mongoose-cpp/mongoose.h	/^  char *http_version;    \/\/ E.g. "1.0", "1.1"$/;"	m	struct:mg_request_info
httplock	engine/graphchi_engine.hpp	/^        mutex httplock;$/;"	m	class:graphchi::graphchi_engine
iSort	util/radixSort.hpp	/^    void iSort(E *A, intT n, intT m, F f) {$/;"	f	namespace:graphchi
icontext	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        icontext(graphchi_context * gcontext) : gcontext(gcontext) {}$/;"	f	class:graphlab::icontext
icontext	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^    class icontext {$/;"	c	namespace:graphlab
icontext_type	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        typedef icontext<graph_type, gather_type, message_type> icontext_type;$/;"	t	struct:graphlab::ivertex_program
id	api/graph_objects.hpp	/^        vid_t id() const {$/;"	f	class:graphchi::internal_graphchi_vertex
id	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        graphchi::vid_t id() const {$/;"	f	struct:graphlab::GraphLabVertexWrapper
id	external/vpiotr-mongoose-cpp/examples/chat.c	/^  long id;                     \/\/ Message ID$/;"	m	struct:message	file:
id	preprocessing/util/orderbydegree.hpp	/^        vid_t id;$/;"	m	struct:graphchi::vertex_degree
ident	metrics/metrics.hpp	/^    std::string name, ident;$/;"	m	class:graphchi::metrics
idx	preprocessing/sharder.hpp	/^        size_t idx;$/;"	m	struct:graphchi::shovel_merge_source
imetrics_reporter	metrics/imetrics_reporter.hpp	/^   class imetrics_reporter {$/;"	c	namespace:graphchi
imetrics_reporter	metrics/metrics.hpp	/^  class imetrics_reporter {$/;"	c	namespace:graphchi
in	external/vpiotr-mongoose-cpp/mongoose.c	/^    unsigned char in[64];$/;"	m	struct:MD5Context	file:
inc	api/functional/functional_semisync.hpp	/^    bool inc;$/;"	m	class:graphchi::functional_vertex_unweighted_semisync
inc	api/graph_objects.hpp	/^        volatile int inc;$/;"	m	class:graphchi::internal_graphchi_vertex
inc	util/atomic.hpp	/^        T inc() { return __sync_add_and_fetch(&value, 1);  }$/;"	f	class:graphchi::atomic
inc	util/atomic.hpp	/^        T inc(const T val) { return __sync_add_and_fetch(&value, val);  }$/;"	f	class:graphchi::atomic
inc_ret_last	util/atomic.hpp	/^        T inc_ret_last() { return __sync_fetch_and_add(&value, 1);  }$/;"	f	class:graphchi::atomic
inc_ret_last	util/atomic.hpp	/^        T inc_ret_last(const T val) { return __sync_fetch_and_add(&value, val);  }$/;"	f	class:graphchi::atomic
incorporate_buffered_edges	engine/dynamic_graphs/graphchi_dynamicgraph_engine.hpp	/^        void incorporate_buffered_edges(int window, vid_t window_st, vid_t window_en, std::vector<svertex_t> & vertices) {$/;"	f	class:graphchi::graphchi_dynamicgraph_engine
incorporate_new_edge_degrees	engine/dynamic_graphs/graphchi_dynamicgraph_engine.hpp	/^        bool incorporate_new_edge_degrees(int window, vid_t window_st, vid_t window_en) {$/;"	f	class:graphchi::graphchi_dynamicgraph_engine
incrHeapSize	util/binary_minheap.hpp	/^    inline void incrHeapSize() { sz++; assert(sz <= capacity); }   $/;"	f	class:binary_minheap
indegree	api/functional/functional_defs.hpp	/^        int indegree;$/;"	m	struct:graphchi::vertex_info
indegree	engine/auxdata/degree_data.hpp	/^        int indegree;$/;"	m	struct:graphchi::degree
indegree	util/readdeg.cpp	/^    int indegree;$/;"	m	struct:degree	file:
index	shards/memoryshard.hpp	/^        std::vector<shard_index> index;$/;"	m	class:graphchi::memory_shard
indexentry	shards/dynamicdata/slidingshard.hpp	/^        indexentry(size_t a, size_t e) : adjoffset(a), edataoffset(e) {}$/;"	f	struct:graphchi::indexentry
indexentry	shards/dynamicdata/slidingshard.hpp	/^    struct indexentry {$/;"	s	namespace:graphchi
indexentry	shards/slidingshard.hpp	/^        indexentry(size_t a, size_t e) : adjoffset(a), edataoffset(e) {}$/;"	f	struct:graphchi::indexentry
indexentry	shards/slidingshard.hpp	/^    struct indexentry {$/;"	s	namespace:graphchi
inedge	api/graph_objects.hpp	/^        graphchi_edge<EdgeDataType> * inedge(int i) {$/;"	f	class:graphchi::graphchi_vertex
inedges_ptr	api/graph_objects.hpp	/^        graphchi_edge<EdgeDataType> * inedges_ptr;$/;"	m	class:graphchi::internal_graphchi_vertex
info	external/vpiotr-mongoose-cpp/mongoose.c	/^    WIN32_FIND_DATAW info;$/;"	m	struct:DIR	file:
ingested_edges	httpadmin/plotter.hpp	/^    static size_t ingested_edges = 0;$/;"	m	namespace:graphchi
init	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        virtual void init(icontext_type& context,$/;"	f	struct:graphlab::ivertex_program
init	external/vpiotr-mongoose-cpp/mongcpp.cpp	/^void MongooseServer::init()$/;"	f	class:MongooseServer
init_block	engine/auxdata/dynamicdata/vertex_data_dynamic.hpp	/^        void init_block(int blockid) {$/;"	f	class:graphchi::vertex_data_store
init_buffers	engine/dynamic_graphs/graphchi_dynamicgraph_engine.hpp	/^        void init_buffers() {$/;"	f	class:graphchi::graphchi_dynamicgraph_engine
init_plot	httpadmin/plotter.hpp	/^    static void init_plot(std::string plotname) {$/;"	f	namespace:graphchi
init_plots	httpadmin/plotter.hpp	/^    static void init_plots(ENGINE * engine) {$/;"	f	namespace:graphchi
init_server_name	external/vpiotr-mongoose-cpp/main.c	/^static void init_server_name(void) {$/;"	f	file:
init_vertices	engine/dynamic_graphs/graphchi_dynamicgraph_engine.hpp	/^        virtual void init_vertices(std::vector<svertex_t> &vertices, graphchi_edge<EdgeDataType> * &edata) {$/;"	f	class:graphchi::graphchi_dynamicgraph_engine
init_vertices	engine/functional/functional_engine.hpp	/^        virtual void init_vertices(std::vector<fvertex_t> &vertices, graphchi_edge<EdgeDataType> * &e) {$/;"	f	class:graphchi::functional_engine
init_vertices	engine/graphchi_engine.hpp	/^        virtual void init_vertices(std::vector<svertex_t> &vertices, graphchi_edge<EdgeDataType> * &edata) {$/;"	f	class:graphchi::graphchi_engine
initdata	shards/dynamicdata/slidingshard.hpp	/^        void initdata() {$/;"	f	class:graphchi::sliding_shard
initdata	shards/slidingshard.hpp	/^        void initdata() {$/;"	f	class:graphchi::sliding_shard
initial_edges	httpadmin/plotter.hpp	/^    static size_t initial_edges = 0;$/;"	m	namespace:graphchi
initial_value	tests/bulksync_functional_test.cpp	/^    int initial_value(graphchi_context &info, vertex_info& myvertex) {$/;"	f	struct:smoketest_program
initialize_before_run	engine/dynamic_graphs/graphchi_dynamicgraph_engine.hpp	/^        virtual void initialize_before_run() {$/;"	f	class:graphchi::graphchi_dynamicgraph_engine
initialize_before_run	engine/graphchi_engine.hpp	/^        virtual void initialize_before_run() {$/;"	f	class:graphchi::graphchi_engine
initialize_edges_before_run	engine/graphchi_engine.hpp	/^        bool initialize_edges_before_run;$/;"	m	class:graphchi::graphchi_engine
initialize_iter	engine/dynamic_graphs/graphchi_dynamicgraph_engine.hpp	/^        virtual void initialize_iter() {$/;"	f	class:graphchi::graphchi_dynamicgraph_engine
initialize_iter	engine/graphchi_engine.hpp	/^        virtual void initialize_iter() {$/;"	f	class:graphchi::graphchi_engine
initialize_scheduler	engine/graphchi_engine.hpp	/^        virtual void initialize_scheduler() {$/;"	f	class:graphchi::graphchi_engine
initialize_sliding_shards	engine/dynamic_graphs/graphchi_dynamicgraph_engine.hpp	/^        virtual void initialize_sliding_shards() {$/;"	f	class:graphchi::graphchi_dynamicgraph_engine
initialize_sliding_shards	engine/graphchi_engine.hpp	/^        virtual void initialize_sliding_shards() {$/;"	f	class:graphchi::graphchi_engine
insert	util/binary_minheap.hpp	/^    void insert(T element) {$/;"	f	class:binary_minheap
insertionSort	util/qsort.hpp	/^void insertionSort(E* A, int n, BinPred f) {$/;"	f
int64_t	external/vpiotr-mongoose-cpp/mongoose.c	/^typedef __int64   int64_t;$/;"	t	file:
intT	util/radixSort.hpp	/^    typedef long long int intT;$/;"	t	namespace:graphchi
internal_graphchi_vertex	api/graph_objects.hpp	/^        internal_graphchi_vertex() : inc(0), outc(0) {$/;"	f	class:graphchi::internal_graphchi_vertex
internal_graphchi_vertex	api/graph_objects.hpp	/^        internal_graphchi_vertex(vid_t _id, graphchi_edge<EdgeDataType> * iptr, $/;"	f	class:graphchi::internal_graphchi_vertex
internal_graphchi_vertex	api/graph_objects.hpp	/^    class internal_graphchi_vertex {$/;"	c	namespace:graphchi
intervals	engine/graphchi_engine.hpp	/^        std::vector<std::pair<vid_t, vid_t> > intervals;$/;"	m	class:graphchi::graphchi_engine
intervals	preprocessing/sharder.hpp	/^        std::vector< std::pair<vid_t, vid_t> > intervals;$/;"	m	class:graphchi::sharder
io_descriptor	io/stripedio.hpp	/^    struct io_descriptor {$/;"	s	namespace:graphchi
io_thread_loop	io/stripedio.hpp	/^    static void * io_thread_loop(void * _info) {$/;"	f	namespace:graphchi
iomgr	engine/auxdata/degree_data.hpp	/^        stripedio * iomgr;$/;"	m	class:graphchi::degree_data
iomgr	engine/auxdata/dynamicdata/vertex_data_dynamic.hpp	/^        stripedio * iomgr;$/;"	m	class:graphchi::vertex_data_store
iomgr	engine/auxdata/vertex_data.hpp	/^        stripedio * iomgr;$/;"	m	class:graphchi::vertex_data_store
iomgr	engine/graphchi_engine.hpp	/^        stripedio * iomgr;$/;"	m	class:graphchi::graphchi_engine
iomgr	io/stripedio.hpp	/^        stripedio * iomgr;$/;"	m	struct:graphchi::iotask
iomgr	shards/dynamicdata/memoryshard.hpp	/^        stripedio * iomgr;$/;"	m	class:graphchi::memory_shard
iomgr	shards/dynamicdata/slidingshard.hpp	/^        stripedio * iomgr;$/;"	m	class:graphchi::sliding_shard
iomgr	shards/memoryshard.hpp	/^        stripedio * iomgr;$/;"	m	class:graphchi::memory_shard
iomgr	shards/slidingshard.hpp	/^        stripedio * iomgr;$/;"	m	class:graphchi::sliding_shard
iotask	io/stripedio.hpp	/^        iotask() : action(READ), fd(0), session(0), ptr(NULL), length(0), offset(0), ptroffset(0), free_after(false), iomgr(NULL), compressed(false), closefd(false), doneptr(NULL) {}$/;"	f	struct:graphchi::iotask
iotask	io/stripedio.hpp	/^        iotask(stripedio * iomgr, BLOCK_ACTION act, int fd, int session,  refcountptr * ptr, size_t length, size_t offset, size_t ptroffset, bool free_after, bool compressed, bool closefd=false) :$/;"	f	struct:graphchi::iotask
iotask	io/stripedio.hpp	/^    struct iotask {$/;"	s	namespace:graphchi
ioutput	output/output.hpp	/^    class ioutput{$/;"	c	namespace:graphchi
ipToString	external/vpiotr-mongoose-cpp/test/mongotest.cpp	/^string ipToString(long ip)$/;"	f
isRunning	external/vpiotr-mongoose-cpp/mongcpp.cpp	/^bool MongooseServer::isRunning()$/;"	f	class:MongooseServer
isSsl	external/vpiotr-mongoose-cpp/mongcpp.cpp	/^bool MongooseRequest::isSsl() const$/;"	f	class:MongooseRequest
is_any_vertex_scheduled	engine/graphchi_engine.hpp	/^        bool is_any_vertex_scheduled(vid_t st, vid_t en) {$/;"	f	class:graphchi::graphchi_engine
is_authorized	external/vpiotr-mongoose-cpp/examples/chat.c	/^static int is_authorized(const struct mg_connection *conn,$/;"	f	file:
is_authorized_for_put	external/vpiotr-mongoose-cpp/mongoose.c	/^static int is_authorized_for_put(struct mg_connection *conn) {$/;"	f	file:
is_chivec_value	preprocessing/sharder.hpp	/^        bool is_chivec_value;$/;"	m	struct:graphchi::edge_with_value
is_deleted_edge_value	api/graph_objects.hpp	/^    static inline bool VARIABLE_IS_NOT_USED is_deleted_edge_value(bool val) {$/;"	f	namespace:graphchi
is_deleted_edge_value	api/graph_objects.hpp	/^    static inline bool VARIABLE_IS_NOT_USED is_deleted_edge_value(float val) {$/;"	f	namespace:graphchi
is_deleted_edge_value	api/graph_objects.hpp	/^    static inline bool VARIABLE_IS_NOT_USED is_deleted_edge_value(int val) {$/;"	f	namespace:graphchi
is_deleted_edge_value	api/graph_objects.hpp	/^    static inline bool VARIABLE_IS_NOT_USED is_deleted_edge_value(vid_t val) {$/;"	f	namespace:graphchi
is_directory	external/vpiotr-mongoose-cpp/mongoose.c	/^    int is_directory;  \/\/ Directory marker$/;"	m	struct:mgstat	file:
is_edata_block	shards/dynamicdata/slidingshard.hpp	/^        bool is_edata_block;$/;"	m	struct:graphchi::sblock
is_edata_block	shards/slidingshard.hpp	/^        bool is_edata_block;$/;"	m	struct:graphchi::sblock
is_inedge	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        bool is_inedge;$/;"	m	struct:graphlab::GraphLabEdgeWrapper
is_inmemory_mode	engine/functional/functional_engine.hpp	/^        virtual bool is_inmemory_mode() {$/;"	f	class:graphchi::functional_engine
is_inmemory_mode	engine/graphchi_engine.hpp	/^        virtual bool is_inmemory_mode() {$/;"	f	class:graphchi::graphchi_engine
is_loaded	shards/dynamicdata/memoryshard.hpp	/^        bool is_loaded;$/;"	m	class:graphchi::memory_shard
is_loaded	shards/memoryshard.hpp	/^        bool is_loaded;$/;"	m	class:graphchi::memory_shard
is_not_modified	external/vpiotr-mongoose-cpp/mongoose.c	/^static int is_not_modified(const struct mg_connection *conn,$/;"	f	file:
is_proxy	external/vpiotr-mongoose-cpp/mongoose.c	/^    int is_proxy;$/;"	m	struct:socket	file:
is_scheduled	api/ischeduler.hpp	/^        virtual bool is_scheduled(vid_t vertex) { return true; }$/;"	f	class:graphchi::non_scheduler
is_scheduled	engine/bitset_scheduler.hpp	/^        inline bool is_scheduled(vid_t vertex) {$/;"	f	class:graphchi::bitset_scheduler
is_special	api/graph_objects.hpp	/^    inline bool is_special(vid_t rawid) {$/;"	f	namespace:graphchi
is_ssl	external/vpiotr-mongoose-cpp/mongoose.c	/^    int is_ssl;           \/\/ Is socket SSL-ed$/;"	m	struct:socket	file:
is_ssl	external/vpiotr-mongoose-cpp/mongoose.h	/^  int is_ssl;            \/\/ 1 if SSL-ed, 0 if not$/;"	m	struct:mg_request_info
is_valid_http_method	external/vpiotr-mongoose-cpp/mongoose.c	/^static int is_valid_http_method(const char *method) {$/;"	f	file:
is_valid_uri	external/vpiotr-mongoose-cpp/mongoose.c	/^static int is_valid_uri(const char *uri) {$/;"	f	file:
isbyte	external/vpiotr-mongoose-cpp/mongoose.c	/^static int isbyte(int n) {$/;"	f	file:
ischeduler	api/ischeduler.hpp	/^    class ischeduler {$/;"	c	namespace:graphchi
isnan	api/graphchi_context.hpp	/^        inline bool isnan(double x) {$/;"	f	struct:graphchi::graphchi_context
iter	engine/graphchi_engine.hpp	/^        int iter;$/;"	m	class:graphchi::graphchi_engine
iteration	api/graphchi_context.hpp	/^        int iteration;$/;"	m	struct:graphchi::graphchi_context
iteration	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        virtual int iteration() const { return gcontext->iteration; } $/;"	f	class:graphlab::icontext
iteration_finished	engine/dynamic_graphs/graphchi_dynamicgraph_engine.hpp	/^        virtual void iteration_finished() {$/;"	f	class:graphchi::graphchi_dynamicgraph_engine
iteration_finished	engine/graphchi_engine.hpp	/^        virtual void iteration_finished() {$/;"	f	class:graphchi::graphchi_engine
iterkey	metrics/metrics.hpp	/^      inline std::string iterkey(std::string key, int iter) {$/;"	f	class:graphchi::metrics
iters	tests/basic_dynamicengine_smoketest.cpp	/^    int iters;$/;"	m	class:VertexDataChecker	file:
iters	tests/basic_dynamicengine_smoketest2.cpp	/^    int iters;$/;"	m	class:VertexDataChecker	file:
iters	tests/basic_smoketest.cpp	/^    int iters;$/;"	m	class:VertexDataChecker	file:
iters	tests/dynamicdata_smoketest.cpp	/^    int iters;$/;"	m	class:VertexDataChecker	file:
ivertex_program	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^    struct ivertex_program {$/;"	s	namespace:graphlab
json_params	engine/graphchi_engine.hpp	/^        std::map<std::string, std::string> json_params;$/;"	m	class:graphchi::graphchi_engine
kernel	api/functional/functional_bulksync.hpp	/^        KERNEL kernel;$/;"	m	class:graphchi::functional_vertex_unweighted_bulksync
kernel	api/functional/functional_semisync.hpp	/^    KERNEL kernel;$/;"	m	class:graphchi::functional_vertex_unweighted_semisync
kill	external/vpiotr-mongoose-cpp/mongoose.c	/^static int kill(pid_t pid, int sig_num) {$/;"	f	file:
kill_spawned_child	external/vpiotr-mongoose-cpp/test/test.pl	/^sub kill_spawned_child {$/;"	s
kway_merge	util/kwaymerge.hpp	/^    kway_merge(std::vector<merge_source<T> *> sources, merge_sink<T> * sink): sources(sources), sink(sink), tip((int)sources.size()) {$/;"	f	class:kway_merge
kway_merge	util/kwaymerge.hpp	/^class kway_merge {$/;"	c
l	util/pthread_tools.hpp	/^        mutable volatile rwticket l;$/;"	m	class:graphchi::spinrwlock
label	util/labelanalysis.hpp	/^    LabelType label;$/;"	m	struct:labelcount_tt
label_count_greater	util/labelanalysis.hpp	/^bool label_count_greater(const labelcount_tt<LabelType> &a, const labelcount_tt<LabelType> &b) {$/;"	f
labelcount_tt	util/labelanalysis.hpp	/^    labelcount_tt() {}$/;"	f	struct:labelcount_tt
labelcount_tt	util/labelanalysis.hpp	/^    labelcount_tt(LabelType l, int c) : label(l), count(c) {}$/;"	f	struct:labelcount_tt
labelcount_tt	util/labelanalysis.hpp	/^struct labelcount_tt {$/;"	s
last_added_edge	preprocessing/sharder.hpp	/^        edge_t last_added_edge;$/;"	m	class:graphchi::sharder
last_commit	engine/dynamic_graphs/graphchi_dynamicgraph_engine.hpp	/^        size_t last_commit;$/;"	m	class:graphchi::graphchi_dynamicgraph_engine
last_deltasum	api/graphchi_context.hpp	/^        double last_deltasum;$/;"	m	struct:graphchi::graphchi_context
last_edges	httpadmin/plotter.hpp	/^    static size_t last_edges = 0;$/;"	m	namespace:graphchi
last_iteration	api/graphchi_context.hpp	/^        int last_iteration;$/;"	m	struct:graphchi::graphchi_context
last_message_id	external/vpiotr-mongoose-cpp/examples/chat.c	/^static long last_message_id;$/;"	v	file:
last_nvertices	engine/auxdata/vertex_data.hpp	/^        vid_t last_nvertices;$/;"	m	class:graphchi::vertex_data_store
last_update_time	httpadmin/plotter.hpp	/^    static double last_update_time = 0;$/;"	m	namespace:graphchi
last_updates	httpadmin/plotter.hpp	/^    static size_t last_updates = 0;$/;"	m	namespace:graphchi
lastpart	preprocessing/sharder.hpp	/^        int lastpart;$/;"	m	class:graphchi::sharder
lasttime	metrics/metrics.hpp	/^      double lasttime;$/;"	m	struct:graphchi::metrics_entry
left	graphchi_types.hpp	/^        ET left;$/;"	m	struct:graphchi::PairContainer
left	util/binary_minheap.hpp	/^    inline int left(int i)   { return i*2 + 1; }$/;"	f	class:binary_minheap
len	external/vpiotr-mongoose-cpp/mongoose.c	/^    int len; \/\/ Space taken$/;"	m	struct:cgi_env_block	file:
len	external/vpiotr-mongoose-cpp/mongoose.c	/^    size_t len;$/;"	m	struct:vec	file:
len	external/vpiotr-mongoose-cpp/mongoose.c	/^    socklen_t len;$/;"	m	struct:usa	file:
len	io/stripedio.hpp	/^        size_t len;$/;"	m	struct:graphchi::cached_block
len	io/stripedio.hpp	/^        size_t len;$/;"	m	struct:graphchi::stripe_chunk
len	util/dense_bitset.hpp	/^        size_t len;$/;"	m	class:graphchi::dense_bitset
length	io/stripedio.hpp	/^        size_t length;$/;"	m	struct:graphchi::iotask
length	io/stripedio.hpp	/^        size_t length;$/;"	m	struct:graphchi::mmap_info
listening_ports	external/vpiotr-mongoose-cpp/bindings/python/example.py	/^                           listening_ports='8080')$/;"	v
listening_sockets	external/vpiotr-mongoose-cpp/mongoose.c	/^    struct socket *listening_sockets;$/;"	m	struct:mg_context	typeref:struct:mg_context::socket	file:
load	engine/auxdata/degree_data.hpp	/^        virtual void load(vid_t _vertex_st, vid_t _vertex_en) {$/;"	f	class:graphchi::degree_data
load	engine/auxdata/dynamicdata/vertex_data_dynamic.hpp	/^        virtual void load(vid_t _vertex_st, vid_t _vertex_en) {$/;"	f	class:graphchi::vertex_data_store
load	engine/auxdata/vertex_data.hpp	/^        virtual void load(vid_t _vertex_st, vid_t _vertex_en) {$/;"	f	class:graphchi::vertex_data_store
load	shards/dynamicdata/memoryshard.hpp	/^        void load() {$/;"	f	class:graphchi::memory_shard
load	shards/memoryshard.hpp	/^        void load() {$/;"	f	class:graphchi::memory_shard
load_after_updates	engine/dynamic_graphs/graphchi_dynamicgraph_engine.hpp	/^        virtual void load_after_updates(std::vector<svertex_t> &vertices) {$/;"	f	class:graphchi::graphchi_dynamicgraph_engine
load_after_updates	engine/functional/functional_engine.hpp	/^        virtual void load_after_updates(std::vector<fvertex_t> &vertices) {$/;"	f	class:graphchi::functional_engine
load_after_updates	engine/graphchi_engine.hpp	/^        virtual void load_after_updates(std::vector<svertex_t> &vertices) {$/;"	f	class:graphchi::graphchi_engine
load_before_updates	engine/dynamic_graphs/graphchi_dynamicgraph_engine.hpp	/^        virtual void load_before_updates(std::vector<svertex_t> &vertices) {  $/;"	f	class:graphchi::graphchi_dynamicgraph_engine
load_before_updates	engine/functional/functional_engine.hpp	/^        virtual void load_before_updates(std::vector<fvertex_t> &vertices) {$/;"	f	class:graphchi::functional_engine
load_before_updates	engine/graphchi_engine.hpp	/^        virtual void load_before_updates(std::vector<svertex_t> &vertices) {$/;"	f	class:graphchi::graphchi_engine
load_block	engine/auxdata/dynamicdata/vertex_data_dynamic.hpp	/^        vdblock load_block(int blockid) {$/;"	f	class:graphchi::vertex_data_store
load_dll	external/vpiotr-mongoose-cpp/mongoose.c	/^static int load_dll(struct mg_context *ctx, const char *dll_name,$/;"	f	file:
load_edata	shards/dynamicdata/memoryshard.hpp	/^        void load_edata() {$/;"	f	class:graphchi::memory_shard
load_edata	shards/memoryshard.hpp	/^        void load_edata() {$/;"	f	class:graphchi::memory_shard
load_index	shards/memoryshard.hpp	/^        std::vector<shard_index> load_index() {$/;"	f	class:graphchi::memory_shard
load_next	preprocessing/sharder.hpp	/^        void load_next() {$/;"	f	struct:graphchi::shovel_merge_source
load_threads	engine/graphchi_engine.hpp	/^        int load_threads;$/;"	m	class:graphchi::graphchi_engine
load_vertex_intervals	api/chifilenames.hpp	/^    static VARIABLE_IS_NOT_USED void load_vertex_intervals(std::string base_filename, int nshards, std::vector<std::pair<vid_t, vid_t> > & intervals, bool allowfail=false) {$/;"	f	namespace:graphchi
load_vertices	shards/dynamicdata/memoryshard.hpp	/^        void load_vertices(vid_t window_st, vid_t window_en, std::vector<svertex_t> & prealloc, bool inedges=true, bool outedges=true) {$/;"	f	class:graphchi::memory_shard
load_vertices	shards/memoryshard.hpp	/^        void load_vertices(vid_t window_st, vid_t window_en, std::vector<svertex_t> & prealloc, bool inedges=true, bool outedges=true) {$/;"	f	class:graphchi::memory_shard
loadconfig	util/configfile.hpp	/^    static std::map<std::string, std::string> loadconfig(std::string filename, std::string secondary_filename) {$/;"	f	namespace:graphchi
loaded	shards/dynamicdata/memoryshard.hpp	/^        bool loaded() {$/;"	f	class:graphchi::memory_shard
loaded	shards/memoryshard.hpp	/^        bool loaded() {$/;"	f	class:graphchi::memory_shard
loaded_chunk	engine/auxdata/degree_data.hpp	/^        degree * loaded_chunk;$/;"	m	class:graphchi::degree_data
loaded_chunk	engine/auxdata/dynamicdata/vertex_data_dynamic.hpp	/^        VertexDataType * loaded_chunk;$/;"	m	class:graphchi::vertex_data_store
loaded_chunk	engine/auxdata/vertex_data.hpp	/^        VertexDataType * loaded_chunk;$/;"	m	class:graphchi::vertex_data_store
loadedblocks	engine/auxdata/dynamicdata/vertex_data_dynamic.hpp	/^        std::vector<vdblock> loadedblocks; \/\/ Blocks currently in memory$/;"	m	class:graphchi::vertex_data_store
local_id	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        graphchi::vid_t local_id() const {$/;"	f	struct:graphlab::GraphLabVertexWrapper
localaggr	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        std::vector<ReductionType> localaggr;$/;"	m	struct:graphlab::GraphLabEdgeAggregatorWrapper
localtime	external/vpiotr-mongoose-cpp/mongoose.c	/^static struct tm *localtime(const time_t *ptime, struct tm *ptm) {$/;"	f	file:
lock	io/stripedio.hpp	/^        mutex lock;  \/\/ TODO: read-write-lock$/;"	m	class:graphchi::block_cache
lock	output/output.hpp	/^        mutex lock;$/;"	m	class:graphchi::basic_text_output
lock	preprocessing/sharder.hpp	/^        mutex lock;$/;"	m	class:graphchi::sharded_graph_output
lock	tests/test_dynamicedata_loader.cpp	/^    mutex lock;$/;"	m	struct:DynamicDataLoaderTestProgram	file:
lock	util/pthread_tools.hpp	/^        inline void lock() const { $/;"	f	class:graphchi::spinlock
lock	util/pthread_tools.hpp	/^        inline void lock() const {$/;"	f	class:graphchi::mutex
log2Up	util/radixSort.hpp	/^    intT log2Up(T i) {$/;"	f	namespace:graphchi
log_access	external/vpiotr-mongoose-cpp/mongoose.c	/^static void log_access(const struct mg_connection *conn) {$/;"	f	file:
log_change	api/graphchi_context.hpp	/^        void log_change(double delta) {$/;"	f	struct:graphchi::graphchi_context
log_dispatch	logger/logger.hpp	/^struct log_dispatch {};$/;"	s
log_dispatch	logger/logger.hpp	/^struct log_dispatch<false> {$/;"	s
log_dispatch	logger/logger.hpp	/^struct log_dispatch<true> {$/;"	s
log_file	logger/logger.hpp	/^  std::string log_file;$/;"	m	class:file_logger
log_header	external/vpiotr-mongoose-cpp/mongoose.c	/^static void log_header(const struct mg_connection *conn, const char *header,$/;"	f	file:
log_level	logger/logger.hpp	/^  int log_level;$/;"	m	class:file_logger
log_message	external/vpiotr-mongoose-cpp/mongoose.h	/^  char *log_message;     \/\/ Mongoose error log message$/;"	m	struct:mg_request_info
log_stream_dispatch	logger/logger.hpp	/^struct log_stream_dispatch {};$/;"	s
log_stream_dispatch	logger/logger.hpp	/^struct log_stream_dispatch<false> {$/;"	s
log_stream_dispatch	logger/logger.hpp	/^struct log_stream_dispatch<true> {$/;"	s
log_to_console	logger/logger.hpp	/^  bool log_to_console;$/;"	m	class:file_logger
logbuf	logger/logger.hpp	103;"	d
logbuf	logger/logger.hpp	111;"	d
logger	logger/logger.hpp	102;"	d
logger	logger/logger.hpp	107;"	d
logger_impl	logger/logger.hpp	/^namespace logger_impl {$/;"	n
login_url	external/vpiotr-mongoose-cpp/examples/chat.c	/^static const char *login_url = "\/login.html";$/;"	v	file:
logstream	logger/logger.hpp	104;"	d
logstream	logger/logger.hpp	115;"	d
lowercase	external/vpiotr-mongoose-cpp/mongoose.c	/^static int lowercase(const char *s) {$/;"	f	file:
lsa	external/vpiotr-mongoose-cpp/mongoose.c	/^    struct usa lsa;       \/\/ Local socket address$/;"	m	struct:socket	typeref:struct:socket::usa	file:
m	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        mutex m;$/;"	m	struct:graphlab::GraphLabEdgeAggregatorWrapper
m	engine/graphchi_engine.hpp	/^        metrics &m;$/;"	m	class:graphchi::graphchi_engine
m	io/stripedio.hpp	/^        metrics &m;        $/;"	m	class:graphchi::stripedio
m	io/stripedio.hpp	/^        metrics * m;$/;"	m	struct:graphchi::thrinfo
m	preprocessing/sharder.hpp	/^        metrics m;$/;"	m	class:graphchi::sharder
m	shards/dynamicdata/memoryshard.hpp	/^        metrics &m;$/;"	m	class:graphchi::memory_shard
m	shards/dynamicdata/slidingshard.hpp	/^        metrics &m;$/;"	m	class:graphchi::sliding_shard
m	shards/memoryshard.hpp	/^        metrics &m;$/;"	m	class:graphchi::memory_shard
m	shards/slidingshard.hpp	/^        metrics &m;$/;"	m	class:graphchi::sliding_shard
m	util/pthread_tools.hpp	/^        mutex m;$/;"	m	class:graphchi::barrier
m_barrier	util/pthread_tools.hpp	/^        mutable pthread_barrier_t m_barrier;$/;"	m	class:graphchi::barrier
m_cond	util/pthread_tools.hpp	/^        mutable pthread_cond_t  m_cond;$/;"	m	class:graphchi::conditional
m_conn	external/vpiotr-mongoose-cpp/mongcpp.h	/^    struct mg_connection *m_conn;$/;"	m	class:mongoose::MongooseConnection	typeref:struct:mongoose::MongooseConnection::mg_connection
m_conn	external/vpiotr-mongoose-cpp/mongcpp.h	/^    struct mg_connection *m_conn;$/;"	m	class:mongoose::MongooseRequest	typeref:struct:mongoose::MongooseRequest::mg_connection
m_conn	external/vpiotr-mongoose-cpp/mongcpp.h	/^    struct mg_connection *m_conn;$/;"	m	class:mongoose::MongooseResponse	typeref:struct:mongoose::MongooseResponse::mg_connection
m_ctx	external/vpiotr-mongoose-cpp/mongcpp.h	/^    struct mg_context *m_ctx;$/;"	m	class:mongoose::MongooseServer	typeref:struct:mongoose::MongooseServer::mg_context
m_headerValues	external/vpiotr-mongoose-cpp/mongcpp.h	/^    std::auto_ptr<ResponseValueList> m_headerValues;$/;"	m	class:mongoose::MongooseResponse
m_headerValuesIndex	external/vpiotr-mongoose-cpp/mongcpp.h	/^    std::auto_ptr<ResponseValueIndex> m_headerValuesIndex;$/;"	m	class:mongoose::MongooseResponse
m_info	external/vpiotr-mongoose-cpp/mongcpp.h	/^    mg_request_info* m_info;$/;"	m	class:mongoose::MongooseRequest
m_methodMap	external/vpiotr-mongoose-cpp/mongcpp.h	/^    static MethodMapGuard m_methodMap;$/;"	m	class:mongoose::MongooseServer
m_mut	util/pthread_tools.hpp	/^        mutable pthread_mutex_t m_mut;$/;"	m	class:graphchi::mutex
m_optionStorage	external/vpiotr-mongoose-cpp/mongcpp.h	/^    ServerOptionStorage m_optionStorage;$/;"	m	class:mongoose::MongooseServer
m_options	external/vpiotr-mongoose-cpp/mongcpp.h	/^    ServerOptionSet m_options;$/;"	m	class:mongoose::MongooseServer
m_prepared	external/vpiotr-mongoose-cpp/mongcpp.h	/^    bool m_prepared;$/;"	m	class:mongoose::MongooseServer
m_rwlock	util/pthread_tools.hpp	/^        mutable pthread_rwlock_t m_rwlock;$/;"	m	class:graphchi::rwlock
m_sem	util/pthread_tools.hpp	/^        mutable sem_t  m_sem;$/;"	m	class:graphchi::semaphore
m_spin	util/pthread_tools.hpp	/^        mutable pthread_spinlock_t m_spin;$/;"	m	class:graphchi::spinlock
m_statusRunning	external/vpiotr-mongoose-cpp/mongcpp.h	/^    bool m_statusRunning;$/;"	m	class:mongoose::MongooseServer
m_statusText	external/vpiotr-mongoose-cpp/mongcpp.h	/^    std::auto_ptr<std::string> m_statusText;$/;"	m	class:mongoose::MongooseResponse
m_text	external/vpiotr-mongoose-cpp/mongcpp.h	/^    std::string m_text;$/;"	m	class:mongoose::MongooseResponse
main	external/vpiotr-mongoose-cpp/examples/chat.c	/^int main(void) {$/;"	f
main	external/vpiotr-mongoose-cpp/main.c	/^int main(int argc, char *argv[]) {$/;"	f
main	external/vpiotr-mongoose-cpp/test/embed.c	/^int main(void) {$/;"	f
main	external/vpiotr-mongoose-cpp/test/mongotest.cpp	/^int main()$/;"	f
main	preprocessing/blocksplitter.cpp	/^int main(int argc, const char ** argv) {$/;"	f
main	preprocessing/sharder_basic.cpp	/^int main(int argc, const char ** argv) {$/;"	f
main	tests/basic_dynamicengine_smoketest.cpp	/^int main(int argc, const char ** argv) {$/;"	f
main	tests/basic_dynamicengine_smoketest2.cpp	/^int main(int argc, const char ** argv) {$/;"	f
main	tests/basic_smoketest.cpp	/^int main(int argc, const char ** argv) {$/;"	f
main	tests/bulksync_functional_test.cpp	/^int main(int argc, const char ** argv) {$/;"	f
main	tests/dynamicdata_smoketest.cpp	/^int main(int argc, const char ** argv) {$/;"	f
main	tests/test_dynamicedata_loader.cpp	/^int main(int argc, const char ** argv) {$/;"	f
main	util/erdosrenyi.cpp	/^int main(int argc, const char ** argv) {$/;"	f
main	util/graphgenerators.cpp	/^int main(int argc, const char ** argv) {$/;"	f
main	util/randomweightinject.cpp	/^int main(int argc, const char ** argv) {$/;"	f
main	util/readdeg.cpp	/^int main(int argc, const char ** argv) {$/;"	f
make_special	api/graph_objects.hpp	/^    inline vid_t make_special(vid_t rawid) {$/;"	f	namespace:graphchi
manage_service	external/vpiotr-mongoose-cpp/main.c	/^static int manage_service(int action) {$/;"	f	file:
managed_malloc	io/stripedio.hpp	/^        void managed_malloc(int session, T ** tbuf, size_t nbytes, size_t noff) {$/;"	f	class:graphchi::stripedio
managed_preada_async	io/stripedio.hpp	/^        void managed_preada_async(int session, T ** tbuf, size_t nbytes, size_t off, volatile int * doneptr = NULL) {$/;"	f	class:graphchi::stripedio
managed_preada_now	io/stripedio.hpp	/^        void managed_preada_now(int session,  T ** tbuf, size_t nbytes, size_t off) {$/;"	f	class:graphchi::stripedio
managed_pwritea_async	io/stripedio.hpp	/^        void managed_pwritea_async(int session, T ** tbuf, size_t nbytes, size_t off, bool free_after, bool close_fd=false) {$/;"	f	class:graphchi::stripedio
managed_pwritea_now	io/stripedio.hpp	/^        void managed_pwritea_now(int session, T ** tbuf, size_t nbytes, size_t off) {$/;"	f	class:graphchi::stripedio
managed_release	io/stripedio.hpp	/^        void managed_release(int session, T ** ptr) {$/;"	f	class:graphchi::stripedio
map_function	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        EdgeMapType map_function;$/;"	m	struct:graphlab::GraphLabEdgeAggregatorWrapper
master	api/graphlab2_1_GAS_api/random.cpp	/^            generator master;$/;"	m	struct:graphlab::random::source_registry	file:
master_thread	external/vpiotr-mongoose-cpp/mongoose.c	/^static void master_thread(struct mg_context *ctx) {$/;"	f	file:
match_extension	external/vpiotr-mongoose-cpp/mongoose.c	/^static int match_extension(const char *path, const char *ext_list) {$/;"	f	file:
max_edge_buffer	engine/dynamic_graphs/graphchi_dynamicgraph_engine.hpp	/^        size_t max_edge_buffer;$/;"	m	class:graphchi::graphchi_dynamicgraph_engine
max_priority	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^                max_priority(const double value = 0) : value(value) { }$/;"	f	struct:graphlab::messages::max_priority
max_priority	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^            struct max_priority : public graphlab::IS_POD_TYPE {$/;"	s	namespace:graphlab::messages
max_vertex	preprocessing/sharder.hpp	/^        vid_t max_vertex;$/;"	m	struct:graphchi::shard_flushinfo
max_vertex_id	engine/dynamic_graphs/graphchi_dynamicgraph_engine.hpp	/^        vid_t max_vertex_id;$/;"	m	class:graphchi::graphchi_dynamicgraph_engine
max_vertex_id	preprocessing/sharder.hpp	/^        vid_t max_vertex_id;$/;"	m	class:graphchi::sharder
maxshardsize	engine/dynamic_graphs/graphchi_dynamicgraph_engine.hpp	/^        size_t maxshardsize;$/;"	m	class:graphchi::graphchi_dynamicgraph_engine
maxvalue	metrics/metrics.hpp	/^    double maxvalue;$/;"	m	struct:graphchi::metrics_entry
maxvertex	preprocessing/sharder.hpp	/^        size_t maxvertex;$/;"	m	struct:graphchi::dstSrcF
maxwindow	engine/graphchi_engine.hpp	/^        unsigned int maxwindow;$/;"	m	class:graphchi::graphchi_engine
median	util/qsort.hpp	/^E median(E a, E b, E c, BinPred f) {$/;"	f
membudget_mb	engine/graphchi_engine.hpp	/^        int membudget_mb;$/;"	m	class:graphchi::graphchi_engine
memory_shard	shards/dynamicdata/memoryshard.hpp	/^        memory_shard(stripedio * iomgr,$/;"	f	class:graphchi::memory_shard
memory_shard	shards/dynamicdata/memoryshard.hpp	/^    class memory_shard {$/;"	c	namespace:graphchi
memory_shard	shards/memoryshard.hpp	/^        memory_shard(stripedio * iomgr,$/;"	f	class:graphchi::memory_shard
memory_shard	shards/memoryshard.hpp	/^    class memory_shard {$/;"	c	namespace:graphchi
memoryshard	engine/graphchi_engine.hpp	/^        memshard_t * memoryshard;$/;"	m	class:graphchi::graphchi_engine
memshard_t	engine/graphchi_engine.hpp	/^        typedef memory_shard<VertexDataType, EdgeDataType, svertex_t> memshard_t;$/;"	t	class:graphchi::graphchi_engine
memshard_t	preprocessing/sharder.hpp	/^        typedef memory_shard<int, dummy_t> memshard_t;$/;"	t	class:graphchi::sharder
merge	util/kwaymerge.hpp	/^    void merge() {$/;"	f	class:kway_merge
merge	util/merge.hpp	/^void merge(ET* S1, int l1, ET* S2, int l2, ET* R, F f) {$/;"	f
merge_sink	util/kwaymerge.hpp	/^class merge_sink {$/;"	c
merge_source	util/kwaymerge.hpp	/^class merge_source {$/;"	c
message	external/vpiotr-mongoose-cpp/examples/chat.c	/^struct message {$/;"	s	file:
message_type	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        typedef MessageType message_type;$/;"	t	class:graphlab::icontext
message_type	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        typedef MessageType message_type;$/;"	t	struct:graphlab::ivertex_program
message_type	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        typedef typename GraphLabVertexProgram::message_type message_type;$/;"	t	struct:graphlab::GraphLabEdgeAggregatorWrapper
message_type	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        typedef typename GraphLabVertexProgram::message_type message_type;$/;"	t	struct:graphlab::GraphLabWrapper
messages	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        namespace messages {$/;"	n	namespace:graphlab
messages	external/vpiotr-mongoose-cpp/examples/chat.c	/^static struct message messages[MAX_MESSAGES];  \/\/ Ringbuffer for messages$/;"	v	typeref:struct:message	file:
messages	logger/logger.hpp	/^static const char* messages[] = {  "DEBUG:    ",$/;"	v
messages_to_json	external/vpiotr-mongoose-cpp/examples/chat.c	/^static char *messages_to_json(long last_id) {$/;"	f	file:
methodTextToCode	external/vpiotr-mongoose-cpp/mongcpp.cpp	/^MongooseRequestMethodCode MongooseServer::methodTextToCode(const std::string &text)$/;"	f	class:MongooseServer
metrics	metrics/metrics.hpp	/^    inline metrics(std::string _name = "", std::string _id = "") : name(_name), ident (_id) {$/;"	f	class:graphchi::metrics
metrics	metrics/metrics.hpp	/^  class metrics {$/;"	c	namespace:graphchi
metrics_entry	metrics/metrics.hpp	/^    inline metrics_entry(double firstvalue, metrictype _valtype) {$/;"	f	struct:graphchi::metrics_entry
metrics_entry	metrics/metrics.hpp	/^    inline metrics_entry(metrictype _valtype) {$/;"	f	struct:graphchi::metrics_entry
metrics_entry	metrics/metrics.hpp	/^    inline metrics_entry(std::string svalue) {$/;"	f	struct:graphchi::metrics_entry
metrics_entry	metrics/metrics.hpp	/^    metrics_entry() {} $/;"	f	struct:graphchi::metrics_entry
metrics_entry	metrics/metrics.hpp	/^  struct metrics_entry {$/;"	s	namespace:graphchi
metrics_report	graphchi_basic_includes.hpp	/^    static VARIABLE_IS_NOT_USED void metrics_report(metrics &m) {$/;"	f	namespace:graphchi
metrictype	metrics/metrics.hpp	/^  enum metrictype {REAL, INTEGER, TIME, STRING, VECTOR};$/;"	g	namespace:graphchi
mg_auth_header	external/vpiotr-mongoose-cpp/mongoose.h	/^struct mg_auth_header {$/;"	s
mg_callback_t	external/vpiotr-mongoose-cpp/bindings/python/mongoose.py	/^mg_callback_t = ctypes.CFUNCTYPE(ctypes.c_void_p,$/;"	v
mg_callback_t	external/vpiotr-mongoose-cpp/mongoose.h	/^typedef void * (*mg_callback_t)(enum mg_event event,$/;"	t
mg_connect	external/vpiotr-mongoose-cpp/mongoose.c	/^static struct mg_connection *mg_connect(struct mg_connection *conn,$/;"	f	file:
mg_connection	external/vpiotr-mongoose-cpp/mongoose.c	/^struct mg_connection {$/;"	s	file:
mg_context	external/vpiotr-mongoose-cpp/mongoose.c	/^struct mg_context {$/;"	s	file:
mg_edit_passwords	external/vpiotr-mongoose-cpp/main.c	/^static int mg_edit_passwords(const char *fname, const char *domain,$/;"	f	file:
mg_event	external/vpiotr-mongoose-cpp/mongoose.h	/^enum mg_event {$/;"	g
mg_fopen	external/vpiotr-mongoose-cpp/mongoose.c	/^static FILE *mg_fopen(const char *path, const char *mode) {$/;"	f	file:
mg_fopen	external/vpiotr-mongoose-cpp/mongoose.c	195;"	d	file:
mg_free	external/vpiotr-mongoose-cpp/bindings/csharp/mongoose.cs	/^	[DllImport("_mongoose",CallingConvention=CallingConvention.Cdecl)] private static extern void	mg_free(IntPtr ptr);$/;"	m	class:MongooseConnection	file:
mg_get_cookie	external/vpiotr-mongoose-cpp/mongoose.c	/^int mg_get_cookie(const struct mg_connection *conn, const char *cookie_name,$/;"	f
mg_get_header	external/vpiotr-mongoose-cpp/bindings/csharp/mongoose.cs	/^	[DllImport("_mongoose",CallingConvention=CallingConvention.Cdecl)] private static extern string	mg_get_header(IntPtr ctx, string name);$/;"	m	class:MongooseConnection	file:
mg_get_header	external/vpiotr-mongoose-cpp/mongoose.c	/^const char *mg_get_header(const struct mg_connection *conn, const char *name) {$/;"	f
mg_get_option	external/vpiotr-mongoose-cpp/bindings/csharp/mongoose.cs	/^	[DllImport("_mongoose",CallingConvention=CallingConvention.Cdecl)] private static extern string	mg_get_option(IntPtr ctx, string name);$/;"	m	class:Mongoose	file:
mg_get_option	external/vpiotr-mongoose-cpp/mongoose.c	/^const char *mg_get_option(const struct mg_context *ctx, const char *name) {$/;"	f
mg_get_valid_option_names	external/vpiotr-mongoose-cpp/mongoose.c	/^const char **mg_get_valid_option_names(void) {$/;"	f
mg_get_var	external/vpiotr-mongoose-cpp/bindings/csharp/mongoose.cs	/^	[DllImport("_mongoose",CallingConvention=CallingConvention.Cdecl)] private static extern string	mg_get_var(IntPtr ctx, string name);$/;"	m	class:MongooseConnection	file:
mg_get_var	external/vpiotr-mongoose-cpp/mongoose.c	/^int mg_get_var(const char *buf, size_t buf_len, const char *name,$/;"	f
mg_header	external/vpiotr-mongoose-cpp/bindings/python/mongoose.py	/^class mg_header(ctypes.Structure):$/;"	c
mg_header	external/vpiotr-mongoose-cpp/mongoose.h	/^  struct mg_header {$/;"	s	struct:mg_request_info
mg_md5	external/vpiotr-mongoose-cpp/mongoose.c	/^void mg_md5(char *buf, ...) {$/;"	f
mg_mkdir	external/vpiotr-mongoose-cpp/mongoose.c	/^static int mg_mkdir(const char *path, int mode) {$/;"	f	file:
mg_mkdir	external/vpiotr-mongoose-cpp/mongoose.c	196;"	d	file:
mg_modify_passwords_file	external/vpiotr-mongoose-cpp/mongoose.c	/^int mg_modify_passwords_file(struct mg_context *ctx, const char *fname,$/;"	f
mg_printf	external/vpiotr-mongoose-cpp/mongoose.c	/^int mg_printf(struct mg_connection *conn, const char *fmt, ...) {$/;"	f
mg_read	external/vpiotr-mongoose-cpp/mongoose.c	/^int mg_read(struct mg_connection *conn, void *buf, size_t len) {$/;"	f
mg_read_user_data	external/vpiotr-mongoose-cpp/mongoose.c	/^void *mg_read_user_data(struct mg_connection *conn)$/;"	f
mg_remove	external/vpiotr-mongoose-cpp/mongoose.c	/^static int mg_remove(const char *path) {$/;"	f	file:
mg_remove	external/vpiotr-mongoose-cpp/mongoose.c	197;"	d	file:
mg_rename	external/vpiotr-mongoose-cpp/mongoose.c	/^static int mg_rename(const char* oldname, const char* newname) {$/;"	f	file:
mg_rename	external/vpiotr-mongoose-cpp/mongoose.c	198;"	d	file:
mg_request_info	external/vpiotr-mongoose-cpp/bindings/python/mongoose.py	/^class mg_request_info(ctypes.Structure):$/;"	c
mg_request_info	external/vpiotr-mongoose-cpp/mongoose.h	/^struct mg_request_info {$/;"	s
mg_send_authorization_request	external/vpiotr-mongoose-cpp/mongoose.c	/^void mg_send_authorization_request(struct mg_connection *conn, const char *nonce) {$/;"	f
mg_set_log_callback	external/vpiotr-mongoose-cpp/bindings/csharp/mongoose.cs	/^	[DllImport("_mongoose",CallingConvention=CallingConvention.Cdecl)] private static extern void	mg_set_log_callback(IntPtr ctx, MulticastDelegate func);$/;"	m	class:Mongoose	file:
mg_set_option	external/vpiotr-mongoose-cpp/bindings/csharp/mongoose.cs	/^	[DllImport("_mongoose",CallingConvention=CallingConvention.Cdecl)] private static extern int	mg_set_option(IntPtr ctx, string name, string value);$/;"	m	class:Mongoose	file:
mg_set_uri_callback	external/vpiotr-mongoose-cpp/bindings/csharp/mongoose.cs	/^	[DllImport("_mongoose",CallingConvention=CallingConvention.Cdecl)] private static extern void	mg_set_uri_callback(IntPtr ctx, string uri_regex, MulticastDelegate func, IntPtr data);$/;"	m	class:Mongoose	file:
mg_snprintf	external/vpiotr-mongoose-cpp/mongoose.c	/^static int mg_snprintf(struct mg_connection *conn, char *buf, size_t buflen,$/;"	f	file:
mg_start	external/vpiotr-mongoose-cpp/bindings/csharp/mongoose.cs	/^	[DllImport("_mongoose",CallingConvention=CallingConvention.Cdecl)] private static extern IntPtr	mg_start();$/;"	m	class:Mongoose	file:
mg_start	external/vpiotr-mongoose-cpp/mongoose.c	/^struct mg_context *mg_start(mg_callback_t user_callback, void *user_data,$/;"	f
mg_stat	external/vpiotr-mongoose-cpp/mongoose.c	/^static int mg_stat(const char *path, struct mgstat *stp) {$/;"	f	file:
mg_stop	external/vpiotr-mongoose-cpp/bindings/csharp/mongoose.cs	/^	[DllImport("_mongoose",CallingConvention=CallingConvention.Cdecl)] private static extern void	mg_stop(IntPtr ctx);$/;"	m	class:Mongoose	file:
mg_stop	external/vpiotr-mongoose-cpp/mongoose.c	/^void mg_stop(struct mg_context *ctx) {$/;"	f
mg_strcasecmp	external/vpiotr-mongoose-cpp/mongoose.c	/^static int mg_strcasecmp(const char *s1, const char *s2) {$/;"	f	file:
mg_strdup	external/vpiotr-mongoose-cpp/mongoose.c	/^static char * mg_strdup(const char *str) {$/;"	f	file:
mg_strlcpy	external/vpiotr-mongoose-cpp/mongoose.c	/^static void mg_strlcpy(register char *dst, register const char *src, size_t n) {$/;"	f	file:
mg_strncasecmp	external/vpiotr-mongoose-cpp/mongoose.c	/^static int mg_strncasecmp(const char *s1, const char *s2, size_t len) {$/;"	f	file:
mg_strndup	external/vpiotr-mongoose-cpp/mongoose.c	/^static char * mg_strndup(const char *ptr, size_t len) {$/;"	f	file:
mg_thread_func_t	external/vpiotr-mongoose-cpp/mongoose.c	/^typedef void * (*mg_thread_func_t)(void *);$/;"	t	file:
mg_version	external/vpiotr-mongoose-cpp/bindings/csharp/mongoose.cs	/^	[DllImport("_mongoose",CallingConvention=CallingConvention.Cdecl)] private static extern string	mg_version();$/;"	m	class:Mongoose	file:
mg_version	external/vpiotr-mongoose-cpp/mongoose.c	/^const char *mg_version(void) {$/;"	f
mg_vsnprintf	external/vpiotr-mongoose-cpp/mongoose.c	/^static int mg_vsnprintf(struct mg_connection *conn, char *buf, size_t buflen,$/;"	f	file:
mg_write	external/vpiotr-mongoose-cpp/bindings/csharp/mongoose.cs	/^	[DllImport("_mongoose",CallingConvention=CallingConvention.Cdecl)] public static extern int	mg_write(IntPtr conn, string data, int length);$/;"	m	class:MongooseConnection	file:
mg_write	external/vpiotr-mongoose-cpp/mongoose.c	/^int mg_write(struct mg_connection *conn, const void *buf, size_t len) {$/;"	f
mgstat	external/vpiotr-mongoose-cpp/mongoose.c	/^struct mgstat {$/;"	s	file:
mime_type	external/vpiotr-mongoose-cpp/mongoose.c	/^    const char *mime_type;$/;"	m	struct:__anon5	file:
mime_type_len	external/vpiotr-mongoose-cpp/mongoose.c	/^    size_t mime_type_len;$/;"	m	struct:__anon5	file:
min	util/binary_minheap.hpp	/^    T min() { return values[0]; }$/;"	f	class:binary_minheap
minHeapify	util/binary_minheap.hpp	/^    void minHeapify(int i) {$/;"	f	class:binary_minheap
minvalue	metrics/metrics.hpp	/^    double minvalue;$/;"	m	struct:graphchi::metrics_entry
misses	io/stripedio.hpp	/^        size_t hits, misses;$/;"	m	class:graphchi::block_cache
mktime	external/vpiotr-mongoose-cpp/mongoose.c	/^static time_t mktime(struct tm *ptm) {$/;"	f	file:
mlock	io/stripedio.hpp	/^        mutex mlock;$/;"	m	class:graphchi::stripedio
mlock	metrics/metrics.hpp	/^      mutex mlock;$/;"	m	class:graphchi::metrics
mmap_file	engine/auxdata/degree_data.hpp	/^        degree * mmap_file;$/;"	m	class:graphchi::degree_data
mmap_file	engine/auxdata/vertex_data.hpp	/^        VertexDataType * mmap_file;$/;"	m	class:graphchi::vertex_data_store
mmap_info	io/stripedio.hpp	/^    struct mmap_info {$/;"	s	namespace:graphchi
mmap_length	engine/auxdata/degree_data.hpp	/^        size_t mmap_length;$/;"	m	class:graphchi::degree_data
mmap_length	engine/auxdata/vertex_data.hpp	/^        size_t mmap_length;$/;"	m	class:graphchi::vertex_data_store
mmaped	io/stripedio.hpp	/^        std::map<std::string, mmap_info> mmaped;$/;"	m	class:graphchi::stripedio
mmaplock	io/stripedio.hpp	/^        mutex mmaplock;$/;"	m	class:graphchi::stripedio
modification_lock	engine/graphchi_engine.hpp	/^        mutex modification_lock;$/;"	m	class:graphchi::graphchi_engine
modified	api/functional/functional_semisync.hpp	/^    bool modified;$/;"	m	class:graphchi::functional_vertex_unweighted_semisync
modified	api/graph_objects.hpp	/^        bool modified;$/;"	m	class:graphchi::internal_graphchi_vertex
modified	engine/auxdata/degree_data.hpp	/^        bool modified;$/;"	m	class:graphchi::degree_data
modifies_inedges	engine/graphchi_engine.hpp	/^        bool modifies_inedges;$/;"	m	class:graphchi::graphchi_engine
modifies_outedges	engine/graphchi_engine.hpp	/^        bool modifies_outedges;$/;"	m	class:graphchi::graphchi_engine
mongoose	external/vpiotr-mongoose-cpp/bindings/csharp/mongoose.cs	/^	public Mongoose	mongoose;$/;"	f	class:MongooseConnection
mongoose	external/vpiotr-mongoose-cpp/bindings/python/example.py	/^import mongoose$/;"	i
mongoose	external/vpiotr-mongoose-cpp/mongcpp.h	/^namespace mongoose$/;"	n
month_names	external/vpiotr-mongoose-cpp/mongoose.c	/^static const char *month_names[] = {$/;"	v	file:
month_number_to_month_name	external/vpiotr-mongoose-cpp/mongoose.c	/^static int month_number_to_month_name(const char *s) {$/;"	f	file:
move_close_to	shards/dynamicdata/slidingshard.hpp	/^        void move_close_to(vid_t v) {$/;"	f	class:graphchi::sliding_shard
move_close_to	shards/slidingshard.hpp	/^        void move_close_to(vid_t v) {$/;"	f	class:graphchi::sliding_shard
mplex	io/stripedio.hpp	/^        int mplex;$/;"	m	struct:graphchi::thrinfo
mplex_for_offset	io/stripedio.hpp	/^        int mplex_for_offset(int session, size_t off) {$/;"	f	class:graphchi::stripedio
mplex_priotasks	io/stripedio.hpp	/^        synchronized_queue<iotask> * mplex_priotasks;$/;"	m	class:graphchi::stripedio
mplex_readtasks	io/stripedio.hpp	/^        synchronized_queue<iotask> * mplex_readtasks;$/;"	m	class:graphchi::stripedio
mplex_thread	io/stripedio.hpp	/^        int mplex_thread;$/;"	m	struct:graphchi::stripe_chunk
mplex_writetasks	io/stripedio.hpp	/^        synchronized_queue<iotask> * mplex_writetasks;$/;"	m	class:graphchi::stripedio
mtime	external/vpiotr-mongoose-cpp/mongoose.c	/^    time_t mtime;      \/\/ Modification time$/;"	m	struct:mgstat	file:
multinomial	api/graphlab2_1_GAS_api/random.hpp	/^            size_t multinomial(const std::vector<Double>& prb) {$/;"	f	class:graphlab::random::generator
multinomial	api/graphlab2_1_GAS_api/random.hpp	/^        inline size_t multinomial(const std::vector<Double>& prb) {$/;"	f	namespace:graphlab::random
multinomial_cdf	api/graphlab2_1_GAS_api/random.hpp	/^            inline size_t multinomial_cdf(const std::vector<Double>& cdf) {$/;"	f	class:graphlab::random::generator
multinomial_cdf	api/graphlab2_1_GAS_api/random.hpp	/^        inline size_t multinomial_cdf(const std::vector<Double>& cdf) {$/;"	f	namespace:graphlab::random
multiplex	io/stripedio.hpp	/^        int multiplex;$/;"	m	class:graphchi::stripedio
multiplex_root	io/stripedio.hpp	/^        std::string multiplex_root;$/;"	m	class:graphchi::stripedio
multiplexed	io/stripedio.hpp	/^        bool multiplexed() {$/;"	f	class:graphchi::stripedio
multiplexprefix	io/stripedio.hpp	/^        std::string multiplexprefix(int stripe) {$/;"	f	class:graphchi::stripedio
multiplexprefix_random	io/stripedio.hpp	/^        std::string multiplexprefix_random() {$/;"	f	class:graphchi::stripedio
mut	api/graphlab2_1_GAS_api/random.cpp	/^            mutex mut;$/;"	m	class:graphlab::random::nondet_generator	file:
mut	api/graphlab2_1_GAS_api/random.cpp	/^            mutex mut;$/;"	m	struct:graphlab::random::source_registry	file:
mut	api/graphlab2_1_GAS_api/random.hpp	/^            mutex mut;$/;"	m	class:graphlab::random::generator
mut	logger/logger.hpp	/^  pthread_mutex_t mut;$/;"	m	class:file_logger
mutex	external/vpiotr-mongoose-cpp/mongoose.c	/^    pthread_mutex_t mutex;     \/\/ Protects (max|num)_threads$/;"	m	struct:mg_context	file:
mutex	util/pthread_tools.hpp	/^        mutex() {$/;"	f	class:graphchi::mutex
mutex	util/pthread_tools.hpp	/^    class mutex {$/;"	c	namespace:graphchi
my_strlcpy	external/vpiotr-mongoose-cpp/examples/chat.c	/^static void my_strlcpy(char *dst, const char *src, size_t len) {$/;"	f	file:
na	external/vpiotr-mongoose-cpp/examples/html/jquery.js	/^e(a[0],b):w}function J(){return(new Date).getTime()}function Y(){return false}function Z(){return true}function na(a,b,d){d[0].type=a;return c.event.handle.apply(b,d)}function oa(a){var b,d=[],f=[],e=arguments,j,i,o,k,n,r;i=c.data(this,"events");if(!(a.liveFired===this||!i||!i.live||a.button&&a.type==="click")){a.liveFired=this;var u=i.live.slice(0);for(k=0;k<u.length;k++){i=u[k];i.origType.replace(O,"")===a.type?f.push(i.selector):u.splice(k--,1)}j=c(a.target).closest(f,a.currentTarget);n=0;for(r=$/;"	f
name	external/vpiotr-mongoose-cpp/bindings/csharp/mongoose.cs	/^	public IntPtr	name;		\/\/ Using IntPtr here because if we use strings here,$/;"	f	struct:MongooseHeader
name	external/vpiotr-mongoose-cpp/mongoose.c	/^    const char *name;   \/\/ SSL function name$/;"	m	struct:ssl_func	file:
name	external/vpiotr-mongoose-cpp/mongoose.h	/^    char *name;          \/\/ HTTP header name$/;"	m	struct:mg_request_info::mg_header
name	metrics/metrics.hpp	/^    std::string name, ident;$/;"	m	class:graphchi::metrics
nc	external/vpiotr-mongoose-cpp/mongoose.h	/^  const char *user, *uri, *cnonce, *response, *qop, *nc, *nonce; \/\/ Fields of the Authorization header$/;"	m	struct:mg_auth_header
ncapacity	api/dynamicdata/chivector.hpp	/^    uint16_t ncapacity;$/;"	m	class:graphchi::chivector
ndeleted	tests/basic_dynamicengine_smoketest2.cpp	/^    volatile size_t ndeleted;$/;"	m	struct:SmokeTestProgram2	file:
nedges	api/graphchi_context.hpp	/^        size_t nedges;$/;"	m	struct:graphchi::graphchi_context
nedges	engine/graphchi_engine.hpp	/^        size_t nedges;$/;"	m	class:graphchi::graphchi_engine
nedges	preprocessing/sharder.hpp	/^        size_t nedges;$/;"	m	class:graphchi::sharder
needed	util/pthread_tools.hpp	/^        int needed;$/;"	m	class:graphchi::barrier
newConnection	external/vpiotr-mongoose-cpp/mongcpp.cpp	/^MongooseConnection *MongooseServer::newConnection(struct mg_connection *conn)$/;"	f	class:MongooseServer
newRequest	external/vpiotr-mongoose-cpp/mongcpp.cpp	/^MongooseRequest *MongooseServer::newRequest(struct mg_connection *conn, const struct mg_request_info *request)$/;"	f	class:MongooseServer
newResponse	external/vpiotr-mongoose-cpp/mongcpp.cpp	/^MongooseResponse *MongooseServer::newResponse(struct mg_connection *conn)$/;"	f	class:MongooseServer
new_edge_buffers	engine/dynamic_graphs/graphchi_dynamicgraph_engine.hpp	/^        std::vector< std::vector< edge_buffer * > > new_edge_buffers;$/;"	m	class:graphchi::graphchi_dynamicgraph_engine
new_iteration	api/ischeduler.hpp	/^        virtual void new_iteration(int iteration) {} $/;"	f	class:graphchi::non_scheduler
new_iteration	engine/bitset_scheduler.hpp	/^        void new_iteration(int iteration) {$/;"	f	class:graphchi::bitset_scheduler
new_message	external/vpiotr-mongoose-cpp/examples/chat.c	/^static struct message *new_message(void) {$/;"	f	file:
new_session	external/vpiotr-mongoose-cpp/examples/chat.c	/^static struct session *new_session(void) {$/;"	f	file:
next	external/vpiotr-mongoose-cpp/mongoose.c	/^    struct socket *next;  \/\/ Linkage$/;"	m	struct:socket	typeref:struct:socket::socket	file:
next	preprocessing/sharder.hpp	/^        edge_with_value<EdgeDataType> next() {$/;"	f	struct:graphchi::shovel_merge_source
next_bit_in_block	util/dense_bitset.hpp	/^        inline size_t next_bit_in_block(const uint32_t &b, const size_t &block) {$/;"	f	class:graphchi::dense_bitset
next_option	external/vpiotr-mongoose-cpp/mongoose.c	/^static const char *next_option(const char *list, struct vec *val,$/;"	f	file:
nextiteration_bitset	engine/bitset_scheduler.hpp	/^        dense_bitset * nextiteration_bitset;$/;"	m	class:graphchi::bitset_scheduler
niothreads	io/stripedio.hpp	/^        int niothreads; \/\/ threads per mplex$/;"	m	class:graphchi::stripedio
nitems	shards/dynamicdata/dynamicblock.hpp	/^        int nitems;$/;"	m	struct:graphchi::dynamicdata_block
niters	engine/graphchi_engine.hpp	/^        int niters;$/;"	m	class:graphchi::graphchi_engine
no_edgevalues	preprocessing/sharder.hpp	/^        bool no_edgevalues;$/;"	m	class:graphchi::sharder
non_scheduler	api/ischeduler.hpp	/^        non_scheduler() : nwarnings(0) {}$/;"	f	class:graphchi::non_scheduler
non_scheduler	api/ischeduler.hpp	/^    class non_scheduler : public ischeduler {$/;"	c	namespace:graphchi
nonce	external/vpiotr-mongoose-cpp/mongoose.h	/^  const char *user, *uri, *cnonce, *response, *qop, *nc, *nonce; \/\/ Fields of the Authorization header$/;"	m	struct:mg_auth_header
nondet_generator	api/graphlab2_1_GAS_api/random.cpp	/^            nondet_generator() {$/;"	f	class:graphlab::random::nondet_generator
nondet_generator	api/graphlab2_1_GAS_api/random.cpp	/^        class nondet_generator {$/;"	c	namespace:graphlab::random	file:
nondet_seed	api/graphlab2_1_GAS_api/random.cpp	/^            void nondet_seed() {$/;"	f	struct:graphlab::random::source_registry
nondet_seed	api/graphlab2_1_GAS_api/random.cpp	/^        void generator::nondet_seed() {$/;"	f	class:graphlab::random::generator
nondet_seed	api/graphlab2_1_GAS_api/random.cpp	/^        void nondet_seed() { source_registry::global().nondet_seed(); } $/;"	f	namespace:graphlab::random
normal	api/graphlab2_1_GAS_api/random.hpp	/^            inline double normal(const double mean = double(0),$/;"	f	class:graphlab::random::generator
normal	api/graphlab2_1_GAS_api/random.hpp	/^        inline double normal(const double mean = double(0), $/;"	f	namespace:graphlab::random
notselectbit	util/dense_bitset.hpp	/^        size_t notselectbit[8 * sizeof(size_t)];$/;"	m	class:graphchi::dense_bitset
nshards	engine/graphchi_engine.hpp	/^        int nshards;$/;"	m	class:graphchi::graphchi_engine
nshards	preprocessing/sharder.hpp	/^        int nshards;$/;"	m	class:graphchi::sharder
nsize	api/dynamicdata/chivector.hpp	/^    uint16_t nsize;$/;"	m	class:graphchi::chivector
null_reporter	metrics/reps/null_reporter.hpp	/^  class null_reporter : public imetrics_reporter {$/;"	c	namespace:graphchi
null_stream	logger/logger.hpp	/^struct null_stream {$/;"	s
num_buffered_edges	engine/dynamic_graphs/graphchi_dynamicgraph_engine.hpp	/^        size_t num_buffered_edges() {$/;"	f	class:graphchi::graphchi_dynamicgraph_engine
num_buffered_edges	engine/graphchi_engine.hpp	/^        virtual size_t num_buffered_edges() {$/;"	f	class:graphchi::graphchi_engine
num_bytes_sent	external/vpiotr-mongoose-cpp/mongoose.c	/^    int64_t num_bytes_sent;     \/\/ Total bytes sent to client$/;"	m	struct:mg_connection	file:
num_edges	api/graph_objects.hpp	/^        int num_edges() const { $/;"	f	class:graphchi::internal_graphchi_vertex
num_edges	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        virtual size_t num_edges() const { assert(false); return 0; } \/\/ Not implemented yet $/;"	f	class:graphlab::icontext
num_edges	engine/dynamic_graphs/graphchi_dynamicgraph_engine.hpp	/^        virtual size_t num_edges() {$/;"	f	class:graphchi::graphchi_dynamicgraph_engine
num_edges	engine/graphchi_engine.hpp	/^        virtual size_t num_edges() {$/;"	f	class:graphchi::graphchi_engine
num_edges	preprocessing/sharder.hpp	/^        size_t num_edges() {$/;"	f	class:graphchi::sharded_graph_output
num_edges	shards/dynamicdata/slidingshard.hpp	/^        size_t num_edges() {$/;"	f	class:graphchi::sliding_shard
num_edges	shards/slidingshard.hpp	/^        size_t num_edges() {$/;"	f	class:graphchi::sliding_shard
num_edges_	preprocessing/sharder.hpp	/^        size_t num_edges_;$/;"	m	class:graphchi::sharded_graph_output
num_edges_safe	engine/dynamic_graphs/graphchi_dynamicgraph_engine.hpp	/^        size_t num_edges_safe() {$/;"	f	class:graphchi::graphchi_dynamicgraph_engine
num_edges_safe	engine/graphchi_engine.hpp	/^        virtual size_t num_edges_safe() {$/;"	f	class:graphchi::graphchi_engine
num_edges_subinterval	engine/graphchi_engine.hpp	/^        size_t num_edges_subinterval(vid_t st, vid_t en) {$/;"	f	class:graphchi::graphchi_engine
num_headers	external/vpiotr-mongoose-cpp/bindings/csharp/mongoose.cs	/^	public int	num_headers;$/;"	f	struct:MongooseRequestInfo
num_headers	external/vpiotr-mongoose-cpp/mongoose.h	/^  int num_headers;       \/\/ Number of headers$/;"	m	struct:mg_request_info
num_in_edges	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        size_t num_in_edges() const {$/;"	f	struct:graphlab::GraphLabVertexWrapper
num_inedges	api/graph_objects.hpp	/^        int num_inedges() const { $/;"	f	class:graphchi::internal_graphchi_vertex
num_iterations	api/graphchi_context.hpp	/^        int num_iterations;$/;"	m	struct:graphchi::graphchi_context
num_out_edges	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        size_t num_out_edges() const {$/;"	f	struct:graphlab::GraphLabVertexWrapper
num_outedges	api/graph_objects.hpp	/^        int num_outedges() const { $/;"	f	class:graphchi::internal_graphchi_vertex
num_procs	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        virtual size_t num_procs() const { return gcontext->execthreads; }$/;"	f	class:graphlab::icontext
num_tasks	api/ischeduler.hpp	/^        virtual size_t num_tasks() { return 0; }$/;"	f	class:graphchi::non_scheduler
num_tasks	engine/bitset_scheduler.hpp	/^        size_t num_tasks() { $/;"	f	class:graphchi::bitset_scheduler
num_threads	external/vpiotr-mongoose-cpp/mongoose.c	/^    int num_threads;           \/\/ Number of threads$/;"	m	struct:mg_context	file:
num_updates	engine/graphchi_engine.hpp	/^        size_t num_updates() {$/;"	f	class:graphchi::graphchi_engine
num_vertices	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        virtual size_t num_vertices() const { return gcontext->nvertices; }$/;"	f	class:graphlab::icontext
num_vertices	engine/graphchi_engine.hpp	/^        virtual size_t num_vertices() {$/;"	f	class:graphchi::graphchi_engine
numedges	preprocessing/sharder.hpp	/^        size_t numedges;$/;"	m	struct:graphchi::shard_flushinfo
numedges	preprocessing/sharder.hpp	/^        size_t numedges;$/;"	m	struct:graphchi::shovel_merge_source
numshovels	preprocessing/sharder.hpp	/^        int numshovels;$/;"	m	class:graphchi::sharder
nupdates	engine/graphchi_engine.hpp	/^        size_t nupdates;$/;"	m	class:graphchi::graphchi_engine
nvars	external/vpiotr-mongoose-cpp/mongoose.c	/^    int nvars; \/\/ Number of variables$/;"	m	struct:cgi_env_block	file:
nvertices	api/graphchi_context.hpp	/^        size_t nvertices;$/;"	m	struct:graphchi::graphchi_context
nwarnings	api/ischeduler.hpp	/^        int nwarnings;$/;"	m	class:graphchi::non_scheduler
o	external/vpiotr-mongoose-cpp/test/test.pl	/^sub o {$/;"	s
oa	external/vpiotr-mongoose-cpp/examples/html/jquery.js	/^e(a[0],b):w}function J(){return(new Date).getTime()}function Y(){return false}function Z(){return true}function na(a,b,d){d[0].type=a;return c.event.handle.apply(b,d)}function oa(a){var b,d=[],f=[],e=arguments,j,i,o,k,n,r;i=c.data(this,"events");if(!(a.liveFired===this||!i||!i.live||a.button&&a.type==="click")){a.liveFired=this;var u=i.live.slice(0);for(k=0;k<u.length;k++){i=u[k];i.origType.replace(O,"")===a.type?f.push(i.selector):u.splice(k--,1)}j=c(a.target).closest(f,a.currentTarget);n=0;for(r=$/;"	f
off_t	external/vpiotr-mongoose-cpp/mongoose.c	/^typedef long off_t;$/;"	t	file:
offset	io/stripedio.hpp	/^        size_t offset;$/;"	m	struct:graphchi::iotask
offset	io/stripedio.hpp	/^        size_t offset;$/;"	m	struct:graphchi::stripe_chunk
offset	shards/dynamicdata/slidingshard.hpp	/^        size_t offset;$/;"	m	struct:graphchi::sblock
offset	shards/slidingshard.hpp	/^        size_t offset;$/;"	m	struct:graphchi::sblock
offset_for_stream_cont	shards/dynamicdata/memoryshard.hpp	/^        size_t offset_for_stream_cont() {$/;"	f	class:graphchi::memory_shard
offset_for_stream_cont	shards/memoryshard.hpp	/^        size_t offset_for_stream_cont() {$/;"	f	class:graphchi::memory_shard
offset_vid_for_stream_cont	shards/dynamicdata/memoryshard.hpp	/^        vid_t offset_vid_for_stream_cont() {$/;"	f	class:graphchi::memory_shard
offset_vid_for_stream_cont	shards/memoryshard.hpp	/^        vid_t offset_vid_for_stream_cont() {$/;"	f	class:graphchi::memory_shard
oldval	graphchi_types.hpp	/^        ET & oldval(int iter) {$/;"	f	struct:graphchi::PairContainer
on_windows	external/vpiotr-mongoose-cpp/test/test.pl	/^sub on_windows { $^O =~ \/win32\/i; }$/;"	s
one_shard_intervals	preprocessing/sharder.hpp	/^        void one_shard_intervals() {$/;"	f	class:graphchi::sharder
only_adjacency	engine/graphchi_engine.hpp	/^        bool only_adjacency;$/;"	m	class:graphchi::graphchi_engine
only_adjacency	shards/dynamicdata/memoryshard.hpp	/^        bool only_adjacency;$/;"	m	class:graphchi::memory_shard
only_adjacency	shards/dynamicdata/slidingshard.hpp	/^        bool only_adjacency;$/;"	m	class:graphchi::sliding_shard
only_adjacency	shards/memoryshard.hpp	/^        bool only_adjacency;$/;"	m	class:graphchi::memory_shard
only_adjacency	shards/slidingshard.hpp	/^        bool only_adjacency;$/;"	m	class:graphchi::sliding_shard
op_neighborval	tests/bulksync_functional_test.cpp	/^    int op_neighborval(graphchi_context &info, vertex_info& myvertex, vid_t nbid, int nbval) {$/;"	f	struct:smoketest_program
open	io/stripedio.hpp	/^        bool open;$/;"	m	struct:graphchi::io_descriptor
open_auth_file	external/vpiotr-mongoose-cpp/mongoose.c	/^static FILE *open_auth_file(struct mg_connection *conn, const char *path) {$/;"	f	file:
open_file	engine/auxdata/degree_data.hpp	/^        virtual void open_file(std::string base_filename) {$/;"	f	class:graphchi::degree_data
open_file	engine/auxdata/vertex_data.hpp	/^        virtual void open_file() {$/;"	f	class:graphchi::vertex_data_store
open_session	io/stripedio.hpp	/^        int open_session(std::string filename, bool readonly=false, bool compressed=false) {$/;"	f	class:graphchi::stripedio
opendir	external/vpiotr-mongoose-cpp/mongoose.c	/^static DIR * opendir(const char *name) {$/;"	f	file:
operator ()	api/graphlab2_1_GAS_api/random.cpp	/^            result_type operator()() {$/;"	f	class:graphlab::random::nondet_generator
operator ()	api/graphlab2_1_GAS_api/random.hpp	/^                inline std::ptrdiff_t operator()(std::ptrdiff_t end) {$/;"	f	struct:graphlab::random::generator::shuffle_functor
operator ()	preprocessing/sharder.hpp	/^        inline size_t operator() (edge_with_value<EdgeDataType> a) {return size_t(a.dst) * maxvertex + a.src;}$/;"	f	struct:graphchi::dstSrcF
operator ()	preprocessing/sharder.hpp	/^        inline vid_t operator() (edge_with_value<EdgeDataType> a) {return a.dst;}$/;"	f	struct:graphchi::dstF
operator ()	preprocessing/sharder.hpp	/^    struct srcF {inline vid_t operator() (edge_with_value<EdgeDataType> a) {return a.src;} };$/;"	f	struct:graphchi::srcF
operator ()	util/radixSort.hpp	/^        intT operator() (E p) {return _mask&(_f(p)>>_offset);}$/;"	f	struct:graphchi::eBits
operator ++	util/atomic.hpp	/^        T operator++() { return inc(); }$/;"	f	class:graphchi::atomic
operator ++	util/atomic.hpp	/^        T operator++(int) { return inc_ret_last(); }$/;"	f	class:graphchi::atomic
operator +=	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^                max_priority& operator+=(const max_priority& other) {$/;"	f	struct:graphlab::messages::max_priority
operator +=	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^                sum_priority& operator+=(const sum_priority& other) {$/;"	f	struct:graphlab::messages::sum_priority
operator +=	util/atomic.hpp	/^        T operator+=(const T val) { return inc(val); }$/;"	f	class:graphchi::atomic
operator --	util/atomic.hpp	/^        T operator--() { return dec(); }$/;"	f	class:graphchi::atomic
operator --	util/atomic.hpp	/^        T operator--(int) { return dec_ret_last(); }$/;"	f	class:graphchi::atomic
operator -=	util/atomic.hpp	/^        T operator-=(const T val) { return dec(val); }$/;"	f	class:graphchi::atomic
operator <	preprocessing/sharder.hpp	/^        bool operator< (edge_with_value<EdgeDataType> &x2) {$/;"	f	struct:graphchi::edge_with_value
operator <	util/kwaymerge.hpp	/^    bool operator< (value_source &x2)$/;"	f	struct:value_source
operator <<	logger/logger.hpp	/^  file_logger& operator<<(T a) {$/;"	f	class:file_logger
operator <<	logger/logger.hpp	/^  file_logger& operator<<(const char* a) {$/;"	f	class:file_logger
operator <<	logger/logger.hpp	/^  inline null_stream operator<<(T t) { return null_stream(); }$/;"	f	struct:null_stream
operator <<	logger/logger.hpp	/^  inline null_stream operator<<(const char* a) { return null_stream(); }$/;"	f	struct:null_stream
operator ==	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        bool operator==(vertex_type& other) const {$/;"	f	struct:graphlab::GraphLabVertexWrapper
operator T	preprocessing/conversions.hpp	/^        operator T() { return T(); }$/;"	f	struct:graphchi::dummyC
operator T	util/atomic.hpp	/^        operator T() const { return value; }$/;"	f	class:graphchi::atomic
operator []	engine/dynamic_graphs/edgebuffers.hpp	/^        created_edge<ET> * operator[](unsigned int i) {$/;"	f	class:graphchi::edge_buffer_flat
options	external/vpiotr-mongoose-cpp/examples/chat.c	/^static const char *options[] = {$/;"	v	file:
options	httpadmin/chi_httpadmin.hpp	/^    static const char *options[] = {$/;"	m	namespace:graphchi
order_by_degree	preprocessing/util/orderbydegree.hpp	/^    int order_by_degree(std::string &base_filename, int nshards, metrics &m) {$/;"	f	namespace:graphchi
orig_edges	engine/dynamic_graphs/graphchi_dynamicgraph_engine.hpp	/^        size_t orig_edges;$/;"	m	class:graphchi::graphchi_dynamicgraph_engine
os	external/vpiotr-mongoose-cpp/bindings/python/mongoose.py	/^import os$/;"	i
outc	api/functional/functional_semisync.hpp	/^    bool outc;$/;"	m	class:graphchi::functional_vertex_unweighted_semisync
outc	api/graph_objects.hpp	/^        volatile int outc;$/;"	m	class:graphchi::internal_graphchi_vertex
outdegree	api/functional/functional_defs.hpp	/^        int outdegree;$/;"	m	struct:graphchi::vertex_info
outdegree	engine/auxdata/degree_data.hpp	/^        int outdegree;$/;"	m	struct:graphchi::degree
outdegree	util/readdeg.cpp	/^    int outdegree;$/;"	m	struct:degree	file:
outedge	api/graph_objects.hpp	/^        graphchi_edge<EdgeDataType> * outedge(int i) {$/;"	f	class:graphchi::graphchi_vertex
outedges_ptr	api/graph_objects.hpp	/^        graphchi_edge<EdgeDataType> * outedges_ptr;$/;"	m	class:graphchi::internal_graphchi_vertex
output	engine/graphchi_engine.hpp	/^        ioutput<VertexDataType, EdgeDataType> * output(size_t idx) {$/;"	f	class:graphchi::graphchi_engine
output_edge	output/output.hpp	/^        virtual void output_edge(vid_t from, vid_t to, double value) {$/;"	f	class:graphchi::basic_text_output
output_edge	output/output.hpp	/^        virtual void output_edge(vid_t from, vid_t to, float value) {$/;"	f	class:graphchi::basic_text_output
output_edge	output/output.hpp	/^        virtual void output_edge(vid_t from, vid_t to, int value)  {$/;"	f	class:graphchi::basic_text_output
output_edge	output/output.hpp	/^        virtual void output_edge(vid_t from, vid_t to, size_t value)  {$/;"	f	class:graphchi::basic_text_output
output_edge	output/output.hpp	/^        void output_edge(vid_t from, vid_t to) {$/;"	f	class:graphchi::basic_text_output
output_edge	preprocessing/sharder.hpp	/^        virtual void output_edge(vid_t from, vid_t to, double value) {$/;"	f	class:graphchi::sharded_graph_output
output_edge	preprocessing/sharder.hpp	/^        virtual void output_edge(vid_t from, vid_t to, float value) {$/;"	f	class:graphchi::sharded_graph_output
output_edge	preprocessing/sharder.hpp	/^        virtual void output_edge(vid_t from, vid_t to, int value)  {$/;"	f	class:graphchi::sharded_graph_output
output_edge	preprocessing/sharder.hpp	/^        virtual void output_edge(vid_t from, vid_t to, size_t value)  {$/;"	f	class:graphchi::sharded_graph_output
output_edge	preprocessing/sharder.hpp	/^        void output_edge(vid_t from, vid_t to) {$/;"	f	class:graphchi::sharded_graph_output
output_edgeval	output/output.hpp	/^        void output_edgeval(vid_t from, vid_t to, ET value) {$/;"	f	class:graphchi::basic_text_output
output_edgeval	preprocessing/sharder.hpp	/^        void output_edgeval(vid_t from, vid_t to, ETFinal value) {$/;"	f	class:graphchi::sharded_graph_output
output_value	output/output.hpp	/^        void output_value(vid_t vid, VT value) {$/;"	f	class:graphchi::basic_text_output
output_value	preprocessing/sharder.hpp	/^        void output_value(vid_t vid, VT value) {$/;"	f	class:graphchi::sharded_graph_output
outputs	engine/graphchi_engine.hpp	/^        std::vector<ioutput<VertexDataType, EdgeDataType> *> outputs;$/;"	m	class:graphchi::graphchi_engine
parallel_safe	api/functional/functional_semisync.hpp	/^    bool parallel_safe;$/;"	m	class:graphchi::functional_vertex_unweighted_semisync
parallel_safe	api/graph_objects.hpp	/^        bool parallel_safe;$/;"	m	class:graphchi::internal_graphchi_vertex
parent	util/binary_minheap.hpp	/^    inline int parent(int i) { return (i+1)\/2-1; }$/;"	f	class:binary_minheap
parse	preprocessing/conversions.hpp	/^    static  void parse(double &x, const char * s) {$/;"	f	namespace:graphchi
parse	preprocessing/conversions.hpp	/^    static void parse(bool &x, const char * s) {$/;"	f	namespace:graphchi
parse	preprocessing/conversions.hpp	/^    static void parse(char &x, const char * s) {$/;"	f	namespace:graphchi
parse	preprocessing/conversions.hpp	/^    static void parse(dummy &x, const char *s) {}$/;"	f	namespace:graphchi
parse	preprocessing/conversions.hpp	/^    static void parse(float &x, const char * s) {$/;"	f	namespace:graphchi
parse	preprocessing/conversions.hpp	/^    static void parse(int &x, const char * s) {$/;"	f	namespace:graphchi
parse	preprocessing/conversions.hpp	/^    static void parse(long &x, const char * s) {$/;"	f	namespace:graphchi
parse	preprocessing/conversions.hpp	/^    static void parse(short &x, const char * s) {$/;"	f	namespace:graphchi
parse	preprocessing/conversions.hpp	/^    static void parse(unsigned int &x, const char * s) {$/;"	f	namespace:graphchi
parse	preprocessing/conversions.hpp	/^    void parse(PairContainer<T> &x, const char * s) {$/;"	f	namespace:graphchi
parse	preprocessing/conversions.hpp	/^    void parse(T &x, const char * s) {$/;"	f	namespace:graphchi
parseLine	preprocessing/conversions.hpp	/^    static std::vector<vid_t> VARIABLE_IS_NOT_USED parseLine(std::string line) {$/;"	f	namespace:graphchi
parse_auth_header	external/vpiotr-mongoose-cpp/mongoose.c	/^static void parse_auth_header(struct mg_connection *conn) {$/;"	f	file:
parse_date_string	external/vpiotr-mongoose-cpp/mongoose.c	/^static time_t parse_date_string(const char *s) {$/;"	f	file:
parse_http_headers	external/vpiotr-mongoose-cpp/mongoose.c	/^static void parse_http_headers(char **buf, struct mg_request_info *ri) {$/;"	f	file:
parse_http_request	external/vpiotr-mongoose-cpp/mongoose.c	/^static int parse_http_request(char *buf, struct mg_request_info *ri) {$/;"	f	file:
parse_multiple	preprocessing/conversions.hpp	/^    static void VARIABLE_IS_NOT_USED parse_multiple(std::vector<dummy> & values, char * s) {$/;"	f	namespace:graphchi
parse_multiple	preprocessing/conversions.hpp	/^    static void parse_multiple(typename std::vector<T> & values, char * s) {$/;"	f	namespace:graphchi
parse_port_string	external/vpiotr-mongoose-cpp/mongoose.c	/^static int parse_port_string(const struct vec *vec, struct socket *so) {$/;"	f	file:
parse_range_header	external/vpiotr-mongoose-cpp/mongoose.c	/^static int parse_range_header(const char *header, int64_t *a, int64_t *b) {$/;"	f	file:
parse_url	external/vpiotr-mongoose-cpp/mongoose.c	/^static int parse_url(const char *url, char *host, int *port) {$/;"	f	file:
pclose	external/vpiotr-mongoose-cpp/mongoose.c	112;"	d	file:
pdf2cdf	api/graphlab2_1_GAS_api/random.cpp	/^        void pdf2cdf(std::vector<double>& pdf) {$/;"	f	namespace:graphlab::random
peer	external/vpiotr-mongoose-cpp/mongoose.c	/^    struct mg_connection *peer; \/\/ Remote target in proxy mode$/;"	m	struct:mg_connection	typeref:struct:mg_connection::mg_connection	file:
pending_reads	io/stripedio.hpp	/^        volatile int pending_reads;$/;"	m	struct:graphchi::thrinfo
pending_writes	io/stripedio.hpp	/^        volatile int pending_writes;$/;"	m	struct:graphchi::thrinfo
permutation	api/graphlab2_1_GAS_api/random.hpp	/^            inline std::vector<T> permutation(const size_t nelems) {$/;"	f	class:graphlab::random::generator
permutation	api/graphlab2_1_GAS_api/random.hpp	/^        inline std::vector<T> permutation(const size_t nelems) { $/;"	f	namespace:graphlab::random
phase	preprocessing/sharder.hpp	/^        int phase;$/;"	m	class:graphchi::sharder
pid_t	external/vpiotr-mongoose-cpp/mongoose.c	130;"	d	file:
pipe	external/vpiotr-mongoose-cpp/mongoose.c	110;"	d	file:
plotdirectory	httpadmin/plotter.hpp	/^    static std::string plotdirectory() {$/;"	f	namespace:graphchi
plus	tests/bulksync_functional_test.cpp	/^    int plus(int curval, int toadd) {$/;"	f	struct:smoketest_program
pop	util/synchronized_queue.hpp	/^            T pop() {$/;"	f	class:graphchi::synchronized_queue
popen	external/vpiotr-mongoose-cpp/mongoose.c	111;"	d	file:
post	util/pthread_tools.hpp	/^        inline void post() const {$/;"	f	class:graphchi::semaphore
post_data	external/vpiotr-mongoose-cpp/bindings/csharp/mongoose.cs	/^	public IntPtr	post_data;$/;"	f	struct:MongooseRequestInfo
post_data_len	external/vpiotr-mongoose-cpp/bindings/csharp/mongoose.cs	/^	public int	post_data_len;$/;"	f	struct:MongooseRequestInfo
post_delta	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        virtual void post_delta(const vertex_type& vertex, $/;"	f	class:graphlab::icontext
preada	util/ioutil.hpp	/^void preada(int f, T * tbuf, size_t nbytes, size_t off) {$/;"	f
preada_async	io/stripedio.hpp	/^        void preada_async(int session,  T * tbuf, size_t nbytes, size_t off, volatile int * doneptr = NULL) {$/;"	f	class:graphchi::stripedio
preada_now	io/stripedio.hpp	/^        void preada_now(int session,  T * tbuf, size_t nbytes, size_t off, bool dupfd=false) {$/;"	f	class:graphchi::stripedio
preada_trunc	util/ioutil.hpp	/^void preada_trunc(int f, T * tbuf, size_t nbytes, size_t off) {$/;"	f
prefetch_range	util/pthread_tools.hpp	/^    inline void prefetch_range(void *addr, size_t len) {$/;"	f	namespace:graphchi
prefetch_range_write	util/pthread_tools.hpp	/^    inline void prefetch_range_write(void *addr, size_t len) {$/;"	f	namespace:graphchi
prefix	preprocessing/sharder.hpp	/^        std::string prefix;$/;"	m	class:graphchi::sharder
prepareHeaderValues	external/vpiotr-mongoose-cpp/mongcpp.cpp	/^ResponseValueList *MongooseResponse::prepareHeaderValues()$/;"	f	class:MongooseResponse
prepareOptions	external/vpiotr-mongoose-cpp/mongcpp.cpp	/^const char **MongooseServer::prepareOptions()$/;"	f	class:MongooseServer
prepare_cgi_environment	external/vpiotr-mongoose-cpp/mongoose.c	/^static void prepare_cgi_environment(struct mg_connection *conn,$/;"	f	file:
prepare_clean_slate	engine/dynamic_graphs/graphchi_dynamicgraph_engine.hpp	/^        void prepare_clean_slate() {$/;"	f	class:graphchi::graphchi_dynamicgraph_engine
preprocess_filename	api/chifilenames.hpp	/^    std::string preprocess_filename(std::string basefilename) {$/;"	f	namespace:graphchi
preprocessing_add_edge	preprocessing/sharder.hpp	/^        void preprocessing_add_edge(vid_t from, vid_t to) {$/;"	f	class:graphchi::sharder
preprocessing_add_edge	preprocessing/sharder.hpp	/^        void preprocessing_add_edge(vid_t from, vid_t to, EdgeDataType val, bool input_value=false) {$/;"	f	class:graphchi::sharder
preprocessing_add_edge_multival	preprocessing/sharder.hpp	/^        void preprocessing_add_edge_multival(vid_t from, vid_t to, std::vector<EdgeDataType> & vals) {$/;"	f	class:graphchi::sharder
prevvid	preprocessing/sharder.hpp	/^        vid_t prevvid;$/;"	m	class:graphchi::sharder
print_config	engine/graphchi_engine.hpp	/^        void print_config() {$/;"	f	class:graphchi::graphchi_engine
print_dir_entry	external/vpiotr-mongoose-cpp/mongoose.c	/^static void print_dir_entry(struct de *de) {$/;"	f	file:
print_session	io/stripedio.hpp	/^        void print_session(int session) {$/;"	f	class:graphchi::stripedio
printf	external/vpiotr-mongoose-cpp/bindings/python/mongoose.py	/^    def printf(self, fmt, *args):$/;"	m	class:Connection
prioqueue	io/stripedio.hpp	/^        synchronized_queue<iotask> * prioqueue;$/;"	m	struct:graphchi::thrinfo
priority	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^                double priority() const { return value; }$/;"	f	struct:graphlab::messages::max_priority
priority	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^                double priority() const { return value; }$/;"	f	struct:graphlab::messages::sum_priority
process_command_line_arguments	external/vpiotr-mongoose-cpp/main.c	/^static void process_command_line_arguments(char *argv[], char **options) {$/;"	f	file:
process_new_connection	external/vpiotr-mongoose-cpp/mongoose.c	/^static void process_new_connection(struct mg_connection *conn) {$/;"	f	file:
procid	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^            virtual size_t procid() const { return (size_t) omp_get_thread_num(); }$/;"	f	class:graphlab::icontext
produce_socket	external/vpiotr-mongoose-cpp/mongoose.c	/^static void produce_socket(struct mg_context *ctx, const struct socket *sp) {$/;"	f	file:
pthread_cond_broadcast	external/vpiotr-mongoose-cpp/mongoose.c	/^static int pthread_cond_broadcast(pthread_cond_t *cv) {$/;"	f	file:
pthread_cond_destroy	external/vpiotr-mongoose-cpp/mongoose.c	/^static int pthread_cond_destroy(pthread_cond_t *cv) {$/;"	f	file:
pthread_cond_init	external/vpiotr-mongoose-cpp/mongoose.c	/^static int pthread_cond_init(pthread_cond_t *cv, const void *unused) {$/;"	f	file:
pthread_cond_signal	external/vpiotr-mongoose-cpp/mongoose.c	/^static int pthread_cond_signal(pthread_cond_t *cv) {$/;"	f	file:
pthread_cond_t	external/vpiotr-mongoose-cpp/mongoose.c	/^typedef struct {HANDLE signal, broadcast;} pthread_cond_t;$/;"	t	typeref:struct:__anon2	file:
pthread_cond_wait	external/vpiotr-mongoose-cpp/mongoose.c	/^static int pthread_cond_wait(pthread_cond_t *cv, pthread_mutex_t *mutex) {$/;"	f	file:
pthread_mutex_destroy	external/vpiotr-mongoose-cpp/mongoose.c	/^static int pthread_mutex_destroy(pthread_mutex_t *mutex) {$/;"	f	file:
pthread_mutex_init	external/vpiotr-mongoose-cpp/mongoose.c	/^static int pthread_mutex_init(pthread_mutex_t *mutex, void *unused) {$/;"	f	file:
pthread_mutex_lock	external/vpiotr-mongoose-cpp/mongoose.c	/^static int pthread_mutex_lock(pthread_mutex_t *mutex) {$/;"	f	file:
pthread_mutex_t	external/vpiotr-mongoose-cpp/mongoose.c	/^typedef HANDLE pthread_mutex_t;$/;"	t	file:
pthread_mutex_unlock	external/vpiotr-mongoose-cpp/mongoose.c	/^static int pthread_mutex_unlock(pthread_mutex_t *mutex) {$/;"	f	file:
pthread_self	external/vpiotr-mongoose-cpp/mongoose.c	/^static pthread_t pthread_self(void) {$/;"	f	file:
pthread_t	external/vpiotr-mongoose-cpp/mongoose.c	/^typedef DWORD pthread_t;$/;"	t	file:
ptr	external/vpiotr-mongoose-cpp/mongoose.c	/^    const char *ptr;$/;"	m	struct:vec	file:
ptr	external/vpiotr-mongoose-cpp/mongoose.c	/^    void  (*ptr)(void); \/\/ Function pointer$/;"	m	struct:ssl_func	file:
ptr	io/stripedio.hpp	/^        char * ptr;$/;"	m	struct:graphchi::refcountptr
ptr	io/stripedio.hpp	/^        refcountptr * ptr;$/;"	m	struct:graphchi::iotask
ptr	io/stripedio.hpp	/^        void * ptr;$/;"	m	struct:graphchi::mmap_info
ptr	shards/dynamicdata/slidingshard.hpp	/^        uint8_t * ptr;$/;"	m	struct:graphchi::sblock
ptr	shards/slidingshard.hpp	/^        uint8_t * ptr;$/;"	m	struct:graphchi::sblock
ptroffset	io/stripedio.hpp	/^        size_t ptroffset;$/;"	m	struct:graphchi::iotask
pull	external/vpiotr-mongoose-cpp/mongoose.c	/^static int pull(FILE *fp, SOCKET sock, SSL *ssl, char *buf, int len) {$/;"	f	file:
push	external/vpiotr-mongoose-cpp/mongoose.c	/^static int64_t push(FILE *fp, SOCKET sock, SSL *ssl, const char *buf,$/;"	f	file:
push	util/synchronized_queue.hpp	/^            void push(const T &item) {$/;"	f	class:graphchi::synchronized_queue
put_dir	external/vpiotr-mongoose-cpp/mongoose.c	/^static int put_dir(const char *path) {$/;"	f	file:
put_file	external/vpiotr-mongoose-cpp/mongoose.c	/^static void put_file(struct mg_connection *conn, const char *path) {$/;"	f	file:
pwritea	util/ioutil.hpp	/^void pwritea(int f, T * tbuf, size_t nbytes, size_t off) {$/;"	f
pwritea_async	io/stripedio.hpp	/^        void pwritea_async(int session, T * tbuf, size_t nbytes, size_t off, bool free_after, bool close_fd=false) {$/;"	f	class:graphchi::stripedio
pwritea_now	io/stripedio.hpp	/^        void pwritea_now(int session, T * tbuf, size_t nbytes, size_t off) {$/;"	f	class:graphchi::stripedio
qa.K	external/vpiotr-mongoose-cpp/examples/html/jquery.js	/^true;if(j=c.fragments[a[0]])if(j!==1)f=j}if(!f){f=b.createDocumentFragment();c.clean(a,b,f,d)}if(e)c.fragments[a[0]]=j?f:1;return{fragment:f,cacheable:e}}function K(a,b){var d={};c.each(va.concat.apply([],va.slice(0,b)),function(){d[this]=a});return d}function wa(a){return"scrollTo"in a&&a.document?a:a.nodeType===9?a.defaultView||a.parentWindow:false}var c=function(a,b){return new c.fn.init(a,b)},Ra=A.jQuery,Sa=A.$,s=A.document,T,Ta=\/^[^<]*(<[\\w\\W]+>)[^>]*$|^#([\\w-]+)$\/,Ua=\/^.[^:#\\[\\.,]*$\/,Va=\/\\S\/,$/;"	f
qa.ra	external/vpiotr-mongoose-cpp/examples/html/jquery.js	/^"&")}function qa(a){return!a||!a.parentNode||a.parentNode.nodeType===11}function ra(a,b){var d=0;b.each(function(){if(this.nodeName===(a[d]&&a[d].nodeName)){var f=c.data(a[d++]),e=c.data(this,f);if(f=f&&f.events){delete e.handle;e.events={};for(var j in f)for(var i in f[j])c.event.add(this,j,f[j][i],f[j][i].data)}}})}function sa(a,b,d){var f,e,j;b=b&&b[0]?b[0].ownerDocument||b[0]:s;if(a.length===1&&typeof a[0]==="string"&&a[0].length<512&&b===s&&!ta.test(a[0])&&(c.support.checkClone||!ua.test(a[0]))){e=$/;"	f
qa.sa	external/vpiotr-mongoose-cpp/examples/html/jquery.js	/^"&")}function qa(a){return!a||!a.parentNode||a.parentNode.nodeType===11}function ra(a,b){var d=0;b.each(function(){if(this.nodeName===(a[d]&&a[d].nodeName)){var f=c.data(a[d++]),e=c.data(this,f);if(f=f&&f.events){delete e.handle;e.events={};for(var j in f)for(var i in f[j])c.event.add(this,j,f[j][i],f[j][i].data)}}})}function sa(a,b,d){var f,e,j;b=b&&b[0]?b[0].ownerDocument||b[0]:s;if(a.length===1&&typeof a[0]==="string"&&a[0].length<512&&b===s&&!ta.test(a[0])&&(c.support.checkClone||!ua.test(a[0]))){e=$/;"	f
qa.wa	external/vpiotr-mongoose-cpp/examples/html/jquery.js	/^true;if(j=c.fragments[a[0]])if(j!==1)f=j}if(!f){f=b.createDocumentFragment();c.clean(a,b,f,d)}if(e)c.fragments[a[0]]=j?f:1;return{fragment:f,cacheable:e}}function K(a,b){var d={};c.each(va.concat.apply([],va.slice(0,b)),function(){d[this]=a});return d}function wa(a){return"scrollTo"in a&&a.document?a:a.nodeType===9?a.defaultView||a.parentWindow:false}var c=function(a,b){return new c.fn.init(a,b)},Ra=A.jQuery,Sa=A.$,s=A.document,T,Ta=\/^[^<]*(<[\\w\\W]+>)[^>]*$|^#([\\w-]+)$\/,Ua=\/^.[^:#\\[\\.,]*$\/,Va=\/\\S\/,$/;"	f
qop	external/vpiotr-mongoose-cpp/mongoose.h	/^  const char *user, *uri, *cnonce, *response, *qop, *nc, *nonce; \/\/ Fields of the Authorization header$/;"	m	struct:mg_auth_header
query_string	external/vpiotr-mongoose-cpp/bindings/csharp/mongoose.cs	/^	public string	query_string;$/;"	f	struct:MongooseRequestInfo
query_string	external/vpiotr-mongoose-cpp/mongoose.h	/^  char *query_string;    \/\/ \\0 - terminated$/;"	m	struct:mg_request_info
queue	external/vpiotr-mongoose-cpp/mongoose.c	/^    struct socket queue[20];   \/\/ Accepted sockets$/;"	m	struct:mg_context	typeref:struct:mg_context::socket	file:
quickSort	util/qsort.hpp	/^void quickSort(E* A, int n, BinPred f) {$/;"	f
radixStep	util/radixSort.hpp	/^    void radixStep(E* A, E* B, bIndexT *Tmp, intT* counts,$/;"	f	namespace:graphchi
rand	api/graphlab2_1_GAS_api/random.hpp	/^        inline int rand() { return fast_uniform(0, RAND_MAX); }$/;"	f	namespace:graphlab::random
rand01	api/graphlab2_1_GAS_api/random.hpp	/^        inline double rand01() { return uniform<double>(0, 1); }$/;"	f	namespace:graphlab::random
random	api/graphlab2_1_GAS_api/random.cpp	/^    namespace random {$/;"	n	namespace:graphlab	file:
random	api/graphlab2_1_GAS_api/random.hpp	/^    namespace random {$/;"	n	namespace:graphlab
random	external/vpiotr-mongoose-cpp/examples/chat.c	/^  char random[20];          \/\/ Random data used for extra user validation$/;"	m	struct:session	file:
random_outedge	api/graph_objects.hpp	/^        graphchi_edge<EdgeDataType> * random_outedge() {$/;"	f	class:graphchi::graphchi_vertex
randomization	engine/graphchi_engine.hpp	/^        bool randomization;$/;"	m	class:graphchi::graphchi_engine
range_end	shards/dynamicdata/memoryshard.hpp	/^        vid_t range_end;$/;"	m	class:graphchi::memory_shard
range_end	shards/dynamicdata/slidingshard.hpp	/^        vid_t range_st, range_end;$/;"	m	class:graphchi::sliding_shard
range_end	shards/memoryshard.hpp	/^        vid_t range_end;$/;"	m	class:graphchi::memory_shard
range_end	shards/slidingshard.hpp	/^        vid_t range_st, range_end;$/;"	m	class:graphchi::sliding_shard
range_st	shards/dynamicdata/memoryshard.hpp	/^        vid_t range_st;$/;"	m	class:graphchi::memory_shard
range_st	shards/dynamicdata/slidingshard.hpp	/^        vid_t range_st, range_end;$/;"	m	class:graphchi::sliding_shard
range_st	shards/memoryshard.hpp	/^        vid_t range_st;$/;"	m	class:graphchi::memory_shard
range_st	shards/slidingshard.hpp	/^        vid_t range_st, range_end;$/;"	m	class:graphchi::sliding_shard
range_start_edge_ptr	shards/dynamicdata/memoryshard.hpp	/^        size_t range_start_edge_ptr;$/;"	m	class:graphchi::memory_shard
range_start_edge_ptr	shards/memoryshard.hpp	/^        size_t range_start_edge_ptr;$/;"	m	class:graphchi::memory_shard
range_start_offset	shards/dynamicdata/memoryshard.hpp	/^        size_t range_start_offset; \/\/ First byte for this range's vertices (used for writing only outedges)$/;"	m	class:graphchi::memory_shard
range_start_offset	shards/memoryshard.hpp	/^        size_t range_start_offset; \/\/ First byte for this range's vertices (used for writing only outedges)$/;"	m	class:graphchi::memory_shard
rdunlock	util/pthread_tools.hpp	/^        inline void rdunlock() const {$/;"	f	class:graphchi::rwlock
rdunlock	util/pthread_tools.hpp	/^        inline void rdunlock() const {$/;"	f	class:graphchi::spinrwlock
read	external/vpiotr-mongoose-cpp/bindings/python/mongoose.py	/^    def read(self, size):$/;"	m	class:Connection
read	external/vpiotr-mongoose-cpp/mongcpp.cpp	/^int MongooseConnection::read(void *buf, size_t len)$/;"	f	class:MongooseConnection
read	external/vpiotr-mongoose-cpp/mongoose.c	119;"	d	file:
read	util/pthread_tools.hpp	/^                unsigned char read;$/;"	m	struct:graphchi::spinrwlock::rwticket::__anon1
readQueryString	external/vpiotr-mongoose-cpp/mongcpp.cpp	/^const std::string MongooseRequest::readQueryString() const$/;"	f	class:MongooseRequest
read_async	shards/dynamicdata/slidingshard.hpp	/^        void read_async(stripedio * iomgr) {$/;"	f	struct:graphchi::sblock
read_async	shards/slidingshard.hpp	/^        void read_async(stripedio * iomgr) {$/;"	f	struct:graphchi::sblock
read_compressed	util/ioutil.hpp	/^void read_compressed(int f, T * tbuf, size_t nbytes) {$/;"	f
read_edgeptr	shards/dynamicdata/slidingshard.hpp	/^        inline ET * read_edgeptr() {$/;"	f	class:graphchi::sliding_shard
read_edgeptr	shards/slidingshard.hpp	/^        inline U * read_edgeptr() {$/;"	f	class:graphchi::sliding_shard
read_file	external/vpiotr-mongoose-cpp/test/test.pl	/^sub read_file {$/;"	s
read_next_vertices	shards/dynamicdata/slidingshard.hpp	/^        void read_next_vertices(int nvecs, vid_t start,  std::vector<svertex_t> & prealloc, bool record_index=false, bool disable_writes=false)  {$/;"	f	class:graphchi::sliding_shard
read_next_vertices	shards/slidingshard.hpp	/^        void read_next_vertices(int nvecs, vid_t start,  std::vector<svertex_t> & prealloc, bool record_index=false, bool disable_writes=false)  {$/;"	f	class:graphchi::sliding_shard
read_now	shards/dynamicdata/slidingshard.hpp	/^        void read_now(stripedio * iomgr) {$/;"	f	struct:graphchi::sblock
read_now	shards/slidingshard.hpp	/^        void read_now(stripedio * iomgr) {$/;"	f	struct:graphchi::sblock
read_outedges	api/functional/functional_bulksync.hpp	/^        static bool read_outedges() {$/;"	f	class:graphchi::functional_vertex_unweighted_bulksync
read_outedges	api/functional/functional_semisync.hpp	/^    static bool read_outedges() {$/;"	f	class:graphchi::functional_vertex_unweighted_semisync
read_outedges	api/graph_objects.hpp	/^        static bool read_outedges() {$/;"	f	class:graphchi::graphchi_vertex
read_request	external/vpiotr-mongoose-cpp/mongoose.c	/^static int read_request(FILE *fp, SOCKET sock, SSL *ssl, char *buf, int bufsiz,$/;"	f	file:
read_val	shards/dynamicdata/slidingshard.hpp	/^        inline U read_val() {$/;"	f	class:graphchi::sliding_shard
read_val	shards/slidingshard.hpp	/^        inline U read_val() {$/;"	f	class:graphchi::sliding_shard
readdesc	shards/dynamicdata/slidingshard.hpp	/^        int readdesc;$/;"	m	struct:graphchi::sblock
readdesc	shards/slidingshard.hpp	/^        int readdesc;$/;"	m	struct:graphchi::sblock
readdescs	io/stripedio.hpp	/^        std::vector<int> readdescs;$/;"	m	struct:graphchi::io_descriptor
readdir	external/vpiotr-mongoose-cpp/mongoose.c	/^struct dirent * readdir(DIR *dir) {$/;"	f
readfull	util/ioutil.hpp	/^size_t readfull(int f, T ** buf) {$/;"	f
readlock	util/pthread_tools.hpp	/^        inline void readlock() const {$/;"	f	class:graphchi::rwlock
readlock	util/pthread_tools.hpp	/^        inline void readlock() const {$/;"	f	class:graphchi::spinrwlock
readqueue	io/stripedio.hpp	/^        synchronized_queue<iotask> * readqueue;$/;"	m	struct:graphchi::thrinfo
ready	api/functional/functional_bulksync.hpp	/^        void ready(graphchi_context &ginfo) {$/;"	f	class:graphchi::functional_vertex_unweighted_bulksync
ready	api/functional/functional_semisync.hpp	/^    void ready(graphchi_context &gcontext_) {$/;"	f	class:graphchi::functional_vertex_unweighted_semisync
real_rng	api/graphlab2_1_GAS_api/random.hpp	/^            real_rng_type real_rng;$/;"	m	class:graphlab::random::generator
real_rng_type	api/graphlab2_1_GAS_api/random.hpp	/^            typedef boost::lagged_fibonacci607 real_rng_type;$/;"	t	class:graphlab::random::generator
redirect_to_login	external/vpiotr-mongoose-cpp/examples/chat.c	/^static void redirect_to_login(struct mg_connection *conn,$/;"	f	file:
redirect_to_ssl	external/vpiotr-mongoose-cpp/examples/chat.c	/^static void redirect_to_ssl(struct mg_connection *conn,$/;"	f	file:
refcountptr	io/stripedio.hpp	/^        refcountptr(char * ptr, int count) : ptr(ptr), count(count) {}$/;"	f	struct:graphchi::refcountptr
refcountptr	io/stripedio.hpp	/^    struct refcountptr {$/;"	s	namespace:graphchi
register_generator	api/graphlab2_1_GAS_api/random.cpp	/^            void register_generator(generator* tls_ptr) {$/;"	f	struct:graphlab::random::source_registry
register_http_request_handler	httpadmin/chi_httpadmin.hpp	/^    static void register_http_request_handler(custom_request_handler * rh) {$/;"	f	namespace:graphchi
reinitialize_edge_data	engine/graphchi_engine.hpp	/^        void reinitialize_edge_data(ET zerovalue) {$/;"	f	class:graphchi::graphchi_engine
release	shards/dynamicdata/slidingshard.hpp	/^        void release(stripedio * iomgr) {$/;"	f	struct:graphchi::sblock
release	shards/slidingshard.hpp	/^        void release(stripedio * iomgr) {$/;"	f	struct:graphchi::sblock
release_prior_to_offset	shards/dynamicdata/slidingshard.hpp	/^        void release_prior_to_offset(bool all=false, bool disable_writes=false) { \/\/ disable writes is for the dynamic case$/;"	f	class:graphchi::sliding_shard
release_prior_to_offset	shards/slidingshard.hpp	/^        void release_prior_to_offset(bool all=false, bool disable_writes=false) { \/\/ disable writes is for the dynamic case$/;"	f	class:graphchi::sliding_shard
releaseblocks	engine/auxdata/dynamicdata/vertex_data_dynamic.hpp	/^        void releaseblocks() {$/;"	f	class:graphchi::vertex_data_store
remote_ip	external/vpiotr-mongoose-cpp/bindings/csharp/mongoose.cs	/^	public int	remote_ip; \/\/int to match the 32bit declaration in c$/;"	f	struct:MongooseRequestInfo
remote_ip	external/vpiotr-mongoose-cpp/mongoose.h	/^  long remote_ip;        \/\/ Client's IP address$/;"	m	struct:mg_request_info
remote_port	external/vpiotr-mongoose-cpp/bindings/csharp/mongoose.cs	/^	public int	remote_port;$/;"	f	struct:MongooseRequestInfo
remote_port	external/vpiotr-mongoose-cpp/mongoose.h	/^  int remote_port;       \/\/ Client's port$/;"	m	struct:mg_request_info
remote_user	external/vpiotr-mongoose-cpp/bindings/csharp/mongoose.cs	/^	public string	remote_user;$/;"	f	struct:MongooseRequestInfo
remote_user	external/vpiotr-mongoose-cpp/mongoose.h	/^  char *remote_user;     \/\/ Authenticated user$/;"	m	struct:mg_request_info
remove	api/dynamicdata/chivector.hpp	/^    void remove(int idx) {$/;"	f	class:graphchi::chivector
remove_alledges	api/graph_objects.hpp	/^        void VARIABLE_IS_NOT_USED remove_alledges() {$/;"	f	class:graphchi::graphchi_vertex
remove_allinedges	api/graph_objects.hpp	/^        void VARIABLE_IS_NOT_USED remove_allinedges() {$/;"	f	class:graphchi::graphchi_vertex
remove_alloutedges	api/graph_objects.hpp	/^        void VARIABLE_IS_NOT_USED remove_alloutedges() {$/;"	f	class:graphchi::graphchi_vertex
remove_double_dots_and_double_slashes	external/vpiotr-mongoose-cpp/mongoose.c	/^static void remove_double_dots_and_double_slashes(char *s) {$/;"	f	file:
remove_edge	api/graph_objects.hpp	/^        void VARIABLE_IS_NOT_USED remove_edge(int i) {$/;"	f	class:graphchi::graphchi_vertex
remove_edgev	api/graph_objects.hpp	/^    static void VARIABLE_IS_NOT_USED remove_edgev(graphchi_edge<bool> * e) {$/;"	f	namespace:graphchi
remove_edgev	api/graph_objects.hpp	/^    static void VARIABLE_IS_NOT_USED remove_edgev(graphchi_edge<int> * e) {$/;"	f	namespace:graphchi
remove_edgev	api/graph_objects.hpp	/^    static void VARIABLE_IS_NOT_USED remove_edgev(graphchi_edge<vid_t> * e) {$/;"	f	namespace:graphchi
remove_inedge	api/graph_objects.hpp	/^        void VARIABLE_IS_NOT_USED remove_inedge(int i) {$/;"	f	class:graphchi::graphchi_vertex
remove_outedge	api/graph_objects.hpp	/^        void VARIABLE_IS_NOT_USED remove_outedge(int i) {$/;"	f	class:graphchi::graphchi_vertex
remove_tasks	api/ischeduler.hpp	/^        virtual void remove_tasks(vid_t fromvertex, vid_t tovertex) {}$/;"	f	class:graphchi::non_scheduler
remove_tasks	engine/bitset_scheduler.hpp	/^        void remove_tasks(vid_t fromvertex, vid_t tovertex) {$/;"	f	class:graphchi::bitset_scheduler
repeat_updates	api/graphchi_program.hpp	/^        virtual bool repeat_updates(graphchi_context &gcontext) {$/;"	f	class:graphchi::GraphChiProgram
report	metrics/metrics.hpp	/^    void report(imetrics_reporter & reporter) {$/;"	f	class:graphchi::metrics
req	external/vpiotr-mongoose-cpp/test/test.pl	/^sub req {$/;"	s
reqhandlers	httpadmin/chi_httpadmin.hpp	/^    static std::vector<custom_request_handler *> reqhandlers;$/;"	m	namespace:graphchi
request_info	external/vpiotr-mongoose-cpp/mongoose.c	/^    struct mg_request_info request_info;$/;"	m	struct:mg_connection	typeref:struct:mg_connection::mg_request_info	file:
request_len	external/vpiotr-mongoose-cpp/mongoose.c	/^    int request_len;            \/\/ Size of the request + headers in a buffer$/;"	m	struct:mg_connection	file:
request_method	external/vpiotr-mongoose-cpp/bindings/csharp/mongoose.cs	/^	public string	request_method;$/;"	f	struct:MongooseRequestInfo
request_method	external/vpiotr-mongoose-cpp/mongoose.h	/^  char *request_method;  \/\/ "GET", "POST", etc$/;"	m	struct:mg_request_info
reset	tests/bulksync_functional_test.cpp	/^    int reset() {$/;"	f	struct:smoketest_program
reset_color	logger/logger.hpp	/^    void reset_color(FILE* handle)$/;"	f	class:file_logger
reset_deltas	api/graphchi_context.hpp	/^        void reset_deltas(int nthreads) {$/;"	f	struct:graphchi::graphchi_context
reset_per_request_attributes	external/vpiotr-mongoose-cpp/mongoose.c	/^static void reset_per_request_attributes(struct mg_connection *conn) {$/;"	f	file:
reset_vertexdata	engine/graphchi_engine.hpp	/^        bool reset_vertexdata;$/;"	m	class:graphchi::graphchi_engine
resize	engine/bitset_scheduler.hpp	/^        void resize(vid_t maxsize) {$/;"	f	class:graphchi::bitset_scheduler
resize	util/dense_bitset.hpp	/^        void resize(size_t n) {$/;"	f	class:graphchi::dense_bitset
response	external/vpiotr-mongoose-cpp/mongoose.h	/^  const char *user, *uri, *cnonce, *response, *qop, *nc, *nonce; \/\/ Fields of the Authorization header$/;"	m	struct:mg_auth_header
result	external/vpiotr-mongoose-cpp/mongoose.c	/^    struct dirent  result;$/;"	m	struct:DIR	typeref:struct:DIR::dirent	file:
result_type	api/graphlab2_1_GAS_api/random.cpp	/^            typedef size_t result_type;$/;"	t	class:graphlab::random::nondet_generator	file:
rev_foreach	api/graphlab2_1_GAS_api/graphlab.hpp	66;"	d
right	graphchi_types.hpp	/^        ET right;$/;"	m	struct:graphchi::PairContainer
right	util/binary_minheap.hpp	/^    inline int right(int i)  { return i*2 + 2; }$/;"	f	class:binary_minheap
rmcDelete	external/vpiotr-mongoose-cpp/mongcpp.h	/^    rmcDelete,$/;"	e	enum:mongoose::MongooseRequestMethodCode
rmcGet	external/vpiotr-mongoose-cpp/mongcpp.h	/^    rmcGet,$/;"	e	enum:mongoose::MongooseRequestMethodCode
rmcHead	external/vpiotr-mongoose-cpp/mongcpp.h	/^    rmcHead,$/;"	e	enum:mongoose::MongooseRequestMethodCode
rmcOptions	external/vpiotr-mongoose-cpp/mongcpp.h	/^    rmcOptions$/;"	e	enum:mongoose::MongooseRequestMethodCode
rmcPost	external/vpiotr-mongoose-cpp/mongcpp.h	/^    rmcPost,$/;"	e	enum:mongoose::MongooseRequestMethodCode
rmcPut	external/vpiotr-mongoose-cpp/mongcpp.h	/^    rmcPut,$/;"	e	enum:mongoose::MongooseRequestMethodCode
rmcTrace	external/vpiotr-mongoose-cpp/mongcpp.h	/^    rmcTrace,$/;"	e	enum:mongoose::MongooseRequestMethodCode
rmcUndef	external/vpiotr-mongoose-cpp/mongcpp.h	/^    rmcUndef,$/;"	e	enum:mongoose::MongooseRequestMethodCode
rnd_dev	api/graphlab2_1_GAS_api/random.cpp	/^            std::ifstream rnd_dev;$/;"	m	class:graphlab::random::nondet_generator	file:
rsa	external/vpiotr-mongoose-cpp/mongoose.c	/^    struct usa rsa;       \/\/ Remote socket address$/;"	m	struct:socket	typeref:struct:socket::usa	file:
run	engine/graphchi_engine.hpp	/^        void run(GraphChiProgram<VertexDataType, EdgeDataType, svertex_t> &userprogram, int _niters) {$/;"	f	class:graphchi::graphchi_engine
run_functional_unweighted_semisynchronous	api/functional/functional_api.hpp	/^    void run_functional_unweighted_semisynchronous(std::string filename, int niters, metrics &_m) {$/;"	f	namespace:graphchi
run_functional_unweighted_synchronous	api/functional/functional_api.hpp	/^    void run_functional_unweighted_synchronous(std::string filename, int niters, metrics &_m) {$/;"	f	namespace:graphchi
run_graphlab_edge_aggregator	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^ReductionType run_graphlab_edge_aggregator(std::string base_filename, int nshards,$/;"	f
run_graphlab_vertexprogram	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^            run_graphlab_vertexprogram(std::string base_filename, int nshards, int niters, bool scheduler, metrics & _m,$/;"	f
running	io/stripedio.hpp	/^        bool running;$/;"	m	struct:graphchi::thrinfo
runtime	api/graphchi_context.hpp	/^        double runtime() {$/;"	f	struct:graphchi::graphchi_context
rwlock	external/vpiotr-mongoose-cpp/examples/chat.c	/^static pthread_rwlock_t rwlock = PTHREAD_RWLOCK_INITIALIZER;$/;"	v	file:
rwlock	util/pthread_tools.hpp	/^        rwlock() {$/;"	f	class:graphchi::rwlock
rwlock	util/pthread_tools.hpp	/^    class rwlock {$/;"	c	namespace:graphchi
rwticket	util/pthread_tools.hpp	/^        union rwticket {$/;"	u	class:graphchi::spinrwlock
s	util/pthread_tools.hpp	/^            } s;$/;"	m	union:graphchi::spinrwlock::rwticket	typeref:struct:graphchi::spinrwlock::rwticket::__anon1
sa	external/vpiotr-mongoose-cpp/mongoose.c	/^        struct sockaddr sa;$/;"	m	union:usa::__anon3	typeref:struct:usa::__anon3::sockaddr	file:
safepop	util/synchronized_queue.hpp	/^            bool safepop(T * ret) {$/;"	f	class:graphchi::synchronized_queue
sample	api/graphlab2_1_GAS_api/random.hpp	/^                static inline IntType sample(RealRNG& real_rng,$/;"	f	struct:graphlab::random::distributions::uniform
sample	api/graphlab2_1_GAS_api/random.hpp	/^                static inline double sample(RealRNG& real_rng,$/;"	f	struct:graphlab::random::distributions::uniform
sample	api/graphlab2_1_GAS_api/random.hpp	/^                static inline float sample(RealRNG& real_rng,$/;"	f	struct:graphlab::random::distributions::uniform
save	engine/auxdata/degree_data.hpp	/^        void save() {$/;"	f	class:graphchi::degree_data
save	engine/auxdata/dynamicdata/vertex_data_dynamic.hpp	/^        virtual void save(bool async=false) {$/;"	f	class:graphchi::vertex_data_store
save	engine/auxdata/vertex_data.hpp	/^        virtual void save(bool async=false) {$/;"	f	class:graphchi::vertex_data_store
save_edgesfiles_after_inmemmode	engine/graphchi_engine.hpp	/^        bool save_edgesfiles_after_inmemmode;$/;"	m	class:graphchi::graphchi_engine
save_offset	shards/dynamicdata/slidingshard.hpp	/^        void save_offset() {$/;"	f	class:graphchi::sliding_shard
save_offset	shards/slidingshard.hpp	/^        void save_offset() {$/;"	f	class:graphchi::sliding_shard
save_vertices	engine/graphchi_engine.hpp	/^        void save_vertices(std::vector<svertex_t> &vertices) {$/;"	f	class:graphchi::graphchi_engine
sblock	shards/dynamicdata/slidingshard.hpp	/^        sblock() : writedesc(0), readdesc(0), active(false) { data = NULL; dynblock = NULL; }$/;"	f	struct:graphchi::sblock
sblock	shards/dynamicdata/slidingshard.hpp	/^        sblock(int wdesc, int rdesc, bool is_edata_block, std::string blockfilename) : writedesc(wdesc), readdesc(rdesc), active(false),$/;"	f	struct:graphchi::sblock
sblock	shards/dynamicdata/slidingshard.hpp	/^        sblock(int wdesc, int rdesc, bool is_edata_block=false) : writedesc(wdesc), readdesc(rdesc), active(false),$/;"	f	struct:graphchi::sblock
sblock	shards/dynamicdata/slidingshard.hpp	/^    struct sblock {$/;"	s	namespace:graphchi
sblock	shards/slidingshard.hpp	/^        sblock() : writedesc(0), readdesc(0), active(false) { data = NULL; }$/;"	f	struct:graphchi::sblock
sblock	shards/slidingshard.hpp	/^        sblock(int wdesc, int rdesc, bool is_edata_block=false) : writedesc(wdesc), readdesc(rdesc), active(false),$/;"	f	struct:graphchi::sblock
sblock	shards/slidingshard.hpp	/^    struct sblock {$/;"	s	namespace:graphchi
scatter	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        virtual void scatter(icontext_type& context, const vertex_type& vertex, $/;"	f	struct:graphlab::ivertex_program
scatter_edges	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        virtual edge_dir_type scatter_edges(icontext_type& context,$/;"	f	struct:graphlab::ivertex_program
scheduled	api/functional/functional_semisync.hpp	/^    bool scheduled;$/;"	m	class:graphchi::functional_vertex_unweighted_semisync
scheduled	api/graph_objects.hpp	/^        bool scheduled;$/;"	m	class:graphchi::internal_graphchi_vertex
scheduler	api/graphchi_context.hpp	/^        ischeduler * scheduler;$/;"	m	struct:graphchi::graphchi_context
scheduler	engine/graphchi_engine.hpp	/^        bitset_scheduler * scheduler;$/;"	m	class:graphchi::graphchi_engine
schedulerlock	engine/dynamic_graphs/graphchi_dynamicgraph_engine.hpp	/^        mutex schedulerlock;$/;"	m	class:graphchi::graphchi_dynamicgraph_engine
sdup	external/vpiotr-mongoose-cpp/main.c	/^static char *sdup(const char *str) {$/;"	f	file:
seed	api/graphlab2_1_GAS_api/random.cpp	/^            void seed() {$/;"	f	struct:graphlab::random::source_registry
seed	api/graphlab2_1_GAS_api/random.cpp	/^            void seed(const size_t number) {$/;"	f	struct:graphlab::random::source_registry
seed	api/graphlab2_1_GAS_api/random.cpp	/^        void seed() { source_registry::global().seed();  } $/;"	f	namespace:graphlab::random
seed	api/graphlab2_1_GAS_api/random.cpp	/^        void seed(const size_t seed_value) { $/;"	f	namespace:graphlab::random
seed	api/graphlab2_1_GAS_api/random.hpp	/^            inline void seed() {$/;"	f	class:graphlab::random::generator
seed	api/graphlab2_1_GAS_api/random.hpp	/^            void seed(generator& other){$/;"	f	class:graphlab::random::generator
seed	api/graphlab2_1_GAS_api/random.hpp	/^            void seed(size_t number) {$/;"	f	class:graphlab::random::generator
selectbit	util/dense_bitset.hpp	/^        size_t selectbit[8 * sizeof(size_t)];$/;"	m	class:graphchi::dense_bitset
semaphore	util/pthread_tools.hpp	/^        semaphore() {$/;"	f	class:graphchi::semaphore
semaphore	util/pthread_tools.hpp	/^    class semaphore {$/;"	c	namespace:graphchi
send	httpadmin/chi_httpadmin.hpp	/^    static void send(std::string json_info, struct mg_connection * conn,$/;"	f	namespace:graphchi
sendAuthorizationRequest	external/vpiotr-mongoose-cpp/mongcpp.cpp	/^void MongooseConnection::sendAuthorizationRequest(const std::string &nonce)$/;"	f	class:MongooseConnection
send_file_data	external/vpiotr-mongoose-cpp/mongoose.c	/^static void send_file_data(struct mg_connection *conn, FILE *fp, int64_t len) {$/;"	f	file:
send_http_error	external/vpiotr-mongoose-cpp/mongoose.c	/^static void send_http_error(struct mg_connection *conn, int status,$/;"	f	file:
send_server_message	external/vpiotr-mongoose-cpp/examples/chat.c	/^static void send_server_message(const char *fmt, ...) {$/;"	f	file:
send_ssi_file	external/vpiotr-mongoose-cpp/mongoose.c	/^static void send_ssi_file(struct mg_connection *conn, const char *path,$/;"	f	file:
server	external/vpiotr-mongoose-cpp/bindings/python/example.py	/^server = mongoose.Mongoose(EventHandler,$/;"	v
server_name	external/vpiotr-mongoose-cpp/main.c	/^static char server_name[40];        \/\/ Set by init_server_name()$/;"	v	file:
service_magic_argument	external/vpiotr-mongoose-cpp/main.c	/^static const char *service_magic_argument = "--";$/;"	v	file:
session	external/vpiotr-mongoose-cpp/examples/chat.c	/^struct session {$/;"	s	file:
session	io/stripedio.hpp	/^        int session;$/;"	m	struct:graphchi::iotask
session_id	external/vpiotr-mongoose-cpp/examples/chat.c	/^  char session_id[33];      \/\/ Session ID, must be unique$/;"	m	struct:session	file:
sessions	external/vpiotr-mongoose-cpp/examples/chat.c	/^static struct session sessions[MAX_SESSIONS];  \/\/ Current sessions$/;"	v	typeref:struct:session	file:
sessions	io/stripedio.hpp	/^        std::vector<io_descriptor *> sessions;$/;"	m	class:graphchi::stripedio
set	api/dynamicdata/chivector.hpp	/^    void set(int idx, T val){$/;"	f	class:graphchi::chivector
set	metrics/metrics.hpp	/^      inline void set(std::string key, int value) {$/;"	f	class:graphchi::metrics
set	metrics/metrics.hpp	/^    inline void set(double v) {$/;"	f	struct:graphchi::metrics_entry
set	metrics/metrics.hpp	/^    inline void set(std::string key, double value, metrictype type = REAL) {$/;"	f	class:graphchi::metrics
set	metrics/metrics.hpp	/^    inline void set(std::string key, size_t value) {$/;"	f	class:graphchi::metrics
set	metrics/metrics.hpp	/^    inline void set(std::string key, std::string s) {$/;"	f	class:graphchi::metrics
set	metrics/metrics.hpp	/^    inline void set(std::string s) {$/;"	f	struct:graphchi::metrics_entry
set	util/dense_bitset.hpp	/^        inline bool set(uint32_t b, bool value) {$/;"	f	class:graphchi::dense_bitset
setCacheDisabled	external/vpiotr-mongoose-cpp/mongcpp.cpp	/^void MongooseResponse::setCacheDisabled()$/;"	f	class:MongooseResponse
setConnectionAlive	external/vpiotr-mongoose-cpp/mongcpp.cpp	/^void MongooseResponse::setConnectionAlive(bool keepAlive)$/;"	f	class:MongooseResponse
setContentType	external/vpiotr-mongoose-cpp/mongcpp.cpp	/^void MongooseResponse::setContentType(const std::string &value)$/;"	f	class:MongooseResponse
setHeaderValue	external/vpiotr-mongoose-cpp/mongcpp.cpp	/^void MongooseResponse::setHeaderValue(const std::string &name, const std::string &value)$/;"	f	class:MongooseResponse
setLocation	external/vpiotr-mongoose-cpp/mongcpp.cpp	/^void MongooseResponse::setLocation(const std::string &value)$/;"	f	class:MongooseResponse
setOption	external/vpiotr-mongoose-cpp/mongcpp.cpp	/^void MongooseServer::setOption(const std::string &name, const std::string &value)$/;"	f	class:MongooseServer
setOptions	external/vpiotr-mongoose-cpp/mongcpp.cpp	/^void MongooseServer::setOptions(const ServerOptionSet &options)$/;"	f	class:MongooseServer
setSetCookie	external/vpiotr-mongoose-cpp/mongcpp.cpp	/^void MongooseResponse::setSetCookie(const std::string &name, const std::string &value)$/;"	f	class:MongooseResponse
setStatus	external/vpiotr-mongoose-cpp/mongcpp.cpp	/^void MongooseResponse::setStatus(int code, const std::string &statusDesc, const std::string &httpVer)$/;"	f	class:MongooseResponse
set_acl_option	external/vpiotr-mongoose-cpp/mongoose.c	/^static int set_acl_option(struct mg_context *ctx) {$/;"	f	file:
set_argc	util/cmdopts.hpp	/^    static void set_argc(int argc, const char ** argv) {$/;"	f	namespace:graphchi
set_bit	util/dense_bitset.hpp	/^        inline bool set_bit(uint32_t b) {$/;"	f	class:graphchi::dense_bitset
set_blocksize	engine/graphchi_engine.hpp	/^        void set_blocksize(size_t blocksize_in_bytes) {$/;"	f	class:graphchi::graphchi_engine
set_cache_budget	io/stripedio.hpp	/^        void set_cache_budget(size_t c) {$/;"	f	class:graphchi::stripedio
set_close_on_exec	external/vpiotr-mongoose-cpp/mongoose.c	/^static void set_close_on_exec(int fd) {$/;"	f	file:
set_close_on_exec	external/vpiotr-mongoose-cpp/mongoose.c	1106;"	d	file:
set_conf	util/cmdopts.hpp	/^    static void VARIABLE_IS_NOT_USED set_conf(std::string key, std::string value) {$/;"	f	namespace:graphchi
set_data	api/functional/functional_semisync.hpp	/^    virtual void set_data(VT d) {$/;"	f	class:graphchi::functional_vertex_unweighted_semisync
set_data	api/graph_objects.hpp	/^        virtual void set_data(VertexDataType d) {$/;"	f	class:graphchi::graphchi_vertex
set_data	api/graph_objects.hpp	/^        void set_data(EdgeDataType x) {$/;"	f	class:graphchi::graphchi_edge
set_degree	engine/auxdata/degree_data.hpp	/^        virtual void set_degree(vid_t vertexid, degree d) {$/;"	f	class:graphchi::degree_data
set_degree	engine/auxdata/degree_data.hpp	/^        virtual void set_degree(vid_t vertexid, int indegree, int outdegree) {$/;"	f	class:graphchi::degree_data
set_disable_async_writes	shards/dynamicdata/memoryshard.hpp	/^        void set_disable_async_writes(bool b) {$/;"	f	class:graphchi::memory_shard
set_disable_async_writes	shards/dynamicdata/slidingshard.hpp	/^        void set_disable_async_writes(bool b) {$/;"	f	class:graphchi::sliding_shard
set_disable_async_writes	shards/memoryshard.hpp	/^        void set_disable_async_writes(bool b) {$/;"	f	class:graphchi::memory_shard
set_disable_async_writes	shards/slidingshard.hpp	/^        void set_disable_async_writes(bool b) {$/;"	f	class:graphchi::sliding_shard
set_disable_outedges	engine/graphchi_engine.hpp	/^        virtual void set_disable_outedges(bool b) {$/;"	f	class:graphchi::graphchi_engine
set_disable_vertexdata_storage	engine/graphchi_engine.hpp	/^        void set_disable_vertexdata_storage() {$/;"	f	class:graphchi::graphchi_engine
set_duplicate_filter	preprocessing/sharder.hpp	/^        void set_duplicate_filter(DuplicateEdgeFilter<EdgeDataType> * filter) {$/;"	f	class:graphchi::sharder
set_enable_deterministic_parallelism	engine/graphchi_engine.hpp	/^        void set_enable_deterministic_parallelism(bool b) {$/;"	f	class:graphchi::graphchi_engine
set_enable_vertexdata_storage	engine/graphchi_engine.hpp	/^        void set_enable_vertexdata_storage() {$/;"	f	class:graphchi::graphchi_engine
set_exec_threads	engine/graphchi_engine.hpp	/^        void set_exec_threads(int et) {$/;"	f	class:graphchi::graphchi_engine
set_gpass_option	external/vpiotr-mongoose-cpp/mongoose.c	/^static int set_gpass_option(struct mg_context *ctx) {$/;"	f	file:
set_ingested_edges	httpadmin/plotter.hpp	/^    static void set_ingested_edges(size_t n) {$/;"	f	namespace:graphchi
set_initialize_edges_before_run	engine/graphchi_engine.hpp	/^        virtual void set_initialize_edges_before_run(bool b) {$/;"	f	class:graphchi::graphchi_engine
set_integer	metrics/metrics.hpp	/^    inline void set_integer(std::string key, size_t value) {$/;"	f	class:graphchi::metrics
set_json	engine/graphchi_engine.hpp	/^        void set_json(std::string key, T val) {$/;"	f	class:graphchi::graphchi_engine
set_json	engine/graphchi_engine.hpp	/^        void set_json(std::string key, std::string value) {$/;"	f	class:graphchi::graphchi_engine
set_last_iteration	api/graphchi_context.hpp	/^        void set_last_iteration(int _last_iteration) {$/;"	f	struct:graphchi::graphchi_context
set_load_threads	engine/graphchi_engine.hpp	/^        void set_load_threads(int lt) {$/;"	f	class:graphchi::graphchi_engine
set_log_callback	external/vpiotr-mongoose-cpp/bindings/csharp/mongoose.cs	/^	public void set_log_callback(MongooseCallback func) {$/;"	m	class:Mongoose
set_log_file	logger/logger.hpp	/^    bool set_log_file(std::string file) {$/;"	f	class:file_logger
set_log_level	logger/logger.hpp	/^  void set_log_level(int new_log_level) {$/;"	f	class:file_logger
set_log_to_console	logger/logger.hpp	/^  void set_log_to_console(bool consolelog) {$/;"	f	class:file_logger
set_max_vertex_id	preprocessing/sharder.hpp	/^        void set_max_vertex_id(vid_t maxid) {$/;"	f	class:graphchi::sharder
set_maxwindow	engine/graphchi_engine.hpp	/^        void set_maxwindow(unsigned int _maxwindow){ $/;"	f	class:graphchi::graphchi_engine
set_membudget_mb	engine/graphchi_engine.hpp	/^        void set_membudget_mb(int mbs) {$/;"	f	class:graphchi::graphchi_engine
set_modifies_inedges	engine/graphchi_engine.hpp	/^        virtual void set_modifies_inedges(bool b) {$/;"	f	class:graphchi::graphchi_engine
set_modifies_outedges	engine/graphchi_engine.hpp	/^        virtual void set_modifies_outedges(bool b) {$/;"	f	class:graphchi::graphchi_engine
set_newval	graphchi_types.hpp	/^        void set_newval(int iter, ET x) {$/;"	f	struct:graphchi::PairContainer
set_no_edgevalues	preprocessing/sharder.hpp	/^        void set_no_edgevalues() {$/;"	f	class:graphchi::sharder
set_non_blocking_mode	external/vpiotr-mongoose-cpp/mongoose.c	/^static int set_non_blocking_mode(SOCKET sock) {$/;"	f	file:
set_offset	shards/dynamicdata/slidingshard.hpp	/^        void set_offset(size_t newoff, vid_t _curvid, size_t edgeptr) {$/;"	f	class:graphchi::sliding_shard
set_offset	shards/slidingshard.hpp	/^        void set_offset(size_t newoff, vid_t _curvid, size_t edgeptr) {$/;"	f	class:graphchi::sliding_shard
set_only_adjacency	engine/graphchi_engine.hpp	/^        virtual void set_only_adjacency(bool b) {$/;"	f	class:graphchi::graphchi_engine
set_option	external/vpiotr-mongoose-cpp/bindings/csharp/mongoose.cs	/^	public int set_option(string option_name, string option_value) {$/;"	m	class:Mongoose
set_option	external/vpiotr-mongoose-cpp/main.c	/^static void set_option(char **options, const char *name, const char *value) {$/;"	f	file:
set_ports_option	external/vpiotr-mongoose-cpp/mongoose.c	/^static int set_ports_option(struct mg_context *ctx) {$/;"	f	file:
set_reset_vertexdata	engine/graphchi_engine.hpp	/^        void set_reset_vertexdata(bool reset) {$/;"	f	class:graphchi::graphchi_engine
set_save_edgesfiles_after_inmemmode	engine/graphchi_engine.hpp	/^        virtual void set_save_edgesfiles_after_inmemmode(bool b) {$/;"	f	class:graphchi::graphchi_engine
set_ssl_option	external/vpiotr-mongoose-cpp/mongoose.c	/^static int set_ssl_option(struct mg_context *ctx) {$/;"	f	file:
set_uid_option	external/vpiotr-mongoose-cpp/mongoose.c	/^static int set_uid_option(struct mg_context *ctx) {$/;"	f	file:
set_uri_callback	external/vpiotr-mongoose-cpp/bindings/csharp/mongoose.cs	/^	public void set_uri_callback(string uri_regex, MongooseCallback func) {$/;"	m	class:Mongoose
set_vector_entry	metrics/metrics.hpp	/^    inline void set_vector_entry(size_t i, double x) {$/;"	f	struct:graphchi::metrics_entry
set_vector_entry	metrics/metrics.hpp	/^    inline void set_vector_entry(std::string key, size_t idx, double value) {$/;"	f	class:graphchi::metrics
set_vector_entry_integer	metrics/metrics.hpp	/^    inline void set_vector_entry_integer(std::string key, size_t idx, size_t value) {$/;"	f	class:graphchi::metrics
setall	util/dense_bitset.hpp	/^        void setall() {$/;"	f	class:graphchi::dense_bitset
shard_capacity	preprocessing/sharder.hpp	/^        size_t shard_capacity;$/;"	m	class:graphchi::sharder
shard_flush_run	preprocessing/sharder.hpp	/^    static void * shard_flush_run(void * _info) {$/;"	f	namespace:graphchi
shard_flushinfo	preprocessing/sharder.hpp	/^        shard_flushinfo(std::string shovelname, vid_t max_vertex, size_t numedges, edge_with_value<EdgeDataType> * buffer, DuplicateEdgeFilter<EdgeDataType> * duplicate_filter) :$/;"	f	struct:graphchi::shard_flushinfo
shard_flushinfo	preprocessing/sharder.hpp	/^    struct shard_flushinfo {$/;"	s	namespace:graphchi
shard_index	graphchi_types.hpp	/^        shard_index(vid_t vertexid, size_t filepos, size_t edgecounter) : vertexid(vertexid), filepos(filepos), edgecounter(edgecounter) {}$/;"	f	struct:graphchi::shard_index
shard_index	graphchi_types.hpp	/^    struct shard_index {$/;"	s	namespace:graphchi
shard_suffices	engine/dynamic_graphs/graphchi_dynamicgraph_engine.hpp	/^        std::vector<std::string> shard_suffices;$/;"	m	class:graphchi::graphchi_dynamicgraph_engine
sharded_edges	preprocessing/sharder.hpp	/^        size_t sharded_edges;$/;"	m	class:graphchi::sharder
sharded_graph_output	preprocessing/sharder.hpp	/^        sharded_graph_output(std::string filename, DuplicateEdgeFilter<ETFinal> * filter = NULL) : num_edges_(0) {$/;"	f	class:graphchi::sharded_graph_output
sharded_graph_output	preprocessing/sharder.hpp	/^    class sharded_graph_output : public ioutput<VT, ET> {$/;"	c	namespace:graphchi
sharder	preprocessing/sharder.hpp	/^        sharder(std::string basefilename) : basefilename(basefilename), m("sharder") {          $/;"	f	class:graphchi::sharder
sharder	preprocessing/sharder.hpp	/^    class sharder : public merge_sink<edge_with_value<EdgeDataType> > {$/;"	c	namespace:graphchi
sharderobj	preprocessing/sharder.hpp	/^        sharder<ETFinal> * sharderobj;$/;"	m	class:graphchi::sharded_graph_output
sharderobj	preprocessing/util/orderbydegree.hpp	/^        sharder<ET, ET> * sharderobj;$/;"	m	class:graphchi::special_sharding_vertex
shardlock	engine/dynamic_graphs/graphchi_dynamicgraph_engine.hpp	/^        mutex shardlock;$/;"	m	class:graphchi::graphchi_dynamicgraph_engine
shardnum	preprocessing/sharder.hpp	/^        int shardnum;$/;"	m	class:graphchi::sharder
should_keep_alive	external/vpiotr-mongoose-cpp/mongoose.c	/^static int should_keep_alive(const struct mg_connection *conn) {$/;"	f	file:
shouldbe	tests/test_dynamicedata_loader.cpp	/^size_t shouldbe = 0;$/;"	v
shovel_filename	preprocessing/sharder.hpp	/^        std::string shovel_filename(int idx) {$/;"	f	class:graphchi::sharder
shovel_merge_source	preprocessing/sharder.hpp	/^        shovel_merge_source(size_t bufsize_bytes, std::string shovelfile) : bufsize_bytes(bufsize_bytes), $/;"	f	struct:graphchi::shovel_merge_source
shovel_merge_source	preprocessing/sharder.hpp	/^    struct shovel_merge_source : public merge_source<edge_with_value<EdgeDataType> > {$/;"	s	namespace:graphchi
shovel_sorted	preprocessing/sharder.hpp	/^        bool shovel_sorted;$/;"	m	class:graphchi::sharder
shoveled_edges	preprocessing/sharder.hpp	/^        size_t shoveled_edges;$/;"	m	class:graphchi::sharder
shovelfile	preprocessing/sharder.hpp	/^        std::string shovelfile;$/;"	m	struct:graphchi::shovel_merge_source
shovelname	preprocessing/sharder.hpp	/^        std::string shovelname;$/;"	m	struct:graphchi::shard_flushinfo
shovelsize	preprocessing/sharder.hpp	/^        size_t shovelsize;$/;"	m	class:graphchi::sharder
shoveltasks	preprocessing/sharder.hpp	/^        std::vector<shard_flushinfo<EdgeDataType> *> shoveltasks;$/;"	m	class:graphchi::sharder
shovelthreads	preprocessing/sharder.hpp	/^        std::vector<pthread_t> shovelthreads;$/;"	m	class:graphchi::sharder
show_error	external/vpiotr-mongoose-cpp/main.c	/^static void show_error(void) {$/;"	f	file:
show_usage_and_exit	external/vpiotr-mongoose-cpp/main.c	/^static void show_usage_and_exit(void) {$/;"	f	file:
shuffle	api/graphlab2_1_GAS_api/random.hpp	/^            void shuffle(Iterator begin, Iterator end) {$/;"	f	class:graphlab::random::generator
shuffle	api/graphlab2_1_GAS_api/random.hpp	/^            void shuffle(std::vector<T>& vec) { shuffle(vec.begin(), vec.end()); }$/;"	f	class:graphlab::random::generator
shuffle	api/graphlab2_1_GAS_api/random.hpp	/^        inline void shuffle(Iterator begin, Iterator end) {$/;"	f	namespace:graphlab::random
shuffle	api/graphlab2_1_GAS_api/random.hpp	/^        inline void shuffle(std::vector<T>& vec) { $/;"	f	namespace:graphlab::random
shuffle_functor	api/graphlab2_1_GAS_api/random.hpp	/^                inline shuffle_functor(generator& gen) : gen(gen) { }$/;"	f	struct:graphlab::random::generator::shuffle_functor
shuffle_functor	api/graphlab2_1_GAS_api/random.hpp	/^            struct shuffle_functor {$/;"	s	class:graphlab::random::generator
signal	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        virtual void signal(const vertex_type& vertex, $/;"	f	class:graphlab::icontext
signal	external/vpiotr-mongoose-cpp/mongoose.c	/^typedef struct {HANDLE signal, broadcast;} pthread_cond_t;$/;"	m	struct:__anon2	file:
signal	util/pthread_tools.hpp	/^        inline void signal() const {$/;"	f	class:graphchi::conditional
signal_handler	external/vpiotr-mongoose-cpp/main.c	/^static void WINCDECL signal_handler(int sig_num) {$/;"	f	file:
signal_vid	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        virtual void signal_vid(vertex_id_type gvid, $/;"	f	class:graphlab::icontext
sin	external/vpiotr-mongoose-cpp/mongoose.c	/^        struct sockaddr_in sin;$/;"	m	union:usa::__anon3	typeref:struct:usa::__anon3::sockaddr_in	file:
sink	util/kwaymerge.hpp	/^    merge_sink<T> * sink;$/;"	m	class:kway_merge
sinkbuffer	preprocessing/sharder.hpp	/^        edge_with_value<EdgeDataType> * sinkbuffer;$/;"	m	class:graphchi::sharder
size	api/dynamicdata/chivector.hpp	/^    uint16_t size() {$/;"	f	class:graphchi::chivector
size	engine/dynamic_graphs/edgebuffers.hpp	/^        unsigned int size() {$/;"	f	class:graphchi::edge_buffer_flat
size	external/vpiotr-mongoose-cpp/mongoose.c	/^    int64_t size;      \/\/ File size$/;"	m	struct:mgstat	file:
size	util/dense_bitset.hpp	/^        inline size_t size() const {$/;"	f	class:graphchi::dense_bitset
size	util/synchronized_queue.hpp	/^            size_t size() const{$/;"	f	class:graphchi::synchronized_queue
sizeword_t	api/dynamicdata/chivector.hpp	/^    typedef uint32_t sizeword_t;$/;"	t	class:graphchi::chivector
skip	external/vpiotr-mongoose-cpp/mongoose.c	/^static char *skip(char **buf, const char *delimiters) {$/;"	f	file:
skip	shards/dynamicdata/slidingshard.hpp	/^        inline void skip(int n, int sz) {$/;"	f	class:graphchi::sliding_shard
skip	shards/slidingshard.hpp	/^        inline void skip(int n, int sz) {$/;"	f	class:graphchi::sliding_shard
skip_quoted	external/vpiotr-mongoose-cpp/mongoose.c	/^static char *skip_quoted(char **buf, const char *delimiters, const char *whitespace, char quotechar) {$/;"	f	file:
sleep	external/vpiotr-mongoose-cpp/main.c	47;"	d	file:
sleep	external/vpiotr-mongoose-cpp/mongoose.c	108;"	d	file:
sliding_shard	shards/dynamicdata/slidingshard.hpp	/^        sliding_shard(stripedio * iomgr, std::string _filename_edata, std::string _filename_adj, vid_t _range_st, vid_t _range_en, size_t _blocksize, metrics &_m,$/;"	f	class:graphchi::sliding_shard
sliding_shard	shards/dynamicdata/slidingshard.hpp	/^    class sliding_shard {$/;"	c	namespace:graphchi
sliding_shard	shards/slidingshard.hpp	/^        sliding_shard(stripedio * iomgr, std::string _filename_edata, std::string _filename_adj, vid_t _range_st, vid_t _range_en, size_t _blocksize, metrics &_m,$/;"	f	class:graphchi::sliding_shard
sliding_shard	shards/slidingshard.hpp	/^    class sliding_shard {$/;"	c	namespace:graphchi
sliding_shards	engine/graphchi_engine.hpp	/^        std::vector<slidingshard_t *> sliding_shards;$/;"	m	class:graphchi::graphchi_engine
slidingshard_t	engine/graphchi_engine.hpp	/^        typedef sliding_shard<VertexDataType, EdgeDataType, svertex_t> slidingshard_t;$/;"	t	class:graphchi::graphchi_engine
slidingshard_t	preprocessing/sharder.hpp	/^        typedef sliding_shard<int, dummy_t> slidingshard_t;$/;"	t	class:graphchi::sharder
smoketest_program	tests/bulksync_functional_test.cpp	/^struct smoketest_program : public functional_kernel<int, int> {$/;"	s	file:
snprintf	external/vpiotr-mongoose-cpp/main.c	45;"	d	file:
snprintf	external/vpiotr-mongoose-cpp/mongoose.c	106;"	d	file:
sock	external/vpiotr-mongoose-cpp/mongoose.c	/^    SOCKET sock;          \/\/ Listening socket$/;"	m	struct:socket	file:
socket	external/vpiotr-mongoose-cpp/mongoose.c	/^struct socket {$/;"	s	file:
socklen_t	external/vpiotr-mongoose-cpp/mongoose.c	/^typedef int socklen_t;$/;"	t	file:
sort_edges_indirect	api/graph_objects.hpp	/^        void VARIABLE_IS_NOT_USED sort_edges_indirect() {$/;"	f	class:graphchi::graphchi_vertex
source	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        vertex_type source() const { $/;"	f	struct:graphlab::GraphLabEdgeWrapper
source_registry	api/graphlab2_1_GAS_api/random.cpp	/^        struct source_registry {$/;"	s	namespace:graphlab::random	file:
sourceidx	util/kwaymerge.hpp	/^    int sourceidx;$/;"	m	struct:value_source
sources	util/kwaymerge.hpp	/^    std::vector<merge_source<T> *> sources;$/;"	m	class:kway_merge
sparse_index	shards/dynamicdata/slidingshard.hpp	/^        std::map<int, indexentry> sparse_index; \/\/ Sparse index that can be created in the fly$/;"	m	class:graphchi::sliding_shard
sparse_index	shards/slidingshard.hpp	/^        std::map<int, indexentry> sparse_index; \/\/ Sparse index that can be created in the fly$/;"	m	class:graphchi::sliding_shard
spawn	external/vpiotr-mongoose-cpp/test/test.pl	/^sub spawn {$/;"	s
spawn_process	external/vpiotr-mongoose-cpp/mongoose.c	/^static pid_t spawn_process(struct mg_connection *conn, const char *prog,$/;"	f	file:
special_sharding_vertex	preprocessing/util/orderbydegree.hpp	/^        special_sharding_vertex() {}$/;"	f	class:graphchi::special_sharding_vertex
special_sharding_vertex	preprocessing/util/orderbydegree.hpp	/^        special_sharding_vertex(sharder<ET, ET> * _sharderobj, vid_t _id, vid_t * _translatetable) : graphchi_vertex<VT, ET> (_id, NULL, NULL, 0, 0) { $/;"	f	class:graphchi::special_sharding_vertex
special_sharding_vertex	preprocessing/util/orderbydegree.hpp	/^    class special_sharding_vertex : public graphchi_vertex<VT, ET> {$/;"	c	namespace:graphchi
spinlock	util/pthread_tools.hpp	/^        spinlock () {$/;"	f	class:graphchi::spinlock
spinlock	util/pthread_tools.hpp	/^    class spinlock {$/;"	c	namespace:graphchi
spinlock	util/pthread_tools.hpp	/^    typedef mutex spinlock;$/;"	t	namespace:graphchi
spinrwlock	util/pthread_tools.hpp	/^        spinrwlock() {$/;"	f	class:graphchi::spinrwlock
spinrwlock	util/pthread_tools.hpp	/^    class spinrwlock {$/;"	c	namespace:graphchi
sq_empty	external/vpiotr-mongoose-cpp/mongoose.c	/^    pthread_cond_t sq_empty;   \/\/ Signaled when socket is consumed$/;"	m	struct:mg_context	file:
sq_full	external/vpiotr-mongoose-cpp/mongoose.c	/^    pthread_cond_t sq_full;    \/\/ Singaled when socket is produced$/;"	m	struct:mg_context	file:
sq_head	external/vpiotr-mongoose-cpp/mongoose.c	/^    int sq_head;               \/\/ Head of the socket queue$/;"	m	struct:mg_context	file:
sq_tail	external/vpiotr-mongoose-cpp/mongoose.c	/^    int sq_tail;               \/\/ Tail of the socket queue$/;"	m	struct:mg_context	file:
src	engine/dynamic_graphs/edgebuffers.hpp	/^        vid_t src;$/;"	m	struct:graphchi::created_edge
src	preprocessing/sharder.hpp	/^        vid_t src;$/;"	m	struct:graphchi::edge_with_value
srcF	preprocessing/sharder.hpp	/^    struct srcF {inline vid_t operator() (edge_with_value<EdgeDataType> a) {return a.src;} };$/;"	s	namespace:graphchi
ss	external/vpiotr-mongoose-cpp/main.c	/^static SERVICE_STATUS ss;$/;"	v	file:
ssl	external/vpiotr-mongoose-cpp/mongoose.c	/^    SSL *ssl;                   \/\/ SSL descriptor$/;"	m	struct:mg_connection	file:
ssl_ctx	external/vpiotr-mongoose-cpp/mongoose.c	/^    SSL_CTX *ssl_ctx;             \/\/ SSL context$/;"	m	struct:mg_context	file:
ssl_error	external/vpiotr-mongoose-cpp/mongoose.c	/^static const char *ssl_error(void) {$/;"	f	file:
ssl_func	external/vpiotr-mongoose-cpp/mongoose.c	/^struct ssl_func {$/;"	s	file:
ssl_id_callback	external/vpiotr-mongoose-cpp/mongoose.c	/^static unsigned long ssl_id_callback(void) {$/;"	f	file:
ssl_locking_callback	external/vpiotr-mongoose-cpp/mongoose.c	/^static void ssl_locking_callback(int mode, int mutex_num, const char *file,$/;"	f	file:
ssl_mutexes	external/vpiotr-mongoose-cpp/mongoose.c	/^static pthread_mutex_t *ssl_mutexes;$/;"	v	file:
ssl_sw	external/vpiotr-mongoose-cpp/mongoose.c	/^static struct ssl_func ssl_sw[] = {$/;"	v	typeref:struct:ssl_func	file:
sslize	external/vpiotr-mongoose-cpp/mongoose.c	/^static int sslize(struct mg_connection *conn, int (*func)(SSL *)) {$/;"	f	file:
st	external/vpiotr-mongoose-cpp/mongoose.c	/^    struct mgstat st;$/;"	m	struct:de	typeref:struct:de::mgstat	file:
standard_reply	external/vpiotr-mongoose-cpp/test/embed.c	/^static const char *standard_reply = "HTTP\/1.1 200 OK\\r\\n"$/;"	v	file:
start	api/graphchi_context.hpp	/^        timeval start;$/;"	m	struct:graphchi::graphchi_context
start	external/vpiotr-mongoose-cpp/mongcpp.cpp	/^void MongooseServer::start()$/;"	f	class:MongooseServer
start_httpadmin	httpadmin/chi_httpadmin.hpp	/^    void start_httpadmin(ENGINE * engine) {$/;"	f	namespace:graphchi
start_mongoose	external/vpiotr-mongoose-cpp/main.c	/^static void start_mongoose(int argc, char *argv[]) {$/;"	f	file:
start_mplex	io/stripedio.hpp	/^        int start_mplex;$/;"	m	struct:graphchi::io_descriptor
start_preprocessing	preprocessing/sharder.hpp	/^        void start_preprocessing() {$/;"	f	class:graphchi::sharder
start_stream	logger/logger.hpp	/^    file_logger& start_stream(int lineloglevel,const char* file,const char* function, int line) {$/;"	f	class:file_logger
start_thread	external/vpiotr-mongoose-cpp/mongoose.c	/^static int start_thread(struct mg_context *ctx, mg_thread_func_t func,$/;"	f	file:
start_time	metrics/metrics.hpp	/^    inline void start_time(std::string key) {$/;"	f	class:graphchi::metrics
start_time	metrics/metrics.hpp	/^    metrics_entry start_time() {$/;"	f	class:graphchi::metrics
start_time	metrics/metrics.hpp	/^    timeval start_time;$/;"	m	struct:graphchi::metrics_entry
state	engine/dynamic_graphs/graphchi_dynamicgraph_engine.hpp	/^        std::string state;$/;"	m	class:graphchi::graphchi_dynamicgraph_engine
status_code	external/vpiotr-mongoose-cpp/bindings/csharp/mongoose.cs	/^	public int	status_code;$/;"	f	struct:MongooseRequestInfo
status_code	external/vpiotr-mongoose-cpp/mongoose.h	/^  int status_code;       \/\/ HTTP reply status code$/;"	m	struct:mg_request_info
stop	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        virtual void stop() { $/;"	f	class:graphlab::icontext
stop	external/vpiotr-mongoose-cpp/mongcpp.cpp	/^void MongooseServer::stop()$/;"	f	class:MongooseServer
stop_flag	external/vpiotr-mongoose-cpp/mongoose.c	/^    int stop_flag;                \/\/ Should we stop event loop$/;"	m	struct:mg_context	file:
stop_time	metrics/metrics.hpp	/^      inline void stop_time(metrics_entry me, std::string key, int iternum, bool show=false) {$/;"	f	class:graphchi::metrics
stop_time	metrics/metrics.hpp	/^      inline void stop_time(std::string key, bool show = false) {$/;"	f	class:graphchi::metrics
stop_time	metrics/metrics.hpp	/^    inline void stop_time(metrics_entry me, std::string key, bool show=false) {$/;"	f	class:graphchi::metrics
stopper	preprocessing/sharder.hpp	/^        bool stopper() { return src == 0 && dst == 0; }$/;"	f	struct:graphchi::edge_with_value
store_inedges	engine/graphchi_engine.hpp	/^        bool store_inedges;$/;"	m	class:graphchi::graphchi_engine
stream_flush	logger/logger.hpp	/^  void stream_flush() {$/;"	f	class:file_logger
streamactive	logger/logger.hpp	/^  bool streamactive;$/;"	m	struct:logger_impl::streambuff_tls_entry
streambuff_tls_entry	logger/logger.hpp	/^struct streambuff_tls_entry {$/;"	s	namespace:logger_impl
streambuffdestructor	logger/logger.hpp	/^    static void streambuffdestructor(void* v){$/;"	f	class:file_logger
streambuffer	logger/logger.hpp	/^  std::stringstream streambuffer;$/;"	m	struct:logger_impl::streambuff_tls_entry
streambuffkey	logger/logger.hpp	/^  pthread_key_t streambuffkey;$/;"	m	class:file_logger
streaming_offset	shards/dynamicdata/memoryshard.hpp	/^        size_t streaming_offset; \/\/ The offset where streaming should continue$/;"	m	class:graphchi::memory_shard
streaming_offset	shards/memoryshard.hpp	/^        size_t streaming_offset; \/\/ The offset where streaming should continue$/;"	m	class:graphchi::memory_shard
streaming_offset_edge_ptr	shards/dynamicdata/memoryshard.hpp	/^        size_t streaming_offset_edge_ptr;$/;"	m	class:graphchi::memory_shard
streaming_offset_edge_ptr	shards/memoryshard.hpp	/^        size_t streaming_offset_edge_ptr;$/;"	m	class:graphchi::memory_shard
streaming_offset_vid	shards/dynamicdata/memoryshard.hpp	/^        vid_t streaming_offset_vid;$/;"	m	class:graphchi::memory_shard
streaming_offset_vid	shards/memoryshard.hpp	/^        vid_t streaming_offset_vid;$/;"	m	class:graphchi::memory_shard
streamloglevel	logger/logger.hpp	/^  int streamloglevel;$/;"	m	class:file_logger
strerror	external/vpiotr-mongoose-cpp/mongoose.c	66;"	d	file:
strftime	external/vpiotr-mongoose-cpp/mongoose.c	/^static size_t strftime(char *dst, size_t dst_size, const char *fmt,$/;"	f	file:
stringToUIntDef	external/vpiotr-mongoose-cpp/mongcpp.cpp	/^inline unsigned int stringToUIntDef(const std::string &str, unsigned int defVal)$/;"	f
stringval	metrics/metrics.hpp	/^    std::string stringval;$/;"	m	struct:graphchi::metrics_entry
stripe_chunk	io/stripedio.hpp	/^        stripe_chunk(int mplex_thread, size_t offset, size_t len) : mplex_thread(mplex_thread), offset(offset), len(len) {}$/;"	f	struct:graphchi::stripe_chunk
stripe_chunk	io/stripedio.hpp	/^    struct stripe_chunk {$/;"	s	namespace:graphchi
stripe_offsets	io/stripedio.hpp	/^        std::vector< stripe_chunk > stripe_offsets(int session, size_t nbytes, size_t off) {$/;"	f	class:graphchi::stripedio
stripedio	io/stripedio.hpp	/^        stripedio( metrics &_m) : m(_m), cache(0) {$/;"	f	class:graphchi::stripedio
stripedio	io/stripedio.hpp	/^    class stripedio {$/;"	c	namespace:graphchi
stripesize	io/stripedio.hpp	/^        int stripesize;$/;"	m	class:graphchi::stripedio
strm	output/output.hpp	/^        std::ofstream strm;$/;"	m	class:graphchi::basic_text_output
strtoll	external/vpiotr-mongoose-cpp/mongoose.c	84;"	d	file:
strtoll	external/vpiotr-mongoose-cpp/mongoose.c	88;"	d	file:
strtoull	external/vpiotr-mongoose-cpp/mongoose.c	83;"	d	file:
strtoull	external/vpiotr-mongoose-cpp/mongoose.c	87;"	d	file:
sub_interval_en	engine/graphchi_engine.hpp	/^        vid_t sub_interval_en;$/;"	m	class:graphchi::graphchi_engine
sub_interval_st	engine/graphchi_engine.hpp	/^        vid_t sub_interval_st;$/;"	m	class:graphchi::graphchi_engine
substitute_index_file	external/vpiotr-mongoose-cpp/mongoose.c	/^static int substitute_index_file(struct mg_connection *conn, char *path,$/;"	f	file:
suggest_connection_header	external/vpiotr-mongoose-cpp/mongoose.c	/^static const char *suggest_connection_header(const struct mg_connection *conn) {$/;"	f	file:
sum_priority	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^                sum_priority(const double value = 0) : value(value) { }$/;"	f	struct:graphlab::messages::sum_priority
sum_priority	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^            struct sum_priority : public graphlab::IS_POD_TYPE {$/;"	s	namespace:graphlab::messages
sum_vertices	api/vertex_aggregator.hpp	/^    SumType sum_vertices(std::string base_filename, vid_t fromv, vid_t tov) {$/;"	f	namespace:graphchi
synchronized_queue	util/synchronized_queue.hpp	/^            synchronized_queue() { };$/;"	f	class:graphchi::synchronized_queue
synchronized_queue	util/synchronized_queue.hpp	/^        class synchronized_queue {$/;"	c	namespace:graphchi
sys	external/vpiotr-mongoose-cpp/bindings/python/example.py	/^import sys$/;"	i
sz	util/binary_minheap.hpp	/^    int sz;$/;"	m	class:binary_minheap
target	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        vertex_type target() const { $/;"	f	struct:graphlab::GraphLabEdgeWrapper
test_config	external/vpiotr-mongoose-cpp/test/embed.c	/^static const struct test_config {$/;"	s	file:
test_config	external/vpiotr-mongoose-cpp/test/embed.c	/^} test_config[] = {$/;"	v	typeref:struct:test_config	file:
test_error	external/vpiotr-mongoose-cpp/test/embed.c	/^static void test_error(struct mg_connection *conn,$/;"	f	file:
test_get_header	external/vpiotr-mongoose-cpp/test/embed.c	/^static void test_get_header(struct mg_connection *conn,$/;"	f	file:
test_get_request_info	external/vpiotr-mongoose-cpp/test/embed.c	/^static void test_get_request_info(struct mg_connection *conn,$/;"	f	file:
test_get_var	external/vpiotr-mongoose-cpp/test/embed.c	/^static void test_get_var(struct mg_connection *conn,$/;"	f	file:
test_post	external/vpiotr-mongoose-cpp/test/embed.c	/^static void test_post(struct mg_connection *conn,$/;"	f	file:
text	external/vpiotr-mongoose-cpp/examples/chat.c	/^  char text[MAX_MESSAGE_LEN];  \/\/ Message text$/;"	m	struct:message	file:
textcolor	logger/logger.hpp	/^    void textcolor(FILE* handle, int attr, int fg)$/;"	f	class:file_logger
this_interval_start	preprocessing/sharder.hpp	/^        vid_t this_interval_start;$/;"	m	class:graphchi::sharder
thread_infos	io/stripedio.hpp	/^        std::vector< thrinfo * > thread_infos;$/;"	m	class:graphchi::stripedio
threads	io/stripedio.hpp	/^        std::vector< pthread_t > threads;$/;"	m	class:graphchi::stripedio
thrinfo	io/stripedio.hpp	/^    struct thrinfo {$/;"	s	namespace:graphchi
time	external/vpiotr-mongoose-cpp/mongoose.c	/^static time_t time(time_t *ptime) {$/;"	f	file:
time_seed	api/graphlab2_1_GAS_api/random.cpp	/^            void time_seed() {$/;"	f	struct:graphlab::random::source_registry
time_seed	api/graphlab2_1_GAS_api/random.cpp	/^        void time_seed() { source_registry::global().time_seed(); } $/;"	f	namespace:graphlab::random
time_seed	api/graphlab2_1_GAS_api/random.hpp	/^            inline void time_seed() {$/;"	f	class:graphlab::random::generator
timedwait	util/pthread_tools.hpp	/^        inline int timedwait(const mutex& mut, int sec) const {$/;"	f	class:graphchi::conditional
timer_start	metrics/metrics.hpp	/^    inline void timer_start() {$/;"	f	struct:graphchi::metrics_entry
timer_stop	metrics/metrics.hpp	/^    inline void timer_stop() {$/;"	f	struct:graphchi::metrics_entry
timespec	external/vpiotr-mongoose-cpp/mongoose.c	/^struct timespec {$/;"	s	file:
timestamp	external/vpiotr-mongoose-cpp/examples/chat.c	/^  time_t timestamp;            \/\/ Message timestamp, UTC$/;"	m	struct:message	file:
tip	util/kwaymerge.hpp	/^    binary_minheap<value_source<T> > tip;$/;"	m	class:kway_merge
tls_key_creator	api/graphlab2_1_GAS_api/random.cpp	/^            tls_key_creator() : TLS_RANDOM_SOURCE_KEY(0) {$/;"	f	struct:graphlab::random::tls_key_creator
tls_key_creator	api/graphlab2_1_GAS_api/random.cpp	/^        struct tls_key_creator {$/;"	s	namespace:graphlab::random	file:
toString	external/vpiotr-mongoose-cpp/mongcpp.cpp	/^inline std::string toString (const T& t)$/;"	f
toString	external/vpiotr-mongoose-cpp/test/mongotest.cpp	/^inline std::string toString (const T& t)$/;"	f
to_unicode	external/vpiotr-mongoose-cpp/mongoose.c	/^static void to_unicode(const char *path, wchar_t *wbuf, size_t wbuf_len) {$/;"	f	file:
total	tests/basic_dynamicengine_smoketest.cpp	/^    size_t total;$/;"	m	class:VertexDataChecker	file:
total	tests/basic_dynamicengine_smoketest2.cpp	/^    size_t total;$/;"	m	class:VertexDataChecker	file:
total	tests/basic_smoketest.cpp	/^    size_t total;$/;"	m	class:VertexDataChecker	file:
total	tests/dynamicdata_smoketest.cpp	/^    size_t total;$/;"	m	class:VertexDataChecker	file:
translate_edge	api/graph_objects.hpp	/^    inline vid_t translate_edge(vid_t rawid, bool &is_special) {$/;"	f	namespace:graphchi
translatetable	preprocessing/util/orderbydegree.hpp	/^        vid_t * translatetable;$/;"	m	class:graphchi::special_sharding_vertex
trim	util/configfile.hpp	/^    static std::string trim( std::string str)$/;"	f	namespace:graphchi
trimLeft	util/configfile.hpp	/^    static void trimLeft( std::string &str,$/;"	f	namespace:graphchi
trimRight	util/configfile.hpp	/^    static void trimRight( std::string &str,$/;"	f	namespace:graphchi
truncate	io/stripedio.hpp	/^        void truncate(int session, size_t nbytes) {$/;"	f	class:graphchi::stripedio
try_lock	util/pthread_tools.hpp	/^        inline bool try_lock() const {$/;"	f	class:graphchi::mutex
try_lock	util/pthread_tools.hpp	/^        inline bool try_lock() const {$/;"	f	class:graphchi::spinlock
tv_nsec	external/vpiotr-mongoose-cpp/mongoose.c	/^    long tv_nsec;$/;"	m	struct:timespec	file:
tv_sec	external/vpiotr-mongoose-cpp/mongoose.c	/^    long tv_sec;$/;"	m	struct:timespec	file:
u	external/vpiotr-mongoose-cpp/mongoose.c	/^    } u;$/;"	m	struct:usa	typeref:union:usa::__anon3	file:
u	util/pthread_tools.hpp	/^            unsigned u;$/;"	m	union:graphchi::spinrwlock::rwticket
uint16_t	external/vpiotr-mongoose-cpp/mongoose.c	/^typedef unsigned short  uint16_t;$/;"	t	file:
uint32_t	external/vpiotr-mongoose-cpp/mongoose.c	/^typedef unsigned int  uint32_t;$/;"	t	file:
uint64_t	external/vpiotr-mongoose-cpp/mongoose.c	/^typedef unsigned __int64 uint64_t;$/;"	t	file:
uniform	api/graphlab2_1_GAS_api/random.hpp	/^            inline NumType uniform(const NumType min, const NumType max) {$/;"	f	class:graphlab::random::generator
uniform	api/graphlab2_1_GAS_api/random.hpp	/^            struct uniform {$/;"	s	namespace:graphlab::random::distributions
uniform	api/graphlab2_1_GAS_api/random.hpp	/^            struct uniform<double> {$/;"	s	namespace:graphlab::random::distributions
uniform	api/graphlab2_1_GAS_api/random.hpp	/^            struct uniform<float> {$/;"	s	namespace:graphlab::random::distributions
uniform	api/graphlab2_1_GAS_api/random.hpp	/^        inline NumType uniform(const NumType min, const NumType max) {$/;"	f	namespace:graphlab::random
unlock	util/pthread_tools.hpp	/^        inline void unlock() const {$/;"	f	class:graphchi::mutex
unlock	util/pthread_tools.hpp	/^        inline void unlock() const {$/;"	f	class:graphchi::rwlock
unlock	util/pthread_tools.hpp	/^        inline void unlock() const {$/;"	f	class:graphchi::spinlock
unlock	util/pthread_tools.hpp	/^        inline void unlock() const {$/;"	f	class:graphchi::spinrwlock
unprepareOptions	external/vpiotr-mongoose-cpp/mongcpp.cpp	/^void MongooseServer::unprepareOptions()$/;"	f	class:MongooseServer
unregister_source	api/graphlab2_1_GAS_api/random.cpp	/^            void unregister_source(generator* tls_ptr) {$/;"	f	struct:graphlab::random::source_registry
update	api/functional/functional_bulksync.hpp	/^        void update(fvertex_t &v, graphchi_context &ginfo) {$/;"	f	class:graphchi::FunctionalProgramProxyBulkSync
update	api/functional/functional_semisync.hpp	/^    void update(fvertex_t &v, graphchi_context &ginfo) {$/;"	f	class:graphchi::FunctionalProgramProxySemisync
update	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        void update(graphchi_vertex<bool, EdgeDataType> &vertex, graphchi_context &gcontext) {$/;"	f	struct:graphlab::GraphLabEdgeAggregatorWrapper
update	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        void update(graphchi_vertex<bool, EdgeDataType> &vertex, graphchi_context &gcontext) {$/;"	f	struct:graphlab::GraphLabWrapper
update	tests/basic_dynamicengine_smoketest.cpp	/^    void update(graphchi_vertex<VertexDataType, EdgeDataType> &vertex, graphchi_context &gcontext) {$/;"	f	struct:SmokeTestProgram
update	tests/basic_dynamicengine_smoketest2.cpp	/^    void update(graphchi_vertex<VertexDataType, EdgeDataType> &vertex, graphchi_context &gcontext) {$/;"	f	struct:SmokeTestProgram2
update	tests/basic_smoketest.cpp	/^    void update(graphchi_vertex<VertexDataType, EdgeDataType> &vertex, graphchi_context &gcontext) {$/;"	f	struct:SmokeTestProgram
update	tests/dynamicdata_smoketest.cpp	/^    void update(graphchi_vertex<VertexDataType, EdgeDataType > &vertex, graphchi_context &gcontext) {$/;"	f	struct:DynamicDataSmokeTestProgram
update	tests/test_dynamicedata_loader.cpp	/^    void update(graphchi_vertex<VertexDataType, EdgeDataType > &vertex, graphchi_context &gcontext) {$/;"	f	struct:DynamicDataLoaderTestProgram
update_plotdata	httpadmin/plotter.hpp	/^    void update_plotdata(ENGINE * engine) {$/;"	f	namespace:graphchi
uri	external/vpiotr-mongoose-cpp/bindings/csharp/mongoose.cs	/^	public string	uri;$/;"	f	struct:MongooseRequestInfo
uri	external/vpiotr-mongoose-cpp/mongoose.h	/^  char *uri;             \/\/ URL-decoded URI$/;"	m	struct:mg_request_info
uri	external/vpiotr-mongoose-cpp/mongoose.h	/^  const char *user, *uri, *cnonce, *response, *qop, *nc, *nonce; \/\/ Fields of the Authorization header$/;"	m	struct:mg_auth_header
uri	external/vpiotr-mongoose-cpp/test/embed.c	/^  const char *uri;$/;"	m	struct:test_config	file:
url_decode	external/vpiotr-mongoose-cpp/mongoose.c	/^static size_t url_decode(const char *src, size_t src_len, char *dst,$/;"	f	file:
url_encode	external/vpiotr-mongoose-cpp/mongoose.c	/^static void url_encode(const char *src, char *dst, size_t dst_len) {$/;"	f	file:
us	util/pthread_tools.hpp	/^            unsigned short us;$/;"	m	union:graphchi::spinrwlock::rwticket
usa	external/vpiotr-mongoose-cpp/mongoose.c	/^struct usa {$/;"	s	file:
use_mmap	engine/auxdata/degree_data.hpp	/^        bool use_mmap;$/;"	m	class:graphchi::degree_data
use_mmap	engine/auxdata/vertex_data.hpp	/^        bool use_mmap;$/;"	m	class:graphchi::vertex_data_store
use_selective_scheduling	engine/graphchi_engine.hpp	/^        bool use_selective_scheduling;$/;"	m	class:graphchi::graphchi_engine
user	external/vpiotr-mongoose-cpp/examples/chat.c	/^  char user[MAX_USER_LEN];     \/\/ User that have sent the message$/;"	m	struct:message	file:
user	external/vpiotr-mongoose-cpp/examples/chat.c	/^  char user[MAX_USER_LEN];  \/\/ Authenticated user$/;"	m	struct:session	file:
user	external/vpiotr-mongoose-cpp/mongoose.h	/^  const char *user, *uri, *cnonce, *response, *qop, *nc, *nonce; \/\/ Fields of the Authorization header$/;"	m	struct:mg_auth_header
user_callback	external/vpiotr-mongoose-cpp/mongoose.c	/^    mg_callback_t user_callback;  \/\/ User-defined callback function$/;"	m	struct:mg_context	file:
user_data	external/vpiotr-mongoose-cpp/mongoose.c	/^    void *user_data;              \/\/ User-defined data$/;"	m	struct:mg_context	file:
user_data	external/vpiotr-mongoose-cpp/mongoose.h	/^  void *user_data;       \/\/ User-defined pointer passed to mg_start()$/;"	m	struct:mg_request_info
users	util/pthread_tools.hpp	/^                unsigned char users;$/;"	m	struct:graphchi::spinrwlock::rwticket::__anon1
v	metrics/metrics.hpp	/^    std::vector<double> v;$/;"	m	struct:graphchi::metrics_entry
valindex	preprocessing/sharder.hpp	/^        uint16_t valindex;$/;"	m	struct:graphchi::edge_with_value
valtype	metrics/metrics.hpp	/^    metrictype valtype;$/;"	m	struct:graphchi::metrics_entry
value	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^                double value;$/;"	m	struct:graphlab::messages::max_priority
value	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^                double value;$/;"	m	struct:graphlab::messages::sum_priority
value	external/vpiotr-mongoose-cpp/bindings/csharp/mongoose.cs	/^	public IntPtr	value;		\/\/ it won't be properly marshalled.$/;"	f	struct:MongooseHeader
value	external/vpiotr-mongoose-cpp/mongoose.h	/^    char *value;         \/\/ HTTP header value$/;"	m	struct:mg_request_info::mg_header
value	metrics/metrics.hpp	/^    double value;$/;"	m	struct:graphchi::metrics_entry
value	preprocessing/sharder.hpp	/^        EdgeDataType value;$/;"	m	struct:graphchi::edge_with_value
value	util/atomic.hpp	/^        volatile T value;$/;"	m	class:graphchi::atomic
value	util/kwaymerge.hpp	/^    T value;$/;"	m	struct:value_source
value	util/toplist.hpp	/^        VertexDataType value;$/;"	m	struct:graphchi::vertex_value
value_source	util/kwaymerge.hpp	/^    value_source(int sourceidx, T value) : sourceidx(sourceidx), value(value) {}$/;"	f	struct:value_source
value_source	util/kwaymerge.hpp	/^struct value_source {$/;"	s
value_to_neighbor	tests/bulksync_functional_test.cpp	/^    int value_to_neighbor(graphchi_context &info, vertex_info& myvertex, vid_t nbid, int myval) {$/;"	f	struct:smoketest_program
values	util/binary_minheap.hpp	/^    T * values;$/;"	m	class:binary_minheap
vars	external/vpiotr-mongoose-cpp/mongoose.c	/^    char *vars[MAX_CGI_ENVIR_VARS]; \/\/ char **envp$/;"	m	struct:cgi_env_block	file:
vdblock	engine/auxdata/dynamicdata/vertex_data_dynamic.hpp	/^        typedef vdblock_t<VertexDataType> vdblock;$/;"	t	class:graphchi::vertex_data_store
vdblock_t	engine/auxdata/dynamicdata/vertex_data_dynamic.hpp	/^        vdblock_t(int bid) : blockid(bid), data(NULL), dblock(NULL) {}$/;"	f	struct:graphchi::vdblock_t
vdblock_t	engine/auxdata/dynamicdata/vertex_data_dynamic.hpp	/^    struct vdblock_t {$/;"	s	namespace:graphchi
vec	external/vpiotr-mongoose-cpp/mongoose.c	/^struct vec {$/;"	s	file:
verify_document_root	external/vpiotr-mongoose-cpp/main.c	/^static void verify_document_root(const char *root) {$/;"	f	file:
version	external/vpiotr-mongoose-cpp/bindings/csharp/mongoose.cs	/^	public string version;$/;"	f	class:Mongoose
vertex	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        VertexType * vertex;$/;"	m	struct:graphlab::GraphLabEdgeWrapper
vertex	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        VertexType * vertex;$/;"	m	struct:graphlab::GraphLabVertexWrapper
vertex	util/toplist.hpp	/^        vid_t vertex;$/;"	m	struct:graphchi::vertex_value
vertexArray	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        std::vector<GLVertexDataType> * vertexArray;$/;"	m	struct:graphlab::GraphLabEdgeWrapper
vertexArray	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        std::vector<GLVertexDataType> * vertexArray;$/;"	m	struct:graphlab::GraphLabVertexWrapper
vertexId	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        graphchi::vid_t vertexId;$/;"	m	struct:graphlab::GraphLabVertexWrapper
vertexInmemoryArray	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        std::vector<GLVertexDataType> * vertexInmemoryArray;$/;"	m	struct:graphlab::GraphLabEdgeAggregatorWrapper
vertexInmemoryArray	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        std::vector<GLVertexDataType> * vertexInmemoryArray;$/;"	m	struct:graphlab::GraphLabWrapper
vertex_data_handler	engine/graphchi_engine.hpp	/^        vertex_data_store<VertexDataType> * vertex_data_handler;$/;"	m	class:graphchi::graphchi_engine
vertex_data_ptr	engine/auxdata/dynamicdata/vertex_data_dynamic.hpp	/^        VertexDataType * vertex_data_ptr(vid_t vertexid) {$/;"	f	class:graphchi::vertex_data_store
vertex_data_ptr	engine/auxdata/vertex_data.hpp	/^        VertexDataType * vertex_data_ptr(vid_t vertexid) {$/;"	f	class:graphchi::vertex_data_store
vertex_data_store	engine/auxdata/dynamicdata/vertex_data_dynamic.hpp	/^        vertex_data_store(std::string base_filename, size_t nvertices, stripedio * iomgr) : iomgr(iomgr), loaded_chunk(NULL){$/;"	f	class:graphchi::vertex_data_store
vertex_data_store	engine/auxdata/dynamicdata/vertex_data_dynamic.hpp	/^    class vertex_data_store {$/;"	c	namespace:graphchi
vertex_data_store	engine/auxdata/vertex_data.hpp	/^        vertex_data_store(std::string base_filename, size_t nvertices, stripedio * iomgr) : iomgr(iomgr), loaded_chunk(NULL){$/;"	f	class:graphchi::vertex_data_store
vertex_data_store	engine/auxdata/vertex_data.hpp	/^    class vertex_data_store {$/;"	c	namespace:graphchi
vertex_data_type	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        typedef GLVertexDataType vertex_data_type;$/;"	t	struct:graphlab::GraphLabEdgeWrapper
vertex_data_type	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        typedef GLVertexDataType vertex_data_type;$/;"	t	struct:graphlab::GraphLabVertexWrapper
vertex_data_type	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        typedef typename Graph::vertex_data_type vertex_data_type;$/;"	t	struct:graphlab::ivertex_program
vertex_data_type	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        typedef vertex_data vertex_data_type;$/;"	t	struct:graphlab::distributed_graph
vertex_degree	preprocessing/util/orderbydegree.hpp	/^        vertex_degree() {}$/;"	f	struct:graphchi::vertex_degree
vertex_degree	preprocessing/util/orderbydegree.hpp	/^        vertex_degree(int deg, vid_t id) : deg(deg), id(id) {}$/;"	f	struct:graphchi::vertex_degree
vertex_degree	preprocessing/util/orderbydegree.hpp	/^    struct vertex_degree {$/;"	s	namespace:graphchi
vertex_degree_less	preprocessing/util/orderbydegree.hpp	/^    static bool vertex_degree_less(const vertex_degree &a, const vertex_degree &b) {$/;"	f	namespace:graphchi
vertex_en	engine/auxdata/degree_data.hpp	/^        vid_t vertex_en;$/;"	m	class:graphchi::degree_data
vertex_en	engine/auxdata/dynamicdata/vertex_data_dynamic.hpp	/^        vid_t vertex_en;$/;"	m	class:graphchi::vertex_data_store
vertex_en	engine/auxdata/vertex_data.hpp	/^        vid_t vertex_en;$/;"	m	class:graphchi::vertex_data_store
vertex_id	api/graph_objects.hpp	/^        vid_t vertex_id() {$/;"	f	class:graphchi::graphchi_edge
vertex_id_type	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        typedef graphchi::vid_t vertex_id_type;$/;"	t	struct:graphlab::distributed_graph
vertex_id_type	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        typedef typename graph_type::vertex_id_type vertex_id_type;$/;"	t	class:graphlab::icontext
vertex_id_type	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        typedef typename graphchi::vid_t vertex_id_type;$/;"	t	struct:graphlab::ivertex_program
vertex_id_type	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^    typedef vid_t vertex_id_type;$/;"	t	namespace:graphlab
vertex_info	api/functional/functional_defs.hpp	/^    struct vertex_info {$/;"	s	namespace:graphchi
vertex_st	engine/auxdata/degree_data.hpp	/^        vid_t vertex_st;$/;"	m	class:graphchi::degree_data
vertex_st	engine/auxdata/dynamicdata/vertex_data_dynamic.hpp	/^        vid_t vertex_st;$/;"	m	class:graphchi::vertex_data_store
vertex_st	engine/auxdata/vertex_data.hpp	/^        vid_t vertex_st;$/;"	m	class:graphchi::vertex_data_store
vertex_type	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        typedef GraphLabVertexWrapper<GLVertexDataType, EdgeDataType> vertex_type;$/;"	t	struct:graphlab::GraphLabEdgeWrapper
vertex_type	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        typedef GraphLabVertexWrapper<GLVertexDataType, EdgeDataType> vertex_type;$/;"	t	struct:graphlab::GraphLabVertexWrapper
vertex_type	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        typedef GraphLabVertexWrapper<vertex_data_type, edge_data_type> vertex_type;$/;"	t	struct:graphlab::distributed_graph
vertex_type	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        typedef GraphLabVertexWrapper<vertex_data_type, edge_data_type> vertex_type;$/;"	t	struct:graphlab::ivertex_program
vertex_type	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        typedef typename graph_type::vertex_type vertex_type;$/;"	t	class:graphlab::icontext
vertex_value	util/toplist.hpp	/^        vertex_value() {}$/;"	f	struct:graphchi::vertex_value
vertex_value	util/toplist.hpp	/^        vertex_value(vid_t v, VertexDataType x) : vertex(v), value(x) {}$/;"	f	struct:graphchi::vertex_value
vertex_value	util/toplist.hpp	/^    struct vertex_value {$/;"	s	namespace:graphchi
vertex_value_greater	util/toplist.hpp	/^    bool vertex_value_greater(const vertex_value<VertexDataType> &a, const vertex_value<VertexDataType> &b) {$/;"	f	namespace:graphchi
vertexchunk	preprocessing/sharder.hpp	/^        int vertexchunk;$/;"	m	class:graphchi::sharder
vertexid	api/functional/functional_defs.hpp	/^        vid_t vertexid;$/;"	m	struct:graphchi::vertex_info
vertexid	api/graph_objects.hpp	/^        vid_t vertexid; \/\/ Source or Target vertex id. Clear from context.$/;"	m	class:graphchi::graphchi_edge
vertexid	api/graph_objects.hpp	/^        vid_t vertexid;$/;"	m	class:graphchi::internal_graphchi_vertex
vertexid	graphchi_types.hpp	/^        vid_t vertexid;$/;"	m	struct:graphchi::shard_index
verticesperblock	engine/auxdata/dynamicdata/vertex_data_dynamic.hpp	/^        size_t verticesperblock;$/;"	m	class:graphchi::vertex_data_store
vid_t	graphchi_types.hpp	/^    typedef uint32_t vid_t;$/;"	t	namespace:graphchi
vid_t	util/randomweightinject.cpp	/^typedef unsigned int vid_t;$/;"	t	file:
vinfo	api/functional/functional_bulksync.hpp	/^        vertex_info vinfo;$/;"	m	class:graphchi::functional_vertex_unweighted_bulksync
vinfo	api/functional/functional_semisync.hpp	/^    vertex_info vinfo;$/;"	m	class:graphchi::functional_vertex_unweighted_semisync
vsnprintf	external/vpiotr-mongoose-cpp/main.c	46;"	d	file:
vsnprintf	external/vpiotr-mongoose-cpp/mongoose.c	107;"	d	file:
wa.c	external/vpiotr-mongoose-cpp/examples/html/jquery.js	/^true;if(j=c.fragments[a[0]])if(j!==1)f=j}if(!f){f=b.createDocumentFragment();c.clean(a,b,f,d)}if(e)c.fragments[a[0]]=j?f:1;return{fragment:f,cacheable:e}}function K(a,b){var d={};c.each(va.concat.apply([],va.slice(0,b)),function(){d[this]=a});return d}function wa(a){return"scrollTo"in a&&a.document?a:a.nodeType===9?a.defaultView||a.parentWindow:false}var c=function(a,b){return new c.fn.init(a,b)},Ra=A.jQuery,Sa=A.$,s=A.document,T,Ta=\/^[^<]*(<[\\w\\W]+>)[^>]*$|^#([\\w-]+)$\/,Ua=\/^.[^:#\\[\\.,]*$\/,Va=\/\\S\/,$/;"	f
wait	util/pthread_tools.hpp	/^        inline void wait() const { pthread_barrier_wait(&m_barrier); }$/;"	f	class:graphchi::barrier
wait	util/pthread_tools.hpp	/^        inline void wait() const {$/;"	f	class:graphchi::semaphore
wait	util/pthread_tools.hpp	/^        inline void wait() {$/;"	f	class:graphchi::barrier
wait	util/pthread_tools.hpp	/^        inline void wait(const mutex& mut) const {$/;"	f	class:graphchi::conditional
wait_for_reads	io/stripedio.hpp	/^        void wait_for_reads() {$/;"	f	class:graphchi::stripedio
wait_for_writes	io/stripedio.hpp	/^        void wait_for_writes() {$/;"	f	class:graphchi::stripedio
waiting	util/pthread_tools.hpp	/^        std::vector<unsigned char> waiting;$/;"	m	class:graphchi::barrier
was_compressed	io/stripedio.hpp	/^        bool was_compressed;$/;"	m	struct:graphchi::cached_block
window_start_edataoffset	shards/dynamicdata/slidingshard.hpp	/^        size_t window_start_edataoffset;$/;"	m	class:graphchi::sliding_shard
window_start_edataoffset	shards/slidingshard.hpp	/^        size_t window_start_edataoffset;$/;"	m	class:graphchi::sliding_shard
work	engine/graphchi_engine.hpp	/^        size_t work; \/\/ work is the number of edges processed$/;"	m	class:graphchi::graphchi_engine
worker_thread	external/vpiotr-mongoose-cpp/mongoose.c	/^static void worker_thread(struct mg_context *ctx) {$/;"	f	file:
write	api/dynamicdata/chivector.hpp	/^    void write(T * dest) {$/;"	f	class:graphchi::chivector
write	external/vpiotr-mongoose-cpp/bindings/csharp/mongoose.cs	/^	public int write(string data) {$/;"	m	class:MongooseConnection
write	external/vpiotr-mongoose-cpp/bindings/python/mongoose.py	/^    def write(self, data):$/;"	m	class:Connection
write	external/vpiotr-mongoose-cpp/mongcpp.cpp	/^int MongooseConnection::write(const std::string &text)$/;"	f	class:MongooseConnection
write	external/vpiotr-mongoose-cpp/mongcpp.cpp	/^int MongooseConnection::write(const void *buf, size_t len)$/;"	f	class:MongooseConnection
write	external/vpiotr-mongoose-cpp/mongcpp.cpp	/^void MongooseResponse::write()$/;"	f	class:MongooseResponse
write	external/vpiotr-mongoose-cpp/mongoose.c	118;"	d	file:
write	shards/dynamicdata/dynamicblock.hpp	/^        void write(uint8_t ** outdata, int & size) {$/;"	f	struct:graphchi::dynamicdata_block
write	util/pthread_tools.hpp	/^                unsigned char write;$/;"	m	struct:graphchi::spinrwlock::rwticket::__anon1
write_and_release_block	shards/dynamicdata/memoryshard.hpp	/^        void write_and_release_block(int i) {$/;"	f	class:graphchi::memory_shard
write_block	engine/auxdata/dynamicdata/vertex_data_dynamic.hpp	/^        void write_block(vdblock &block) {$/;"	f	class:graphchi::vertex_data_store
write_block_uncompressed_size	shards/dynamicdata/dynamicblock.hpp	/^    void write_block_uncompressed_size(std::string blockfilename, int size) {$/;"	f	namespace:graphchi
write_compressed	util/ioutil.hpp	/^size_t write_compressed(int f, T * tbuf, size_t nbytes) {$/;"	f
write_delta_log	engine/graphchi_engine.hpp	/^        virtual void write_delta_log() {$/;"	f	class:graphchi::graphchi_engine
write_file	external/vpiotr-mongoose-cpp/test/test.pl	/^sub write_file {$/;"	s
write_shards	preprocessing/sharder.hpp	/^        virtual void write_shards() {$/;"	f	class:graphchi::sharder
writea	util/ioutil.hpp	/^void writea(int f, T * tbuf, size_t nbytes) {$/;"	f
writedesc	shards/dynamicdata/slidingshard.hpp	/^        int writedesc;$/;"	m	class:graphchi::sliding_shard
writedesc	shards/dynamicdata/slidingshard.hpp	/^        int writedesc;$/;"	m	struct:graphchi::sblock
writedesc	shards/slidingshard.hpp	/^        int writedesc;$/;"	m	class:graphchi::sliding_shard
writedesc	shards/slidingshard.hpp	/^        int writedesc;$/;"	m	struct:graphchi::sblock
writedescs	io/stripedio.hpp	/^        std::vector<int> writedescs;$/;"	m	struct:graphchi::io_descriptor
writelock	util/pthread_tools.hpp	/^        inline void writelock() const {$/;"	f	class:graphchi::rwlock
writelock	util/pthread_tools.hpp	/^        inline void writelock() const {$/;"	f	class:graphchi::spinrwlock
writing	util/pthread_tools.hpp	/^        mutable bool writing;$/;"	m	class:graphchi::spinrwlock
wrunlock	util/pthread_tools.hpp	/^        inline void wrunlock() const {$/;"	f	class:graphchi::rwlock
wrunlock	util/pthread_tools.hpp	/^        inline void wrunlock() const{$/;"	f	class:graphchi::spinrwlock
~GraphChiProgram	api/graphchi_program.hpp	/^        virtual ~GraphChiProgram() {}$/;"	f	class:graphchi::GraphChiProgram
~Mongoose	external/vpiotr-mongoose-cpp/bindings/csharp/mongoose.cs	/^	~Mongoose() {$/;"	m	class:Mongoose	file:
~MongooseConnection	external/vpiotr-mongoose-cpp/mongcpp.cpp	/^MongooseConnection::~MongooseConnection()$/;"	f	class:MongooseConnection
~MongooseRequest	external/vpiotr-mongoose-cpp/mongcpp.cpp	/^MongooseRequest::~MongooseRequest()$/;"	f	class:MongooseRequest
~MongooseResponse	external/vpiotr-mongoose-cpp/mongcpp.cpp	/^MongooseResponse::~MongooseResponse()$/;"	f	class:MongooseResponse
~MongooseServer	external/vpiotr-mongoose-cpp/mongcpp.cpp	/^MongooseServer::~MongooseServer()$/;"	f	class:MongooseServer
~TestMongoServer	external/vpiotr-mongoose-cpp/test/mongotest.cpp	/^    virtual ~TestMongoServer() {}$/;"	f	class:TestMongoServer
~barrier	util/pthread_tools.hpp	/^        ~barrier() { pthread_barrier_destroy(&m_barrier); }$/;"	f	class:graphchi::barrier
~barrier	util/pthread_tools.hpp	/^        ~barrier() {}$/;"	f	class:graphchi::barrier
~basic_reporter	metrics/reps/basic_reporter.hpp	/^    virtual ~basic_reporter() {}$/;"	f	class:graphchi::basic_reporter
~basic_text_output	output/output.hpp	/^        ~basic_text_output() {$/;"	f	class:graphchi::basic_text_output
~binary_minheap	util/binary_minheap.hpp	/^    ~binary_minheap() {$/;"	f	class:binary_minheap
~bitset_scheduler	engine/bitset_scheduler.hpp	/^        virtual ~bitset_scheduler() {$/;"	f	class:graphchi::bitset_scheduler
~block_cache	io/stripedio.hpp	/^        ~block_cache() {$/;"	f	class:graphchi::block_cache
~cached_block	io/stripedio.hpp	/^        ~cached_block() {$/;"	f	struct:graphchi::cached_block
~chivector	api/dynamicdata/chivector.hpp	/^    ~chivector() {$/;"	f	class:graphchi::chivector
~conditional	util/pthread_tools.hpp	/^        ~conditional() {$/;"	f	class:graphchi::conditional
~degree_data	engine/auxdata/degree_data.hpp	/^        virtual ~degree_data() {$/;"	f	class:graphchi::degree_data
~dense_bitset	util/dense_bitset.hpp	/^        virtual ~dense_bitset() {free(array);}$/;"	f	class:graphchi::dense_bitset
~dynamicdata_block	shards/dynamicdata/dynamicblock.hpp	/^        ~dynamicdata_block() {$/;"	f	struct:graphchi::dynamicdata_block
~edge_buffer_flat	engine/dynamic_graphs/edgebuffers.hpp	/^        ~edge_buffer_flat() {$/;"	f	class:graphchi::edge_buffer_flat
~file_logger	logger/logger.hpp	/^    ~file_logger() {$/;"	f	class:file_logger
~file_reporter	metrics/reps/file_reporter.hpp	/^      virtual ~file_reporter() {}$/;"	f	class:graphchi::file_reporter
~graphchi_engine	engine/graphchi_engine.hpp	/^        virtual ~graphchi_engine() {$/;"	f	class:graphchi::graphchi_engine
~graphchi_vertex	api/graph_objects.hpp	/^        virtual ~graphchi_vertex() {}$/;"	f	class:graphchi::graphchi_vertex
~html_reporter	metrics/reps/html_reporter.hpp	/^            virtual ~html_reporter() {$/;"	f	class:graphchi::html_reporter
~icontext	api/graphlab2_1_GAS_api/graphchi_graphlabv2_1.hpp	/^        virtual ~icontext() { }$/;"	f	class:graphlab::icontext
~imetrics_reporter	metrics/metrics.hpp	/^        virtual ~imetrics_reporter() {}$/;"	f	class:graphchi::imetrics_reporter
~internal_graphchi_vertex	api/graph_objects.hpp	/^        virtual ~internal_graphchi_vertex() {}$/;"	f	class:graphchi::internal_graphchi_vertex
~ischeduler	api/ischeduler.hpp	/^        virtual ~ischeduler() {} $/;"	f	class:graphchi::ischeduler
~kway_merge	util/kwaymerge.hpp	/^    ~kway_merge() {$/;"	f	class:kway_merge
~memory_shard	shards/dynamicdata/memoryshard.hpp	/^        ~memory_shard() {$/;"	f	class:graphchi::memory_shard
~memory_shard	shards/memoryshard.hpp	/^        ~memory_shard() {$/;"	f	class:graphchi::memory_shard
~mutex	util/pthread_tools.hpp	/^        ~mutex(){$/;"	f	class:graphchi::mutex
~non_scheduler	api/ischeduler.hpp	/^        virtual ~non_scheduler() {} $/;"	f	class:graphchi::non_scheduler
~nondet_generator	api/graphlab2_1_GAS_api/random.cpp	/^            ~nondet_generator() { rnd_dev.close(); }$/;"	f	class:graphlab::random::nondet_generator
~rwlock	util/pthread_tools.hpp	/^        ~rwlock() {$/;"	f	class:graphchi::rwlock
~semaphore	util/pthread_tools.hpp	/^        ~semaphore() {$/;"	f	class:graphchi::semaphore
~sharded_graph_output	preprocessing/sharder.hpp	/^        ~sharded_graph_output() {$/;"	f	class:graphchi::sharded_graph_output
~sharder	preprocessing/sharder.hpp	/^        virtual ~sharder() {$/;"	f	class:graphchi::sharder
~shovel_merge_source	preprocessing/sharder.hpp	/^        virtual ~shovel_merge_source() {$/;"	f	struct:graphchi::shovel_merge_source
~sliding_shard	shards/dynamicdata/slidingshard.hpp	/^        ~sliding_shard() {$/;"	f	class:graphchi::sliding_shard
~sliding_shard	shards/slidingshard.hpp	/^        ~sliding_shard() {$/;"	f	class:graphchi::sliding_shard
~spinlock	util/pthread_tools.hpp	/^        ~spinlock(){$/;"	f	class:graphchi::spinlock
~stripedio	io/stripedio.hpp	/^        ~stripedio() {$/;"	f	class:graphchi::stripedio
~synchronized_queue	util/synchronized_queue.hpp	/^            ~synchronized_queue() { };$/;"	f	class:graphchi::synchronized_queue
~vertex_data_store	engine/auxdata/dynamicdata/vertex_data_dynamic.hpp	/^        virtual ~vertex_data_store() {$/;"	f	class:graphchi::vertex_data_store
~vertex_data_store	engine/auxdata/vertex_data.hpp	/^        virtual ~vertex_data_store() {$/;"	f	class:graphchi::vertex_data_store
